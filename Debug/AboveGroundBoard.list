
AboveGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a34  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003af4  08003af4  00004af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b7c  08003b7c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b7c  08003b7c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b7c  08003b7c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b7c  08003b7c  00004b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b80  08003b80  00004b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003b84  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  2000000c  08003b90  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08003b90  000052c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c815  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f90  00000000  00000000  00011849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  000137e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d8  00000000  00000000  00014218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000137bb  00000000  00000000  000149f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce91  00000000  00000000  000281ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b2a3  00000000  00000000  0003503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b02df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002400  00000000  00000000  000b0324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000b2724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003adc 	.word	0x08003adc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003adc 	.word	0x08003adc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b5b0      	push	{r4, r5, r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f000 fbc6 	bl	8000b8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f82f 	bl	8000460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 f983 	bl	800070c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000406:	f000 f86f 	bl	80004e8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800040a:	f000 f90f 	bl	800062c <MX_USART1_UART_Init>
  MX_WWDG_Init();
 800040e:	f000 f95d 	bl	80006cc <MX_WWDG_Init>
  /* USER CODE BEGIN 2 */
  modbus_setup_rx(12);
 8000412:	200c      	movs	r0, #12
 8000414:	f000 fa1a 	bl	800084c <modbus_setup_rx>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(modbus_rx())
 8000418:	f000 fa30 	bl	800087c <modbus_rx>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d0fb      	beq.n	8000418 <main+0x24>
	  {
		  uint16_t buffer[12];
		  for(uint8_t i = 0; i < 12; i++)
 8000420:	231f      	movs	r3, #31
 8000422:	18fb      	adds	r3, r7, r3
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
 8000428:	e011      	b.n	800044e <main+0x5a>
		  {
			  buffer[i] = get_response_buffer(i);
 800042a:	251f      	movs	r5, #31
 800042c:	197b      	adds	r3, r7, r5
 800042e:	781c      	ldrb	r4, [r3, #0]
 8000430:	197b      	adds	r3, r7, r5
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	0018      	movs	r0, r3
 8000436:	f000 f9ef 	bl	8000818 <get_response_buffer>
 800043a:	0003      	movs	r3, r0
 800043c:	0019      	movs	r1, r3
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	0062      	lsls	r2, r4, #1
 8000442:	52d1      	strh	r1, [r2, r3]
		  for(uint8_t i = 0; i < 12; i++)
 8000444:	197b      	adds	r3, r7, r5
 8000446:	781a      	ldrb	r2, [r3, #0]
 8000448:	197b      	adds	r3, r7, r5
 800044a:	3201      	adds	r2, #1
 800044c:	701a      	strb	r2, [r3, #0]
 800044e:	231f      	movs	r3, #31
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b0b      	cmp	r3, #11
 8000456:	d9e8      	bls.n	800042a <main+0x36>
		  }
		  modbus_setup_rx(12);
 8000458:	200c      	movs	r0, #12
 800045a:	f000 f9f7 	bl	800084c <modbus_setup_rx>
	  if(modbus_rx())
 800045e:	e7db      	b.n	8000418 <main+0x24>

08000460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000460:	b590      	push	{r4, r7, lr}
 8000462:	b08d      	sub	sp, #52	@ 0x34
 8000464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000466:	2414      	movs	r4, #20
 8000468:	193b      	adds	r3, r7, r4
 800046a:	0018      	movs	r0, r3
 800046c:	231c      	movs	r3, #28
 800046e:	001a      	movs	r2, r3
 8000470:	2100      	movs	r1, #0
 8000472:	f003 fb06 	bl	8003a82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000476:	003b      	movs	r3, r7
 8000478:	0018      	movs	r0, r3
 800047a:	2314      	movs	r3, #20
 800047c:	001a      	movs	r2, r3
 800047e:	2100      	movs	r1, #0
 8000480:	f003 faff 	bl	8003a82 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000484:	193b      	adds	r3, r7, r4
 8000486:	2202      	movs	r2, #2
 8000488:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800048a:	193b      	adds	r3, r7, r4
 800048c:	2280      	movs	r2, #128	@ 0x80
 800048e:	0052      	lsls	r2, r2, #1
 8000490:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8000492:	193b      	adds	r3, r7, r4
 8000494:	2280      	movs	r2, #128	@ 0x80
 8000496:	0152      	lsls	r2, r2, #5
 8000498:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800049a:	193b      	adds	r3, r7, r4
 800049c:	2240      	movs	r2, #64	@ 0x40
 800049e:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	0018      	movs	r0, r3
 80004a4:	f001 faa4 	bl	80019f0 <HAL_RCC_OscConfig>
 80004a8:	1e03      	subs	r3, r0, #0
 80004aa:	d001      	beq.n	80004b0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004ac:	f000 f9a0 	bl	80007f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b0:	003b      	movs	r3, r7
 80004b2:	2207      	movs	r2, #7
 80004b4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004b6:	003b      	movs	r3, r7
 80004b8:	2200      	movs	r2, #0
 80004ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004bc:	003b      	movs	r3, r7
 80004be:	2200      	movs	r2, #0
 80004c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004c2:	003b      	movs	r3, r7
 80004c4:	2200      	movs	r2, #0
 80004c6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004c8:	003b      	movs	r3, r7
 80004ca:	2200      	movs	r2, #0
 80004cc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004ce:	003b      	movs	r3, r7
 80004d0:	2100      	movs	r1, #0
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 fc70 	bl	8001db8 <HAL_RCC_ClockConfig>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80004dc:	f000 f988 	bl	80007f0 <Error_Handler>
  }
}
 80004e0:	46c0      	nop			@ (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b00d      	add	sp, #52	@ 0x34
 80004e6:	bd90      	pop	{r4, r7, pc}

080004e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	0018      	movs	r0, r3
 80004f2:	230c      	movs	r3, #12
 80004f4:	001a      	movs	r2, r3
 80004f6:	2100      	movs	r1, #0
 80004f8:	f003 fac3 	bl	8003a82 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004fc:	4b45      	ldr	r3, [pc, #276]	@ (8000614 <MX_ADC1_Init+0x12c>)
 80004fe:	4a46      	ldr	r2, [pc, #280]	@ (8000618 <MX_ADC1_Init+0x130>)
 8000500:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000502:	4b44      	ldr	r3, [pc, #272]	@ (8000614 <MX_ADC1_Init+0x12c>)
 8000504:	22c0      	movs	r2, #192	@ 0xc0
 8000506:	0612      	lsls	r2, r2, #24
 8000508:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800050a:	4b42      	ldr	r3, [pc, #264]	@ (8000614 <MX_ADC1_Init+0x12c>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000510:	4b40      	ldr	r3, [pc, #256]	@ (8000614 <MX_ADC1_Init+0x12c>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8000516:	4b3f      	ldr	r3, [pc, #252]	@ (8000614 <MX_ADC1_Init+0x12c>)
 8000518:	2280      	movs	r2, #128	@ 0x80
 800051a:	0612      	lsls	r2, r2, #24
 800051c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800051e:	4b3d      	ldr	r3, [pc, #244]	@ (8000614 <MX_ADC1_Init+0x12c>)
 8000520:	2204      	movs	r2, #4
 8000522:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000524:	4b3b      	ldr	r3, [pc, #236]	@ (8000614 <MX_ADC1_Init+0x12c>)
 8000526:	2200      	movs	r2, #0
 8000528:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800052a:	4b3a      	ldr	r3, [pc, #232]	@ (8000614 <MX_ADC1_Init+0x12c>)
 800052c:	2200      	movs	r2, #0
 800052e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000530:	4b38      	ldr	r3, [pc, #224]	@ (8000614 <MX_ADC1_Init+0x12c>)
 8000532:	2200      	movs	r2, #0
 8000534:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000536:	4b37      	ldr	r3, [pc, #220]	@ (8000614 <MX_ADC1_Init+0x12c>)
 8000538:	2201      	movs	r2, #1
 800053a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053c:	4b35      	ldr	r3, [pc, #212]	@ (8000614 <MX_ADC1_Init+0x12c>)
 800053e:	2220      	movs	r2, #32
 8000540:	2100      	movs	r1, #0
 8000542:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000544:	4b33      	ldr	r3, [pc, #204]	@ (8000614 <MX_ADC1_Init+0x12c>)
 8000546:	2200      	movs	r2, #0
 8000548:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800054a:	4b32      	ldr	r3, [pc, #200]	@ (8000614 <MX_ADC1_Init+0x12c>)
 800054c:	2200      	movs	r2, #0
 800054e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000550:	4b30      	ldr	r3, [pc, #192]	@ (8000614 <MX_ADC1_Init+0x12c>)
 8000552:	222c      	movs	r2, #44	@ 0x2c
 8000554:	2100      	movs	r1, #0
 8000556:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000558:	4b2e      	ldr	r3, [pc, #184]	@ (8000614 <MX_ADC1_Init+0x12c>)
 800055a:	2200      	movs	r2, #0
 800055c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800055e:	4b2d      	ldr	r3, [pc, #180]	@ (8000614 <MX_ADC1_Init+0x12c>)
 8000560:	2200      	movs	r2, #0
 8000562:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000564:	4b2b      	ldr	r3, [pc, #172]	@ (8000614 <MX_ADC1_Init+0x12c>)
 8000566:	223c      	movs	r2, #60	@ 0x3c
 8000568:	2100      	movs	r1, #0
 800056a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800056c:	4b29      	ldr	r3, [pc, #164]	@ (8000614 <MX_ADC1_Init+0x12c>)
 800056e:	2200      	movs	r2, #0
 8000570:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000572:	4b28      	ldr	r3, [pc, #160]	@ (8000614 <MX_ADC1_Init+0x12c>)
 8000574:	0018      	movs	r0, r3
 8000576:	f000 fc83 	bl	8000e80 <HAL_ADC_Init>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800057e:	f000 f937 	bl	80007f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2201      	movs	r2, #1
 8000586:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2201      	movs	r2, #1
 800058c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800058e:	1d3a      	adds	r2, r7, #4
 8000590:	4b20      	ldr	r3, [pc, #128]	@ (8000614 <MX_ADC1_Init+0x12c>)
 8000592:	0011      	movs	r1, r2
 8000594:	0018      	movs	r0, r3
 8000596:	f000 fe19 	bl	80011cc <HAL_ADC_ConfigChannel>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 800059e:	f000 f927 	bl	80007f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	4a1d      	ldr	r2, [pc, #116]	@ (800061c <MX_ADC1_Init+0x134>)
 80005a6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a8:	1d3a      	adds	r2, r7, #4
 80005aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000614 <MX_ADC1_Init+0x12c>)
 80005ac:	0011      	movs	r1, r2
 80005ae:	0018      	movs	r0, r3
 80005b0:	f000 fe0c 	bl	80011cc <HAL_ADC_ConfigChannel>
 80005b4:	1e03      	subs	r3, r0, #0
 80005b6:	d001      	beq.n	80005bc <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80005b8:	f000 f91a 	bl	80007f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	4a18      	ldr	r2, [pc, #96]	@ (8000620 <MX_ADC1_Init+0x138>)
 80005c0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c2:	1d3a      	adds	r2, r7, #4
 80005c4:	4b13      	ldr	r3, [pc, #76]	@ (8000614 <MX_ADC1_Init+0x12c>)
 80005c6:	0011      	movs	r1, r2
 80005c8:	0018      	movs	r0, r3
 80005ca:	f000 fdff 	bl	80011cc <HAL_ADC_ConfigChannel>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80005d2:	f000 f90d 	bl	80007f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	4a12      	ldr	r2, [pc, #72]	@ (8000624 <MX_ADC1_Init+0x13c>)
 80005da:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005dc:	1d3a      	adds	r2, r7, #4
 80005de:	4b0d      	ldr	r3, [pc, #52]	@ (8000614 <MX_ADC1_Init+0x12c>)
 80005e0:	0011      	movs	r1, r2
 80005e2:	0018      	movs	r0, r3
 80005e4:	f000 fdf2 	bl	80011cc <HAL_ADC_ConfigChannel>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80005ec:	f000 f900 	bl	80007f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	4a0d      	ldr	r2, [pc, #52]	@ (8000628 <MX_ADC1_Init+0x140>)
 80005f4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f6:	1d3a      	adds	r2, r7, #4
 80005f8:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <MX_ADC1_Init+0x12c>)
 80005fa:	0011      	movs	r1, r2
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 fde5 	bl	80011cc <HAL_ADC_ConfigChannel>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8000606:	f000 f8f3 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b004      	add	sp, #16
 8000610:	bd80      	pop	{r7, pc}
 8000612:	46c0      	nop			@ (mov r8, r8)
 8000614:	20000028 	.word	0x20000028
 8000618:	40012400 	.word	0x40012400
 800061c:	04000002 	.word	0x04000002
 8000620:	08000004 	.word	0x08000004
 8000624:	0c000008 	.word	0x0c000008
 8000628:	10000010 	.word	0x10000010

0800062c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000630:	4b24      	ldr	r3, [pc, #144]	@ (80006c4 <MX_USART1_UART_Init+0x98>)
 8000632:	4a25      	ldr	r2, [pc, #148]	@ (80006c8 <MX_USART1_UART_Init+0x9c>)
 8000634:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000636:	4b23      	ldr	r3, [pc, #140]	@ (80006c4 <MX_USART1_UART_Init+0x98>)
 8000638:	22e1      	movs	r2, #225	@ 0xe1
 800063a:	0252      	lsls	r2, r2, #9
 800063c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800063e:	4b21      	ldr	r3, [pc, #132]	@ (80006c4 <MX_USART1_UART_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000644:	4b1f      	ldr	r3, [pc, #124]	@ (80006c4 <MX_USART1_UART_Init+0x98>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800064a:	4b1e      	ldr	r3, [pc, #120]	@ (80006c4 <MX_USART1_UART_Init+0x98>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000650:	4b1c      	ldr	r3, [pc, #112]	@ (80006c4 <MX_USART1_UART_Init+0x98>)
 8000652:	220c      	movs	r2, #12
 8000654:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000656:	4b1b      	ldr	r3, [pc, #108]	@ (80006c4 <MX_USART1_UART_Init+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800065c:	4b19      	ldr	r3, [pc, #100]	@ (80006c4 <MX_USART1_UART_Init+0x98>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000662:	4b18      	ldr	r3, [pc, #96]	@ (80006c4 <MX_USART1_UART_Init+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000668:	4b16      	ldr	r3, [pc, #88]	@ (80006c4 <MX_USART1_UART_Init+0x98>)
 800066a:	2200      	movs	r2, #0
 800066c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800066e:	4b15      	ldr	r3, [pc, #84]	@ (80006c4 <MX_USART1_UART_Init+0x98>)
 8000670:	2200      	movs	r2, #0
 8000672:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000674:	4813      	ldr	r0, [pc, #76]	@ (80006c4 <MX_USART1_UART_Init+0x98>)
 8000676:	2300      	movs	r3, #0
 8000678:	2200      	movs	r2, #0
 800067a:	2100      	movs	r1, #0
 800067c:	f003 f850 	bl	8003720 <HAL_RS485Ex_Init>
 8000680:	1e03      	subs	r3, r0, #0
 8000682:	d001      	beq.n	8000688 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000684:	f000 f8b4 	bl	80007f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000688:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <MX_USART1_UART_Init+0x98>)
 800068a:	2100      	movs	r1, #0
 800068c:	0018      	movs	r0, r3
 800068e:	f003 f8f3 	bl	8003878 <HAL_UARTEx_SetTxFifoThreshold>
 8000692:	1e03      	subs	r3, r0, #0
 8000694:	d001      	beq.n	800069a <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000696:	f000 f8ab 	bl	80007f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800069a:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <MX_USART1_UART_Init+0x98>)
 800069c:	2100      	movs	r1, #0
 800069e:	0018      	movs	r0, r3
 80006a0:	f003 f92a 	bl	80038f8 <HAL_UARTEx_SetRxFifoThreshold>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 80006a8:	f000 f8a2 	bl	80007f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006ac:	4b05      	ldr	r3, [pc, #20]	@ (80006c4 <MX_USART1_UART_Init+0x98>)
 80006ae:	0018      	movs	r0, r3
 80006b0:	f003 f8a8 	bl	8003804 <HAL_UARTEx_DisableFifoMode>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d001      	beq.n	80006bc <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 80006b8:	f000 f89a 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006bc:	46c0      	nop			@ (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	2000008c 	.word	0x2000008c
 80006c8:	40013800 	.word	0x40013800

080006cc <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_WWDG_Init+0x38>)
 80006d2:	4a0d      	ldr	r2, [pc, #52]	@ (8000708 <MX_WWDG_Init+0x3c>)
 80006d4:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <MX_WWDG_Init+0x38>)
 80006d8:	2200      	movs	r2, #0
 80006da:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_WWDG_Init+0x38>)
 80006de:	2240      	movs	r2, #64	@ 0x40
 80006e0:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 80006e2:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <MX_WWDG_Init+0x38>)
 80006e4:	2240      	movs	r2, #64	@ 0x40
 80006e6:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_WWDG_Init+0x38>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 80006ee:	4b05      	ldr	r3, [pc, #20]	@ (8000704 <MX_WWDG_Init+0x38>)
 80006f0:	0018      	movs	r0, r3
 80006f2:	f003 f9a1 	bl	8003a38 <HAL_WWDG_Init>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <MX_WWDG_Init+0x32>
  {
    Error_Handler();
 80006fa:	f000 f879 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 80006fe:	46c0      	nop			@ (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000120 	.word	0x20000120
 8000708:	40002c00 	.word	0x40002c00

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b089      	sub	sp, #36	@ 0x24
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	240c      	movs	r4, #12
 8000714:	193b      	adds	r3, r7, r4
 8000716:	0018      	movs	r0, r3
 8000718:	2314      	movs	r3, #20
 800071a:	001a      	movs	r2, r3
 800071c:	2100      	movs	r1, #0
 800071e:	f003 f9b0 	bl	8003a82 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	4b32      	ldr	r3, [pc, #200]	@ (80007ec <MX_GPIO_Init+0xe0>)
 8000724:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000726:	4b31      	ldr	r3, [pc, #196]	@ (80007ec <MX_GPIO_Init+0xe0>)
 8000728:	2102      	movs	r1, #2
 800072a:	430a      	orrs	r2, r1
 800072c:	635a      	str	r2, [r3, #52]	@ 0x34
 800072e:	4b2f      	ldr	r3, [pc, #188]	@ (80007ec <MX_GPIO_Init+0xe0>)
 8000730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000732:	2202      	movs	r2, #2
 8000734:	4013      	ands	r3, r2
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	4b2c      	ldr	r3, [pc, #176]	@ (80007ec <MX_GPIO_Init+0xe0>)
 800073c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800073e:	4b2b      	ldr	r3, [pc, #172]	@ (80007ec <MX_GPIO_Init+0xe0>)
 8000740:	2104      	movs	r1, #4
 8000742:	430a      	orrs	r2, r1
 8000744:	635a      	str	r2, [r3, #52]	@ 0x34
 8000746:	4b29      	ldr	r3, [pc, #164]	@ (80007ec <MX_GPIO_Init+0xe0>)
 8000748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800074a:	2204      	movs	r2, #4
 800074c:	4013      	ands	r3, r2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b26      	ldr	r3, [pc, #152]	@ (80007ec <MX_GPIO_Init+0xe0>)
 8000754:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000756:	4b25      	ldr	r3, [pc, #148]	@ (80007ec <MX_GPIO_Init+0xe0>)
 8000758:	2101      	movs	r1, #1
 800075a:	430a      	orrs	r2, r1
 800075c:	635a      	str	r2, [r3, #52]	@ 0x34
 800075e:	4b23      	ldr	r3, [pc, #140]	@ (80007ec <MX_GPIO_Init+0xe0>)
 8000760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000762:	2201      	movs	r2, #1
 8000764:	4013      	ands	r3, r2
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DCV_POS_B_Pin|DCV_POS_A_Pin, GPIO_PIN_RESET);
 800076a:	23a0      	movs	r3, #160	@ 0xa0
 800076c:	05db      	lsls	r3, r3, #23
 800076e:	2200      	movs	r2, #0
 8000770:	2160      	movs	r1, #96	@ 0x60
 8000772:	0018      	movs	r0, r3
 8000774:	f001 f91e 	bl	80019b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DCV_POS_B_Pin DCV_POS_A_Pin */
  GPIO_InitStruct.Pin = DCV_POS_B_Pin|DCV_POS_A_Pin;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	2260      	movs	r2, #96	@ 0x60
 800077c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	193b      	adds	r3, r7, r4
 8000780:	2201      	movs	r2, #1
 8000782:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	193b      	adds	r3, r7, r4
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	193b      	adds	r3, r7, r4
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	193a      	adds	r2, r7, r4
 8000792:	23a0      	movs	r3, #160	@ 0xa0
 8000794:	05db      	lsls	r3, r3, #23
 8000796:	0011      	movs	r1, r2
 8000798:	0018      	movs	r0, r3
 800079a:	f000 ffa1 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Oil_Low_Pin */
  GPIO_InitStruct.Pin = Oil_Low_Pin;
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	2280      	movs	r2, #128	@ 0x80
 80007a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	2200      	movs	r2, #0
 80007a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Oil_Low_GPIO_Port, &GPIO_InitStruct);
 80007b0:	193a      	adds	r2, r7, r4
 80007b2:	23a0      	movs	r3, #160	@ 0xa0
 80007b4:	05db      	lsls	r3, r3, #23
 80007b6:	0011      	movs	r1, r2
 80007b8:	0018      	movs	r0, r3
 80007ba:	f000 ff91 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Oil_High_Pin */
  GPIO_InitStruct.Pin = Oil_High_Pin;
 80007be:	0021      	movs	r1, r4
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2280      	movs	r2, #128	@ 0x80
 80007c4:	0052      	lsls	r2, r2, #1
 80007c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2200      	movs	r2, #0
 80007cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2202      	movs	r2, #2
 80007d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Oil_High_GPIO_Port, &GPIO_InitStruct);
 80007d4:	187a      	adds	r2, r7, r1
 80007d6:	23a0      	movs	r3, #160	@ 0xa0
 80007d8:	05db      	lsls	r3, r3, #23
 80007da:	0011      	movs	r1, r2
 80007dc:	0018      	movs	r0, r3
 80007de:	f000 ff7f 	bl	80016e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b009      	add	sp, #36	@ 0x24
 80007e8:	bd90      	pop	{r4, r7, pc}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	40021000 	.word	0x40021000

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	46c0      	nop			@ (mov r8, r8)
 80007fa:	e7fd      	b.n	80007f8 <Error_Handler+0x8>

080007fc <HAL_UART_RxCpltCallback>:

	return (crc_hi << 8 | crc_low);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	rx_int = 1;
 8000804:	4b03      	ldr	r3, [pc, #12]	@ (8000814 <HAL_UART_RxCpltCallback+0x18>)
 8000806:	2201      	movs	r2, #1
 8000808:	701a      	strb	r2, [r3, #0]
}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	b002      	add	sp, #8
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	200002b8 	.word	0x200002b8

08000818 <get_response_buffer>:
@see ModbusMaster::clearResponseBuffer()
@param u8Index index of response buffer array (0x00..0x3F)
@return value in position u8Index of response buffer (0x0000..0xFFFF)
*/
uint16_t get_response_buffer(uint8_t u8Index)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	0002      	movs	r2, r0
 8000820:	1dfb      	adds	r3, r7, #7
 8000822:	701a      	strb	r2, [r3, #0]
	if (u8Index < RX_BUFFER_SIZE)
 8000824:	1dfb      	adds	r3, r7, #7
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b41      	cmp	r3, #65	@ 0x41
 800082a:	d805      	bhi.n	8000838 <get_response_buffer+0x20>
	{
		// get the value in the uart recieve buffer
		return rx_buffer[u8Index];
 800082c:	1dfb      	adds	r3, r7, #7
 800082e:	781a      	ldrb	r2, [r3, #0]
 8000830:	4b04      	ldr	r3, [pc, #16]	@ (8000844 <get_response_buffer+0x2c>)
 8000832:	0052      	lsls	r2, r2, #1
 8000834:	5ad3      	ldrh	r3, [r2, r3]
 8000836:	e000      	b.n	800083a <get_response_buffer+0x22>
	}
	else
	{
		return 0xFFFF;
 8000838:	4b03      	ldr	r3, [pc, #12]	@ (8000848 <get_response_buffer+0x30>)
	}
}
 800083a:	0018      	movs	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	b002      	add	sp, #8
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			@ (mov r8, r8)
 8000844:	20000234 	.word	0x20000234
 8000848:	0000ffff 	.word	0x0000ffff

0800084c <modbus_setup_rx>:
		return HAL_TIMEOUT;
	}
}

int8_t modbus_setup_rx(uint8_t size)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	0002      	movs	r2, r0
 8000854:	1dfb      	adds	r3, r7, #7
 8000856:	701a      	strb	r2, [r3, #0]
	return HAL_UART_Receive_IT(&huart1, modbus_rx_buffer, size);
 8000858:	1dfb      	adds	r3, r7, #7
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	b29a      	uxth	r2, r3
 800085e:	4905      	ldr	r1, [pc, #20]	@ (8000874 <modbus_setup_rx+0x28>)
 8000860:	4b05      	ldr	r3, [pc, #20]	@ (8000878 <modbus_setup_rx+0x2c>)
 8000862:	0018      	movs	r0, r3
 8000864:	f001 fd24 	bl	80022b0 <HAL_UART_Receive_IT>
 8000868:	0003      	movs	r3, r0
 800086a:	b25b      	sxtb	r3, r3
}
 800086c:	0018      	movs	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	b002      	add	sp, #8
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000134 	.word	0x20000134
 8000878:	2000008c 	.word	0x2000008c

0800087c <modbus_rx>:

uint8_t modbus_rx()
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	if(rx_int)
 8000880:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <modbus_rx+0x24>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d004      	beq.n	8000894 <modbus_rx+0x18>
	{
		rx_int = 0;
 800088a:	4b05      	ldr	r3, [pc, #20]	@ (80008a0 <modbus_rx+0x24>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
		return 1;
 8000890:	2301      	movs	r3, #1
 8000892:	e002      	b.n	800089a <modbus_rx+0x1e>
	}
	return rx_int;
 8000894:	4b02      	ldr	r3, [pc, #8]	@ (80008a0 <modbus_rx+0x24>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b2db      	uxtb	r3, r3
}
 800089a:	0018      	movs	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200002b8 	.word	0x200002b8

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <HAL_MspInit+0x44>)
 80008ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <HAL_MspInit+0x44>)
 80008b0:	2101      	movs	r1, #1
 80008b2:	430a      	orrs	r2, r1
 80008b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80008b6:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <HAL_MspInit+0x44>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ba:	2201      	movs	r2, #1
 80008bc:	4013      	ands	r3, r2
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <HAL_MspInit+0x44>)
 80008c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008c6:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <HAL_MspInit+0x44>)
 80008c8:	2180      	movs	r1, #128	@ 0x80
 80008ca:	0549      	lsls	r1, r1, #21
 80008cc:	430a      	orrs	r2, r1
 80008ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008d0:	4b05      	ldr	r3, [pc, #20]	@ (80008e8 <HAL_MspInit+0x44>)
 80008d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008d4:	2380      	movs	r3, #128	@ 0x80
 80008d6:	055b      	lsls	r3, r3, #21
 80008d8:	4013      	ands	r3, r2
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	46c0      	nop			@ (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b002      	add	sp, #8
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			@ (mov r8, r8)
 80008e8:	40021000 	.word	0x40021000

080008ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b091      	sub	sp, #68	@ 0x44
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	232c      	movs	r3, #44	@ 0x2c
 80008f6:	18fb      	adds	r3, r7, r3
 80008f8:	0018      	movs	r0, r3
 80008fa:	2314      	movs	r3, #20
 80008fc:	001a      	movs	r2, r3
 80008fe:	2100      	movs	r1, #0
 8000900:	f003 f8bf 	bl	8003a82 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000904:	2410      	movs	r4, #16
 8000906:	193b      	adds	r3, r7, r4
 8000908:	0018      	movs	r0, r3
 800090a:	231c      	movs	r3, #28
 800090c:	001a      	movs	r2, r3
 800090e:	2100      	movs	r1, #0
 8000910:	f003 f8b7 	bl	8003a82 <memset>
  if(hadc->Instance==ADC1)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a1f      	ldr	r2, [pc, #124]	@ (8000998 <HAL_ADC_MspInit+0xac>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d138      	bne.n	8000990 <HAL_ADC_MspInit+0xa4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800091e:	193b      	adds	r3, r7, r4
 8000920:	2220      	movs	r2, #32
 8000922:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000924:	193b      	adds	r3, r7, r4
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800092a:	193b      	adds	r3, r7, r4
 800092c:	0018      	movs	r0, r3
 800092e:	f001 fbd3 	bl	80020d8 <HAL_RCCEx_PeriphCLKConfig>
 8000932:	1e03      	subs	r3, r0, #0
 8000934:	d001      	beq.n	800093a <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 8000936:	f7ff ff5b 	bl	80007f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800093a:	4b18      	ldr	r3, [pc, #96]	@ (800099c <HAL_ADC_MspInit+0xb0>)
 800093c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800093e:	4b17      	ldr	r3, [pc, #92]	@ (800099c <HAL_ADC_MspInit+0xb0>)
 8000940:	2180      	movs	r1, #128	@ 0x80
 8000942:	0349      	lsls	r1, r1, #13
 8000944:	430a      	orrs	r2, r1
 8000946:	641a      	str	r2, [r3, #64]	@ 0x40
 8000948:	4b14      	ldr	r3, [pc, #80]	@ (800099c <HAL_ADC_MspInit+0xb0>)
 800094a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800094c:	2380      	movs	r3, #128	@ 0x80
 800094e:	035b      	lsls	r3, r3, #13
 8000950:	4013      	ands	r3, r2
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <HAL_ADC_MspInit+0xb0>)
 8000958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800095a:	4b10      	ldr	r3, [pc, #64]	@ (800099c <HAL_ADC_MspInit+0xb0>)
 800095c:	2101      	movs	r1, #1
 800095e:	430a      	orrs	r2, r1
 8000960:	635a      	str	r2, [r3, #52]	@ 0x34
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <HAL_ADC_MspInit+0xb0>)
 8000964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000966:	2201      	movs	r2, #1
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Oil_Pressure_Pin|Water_Pressure_Pin|Water_Flow_Pin|Jack_Excursion_Pin
 800096e:	212c      	movs	r1, #44	@ 0x2c
 8000970:	187b      	adds	r3, r7, r1
 8000972:	221f      	movs	r2, #31
 8000974:	601a      	str	r2, [r3, #0]
                          |Oil_Temp_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2203      	movs	r2, #3
 800097a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	187a      	adds	r2, r7, r1
 8000984:	23a0      	movs	r3, #160	@ 0xa0
 8000986:	05db      	lsls	r3, r3, #23
 8000988:	0011      	movs	r1, r2
 800098a:	0018      	movs	r0, r3
 800098c:	f000 fea8 	bl	80016e0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000990:	46c0      	nop			@ (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	b011      	add	sp, #68	@ 0x44
 8000996:	bd90      	pop	{r4, r7, pc}
 8000998:	40012400 	.word	0x40012400
 800099c:	40021000 	.word	0x40021000

080009a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b093      	sub	sp, #76	@ 0x4c
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	2334      	movs	r3, #52	@ 0x34
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	0018      	movs	r0, r3
 80009ae:	2314      	movs	r3, #20
 80009b0:	001a      	movs	r2, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	f003 f865 	bl	8003a82 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b8:	2418      	movs	r4, #24
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	0018      	movs	r0, r3
 80009be:	231c      	movs	r3, #28
 80009c0:	001a      	movs	r2, r3
 80009c2:	2100      	movs	r1, #0
 80009c4:	f003 f85d 	bl	8003a82 <memset>
  if(huart->Instance==USART1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a34      	ldr	r2, [pc, #208]	@ (8000aa0 <HAL_UART_MspInit+0x100>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d161      	bne.n	8000a96 <HAL_UART_MspInit+0xf6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	2201      	movs	r2, #1
 80009d6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009de:	193b      	adds	r3, r7, r4
 80009e0:	0018      	movs	r0, r3
 80009e2:	f001 fb79 	bl	80020d8 <HAL_RCCEx_PeriphCLKConfig>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d001      	beq.n	80009ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009ea:	f7ff ff01 	bl	80007f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ee:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa4 <HAL_UART_MspInit+0x104>)
 80009f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009f2:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa4 <HAL_UART_MspInit+0x104>)
 80009f4:	2180      	movs	r1, #128	@ 0x80
 80009f6:	01c9      	lsls	r1, r1, #7
 80009f8:	430a      	orrs	r2, r1
 80009fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80009fc:	4b29      	ldr	r3, [pc, #164]	@ (8000aa4 <HAL_UART_MspInit+0x104>)
 80009fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a00:	2380      	movs	r3, #128	@ 0x80
 8000a02:	01db      	lsls	r3, r3, #7
 8000a04:	4013      	ands	r3, r2
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b26      	ldr	r3, [pc, #152]	@ (8000aa4 <HAL_UART_MspInit+0x104>)
 8000a0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a0e:	4b25      	ldr	r3, [pc, #148]	@ (8000aa4 <HAL_UART_MspInit+0x104>)
 8000a10:	2102      	movs	r1, #2
 8000a12:	430a      	orrs	r2, r1
 8000a14:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a16:	4b23      	ldr	r3, [pc, #140]	@ (8000aa4 <HAL_UART_MspInit+0x104>)
 8000a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b20      	ldr	r3, [pc, #128]	@ (8000aa4 <HAL_UART_MspInit+0x104>)
 8000a24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a26:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <HAL_UART_MspInit+0x104>)
 8000a28:	2101      	movs	r1, #1
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa4 <HAL_UART_MspInit+0x104>)
 8000a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a32:	2201      	movs	r2, #1
 8000a34:	4013      	ands	r3, r2
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000a3a:	2434      	movs	r4, #52	@ 0x34
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	22c0      	movs	r2, #192	@ 0xc0
 8000a40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	2202      	movs	r2, #2
 8000a46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	4a12      	ldr	r2, [pc, #72]	@ (8000aa8 <HAL_UART_MspInit+0x108>)
 8000a5e:	0019      	movs	r1, r3
 8000a60:	0010      	movs	r0, r2
 8000a62:	f000 fe3d 	bl	80016e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a66:	0021      	movs	r1, r4
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2280      	movs	r2, #128	@ 0x80
 8000a6c:	0152      	lsls	r2, r2, #5
 8000a6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2202      	movs	r2, #2
 8000a74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2201      	movs	r2, #1
 8000a86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	187a      	adds	r2, r7, r1
 8000a8a:	23a0      	movs	r3, #160	@ 0xa0
 8000a8c:	05db      	lsls	r3, r3, #23
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f000 fe25 	bl	80016e0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b013      	add	sp, #76	@ 0x4c
 8000a9c:	bd90      	pop	{r4, r7, pc}
 8000a9e:	46c0      	nop			@ (mov r8, r8)
 8000aa0:	40013800 	.word	0x40013800
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	50000400 	.word	0x50000400

08000aac <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <HAL_WWDG_MspInit+0x38>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d10d      	bne.n	8000ada <HAL_WWDG_MspInit+0x2e>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8000abe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae8 <HAL_WWDG_MspInit+0x3c>)
 8000ac0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ac2:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <HAL_WWDG_MspInit+0x3c>)
 8000ac4:	2180      	movs	r1, #128	@ 0x80
 8000ac6:	0109      	lsls	r1, r1, #4
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <HAL_WWDG_MspInit+0x3c>)
 8000ace:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ad0:	2380      	movs	r3, #128	@ 0x80
 8000ad2:	011b      	lsls	r3, r3, #4
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END WWDG_MspInit 1 */

  }

}
 8000ada:	46c0      	nop			@ (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b004      	add	sp, #16
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	40002c00 	.word	0x40002c00
 8000ae8:	40021000 	.word	0x40021000

08000aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af0:	46c0      	nop			@ (mov r8, r8)
 8000af2:	e7fd      	b.n	8000af0 <NMI_Handler+0x4>

08000af4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af8:	46c0      	nop			@ (mov r8, r8)
 8000afa:	e7fd      	b.n	8000af8 <HardFault_Handler+0x4>

08000afc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b00:	46c0      	nop			@ (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b14:	f000 f89a 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b18:	46c0      	nop			@ (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b24:	4b03      	ldr	r3, [pc, #12]	@ (8000b34 <SystemInit+0x14>)
 8000b26:	2280      	movs	r2, #128	@ 0x80
 8000b28:	0512      	lsls	r2, r2, #20
 8000b2a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b2c:	46c0      	nop			@ (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b38:	480d      	ldr	r0, [pc, #52]	@ (8000b70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b3a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b3c:	f7ff fff0 	bl	8000b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b40:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b42:	e003      	b.n	8000b4c <LoopCopyDataInit>

08000b44 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b44:	4b0b      	ldr	r3, [pc, #44]	@ (8000b74 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000b46:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b48:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b4a:	3104      	adds	r1, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b4c:	480a      	ldr	r0, [pc, #40]	@ (8000b78 <LoopForever+0xa>)
  ldr r3, =_edata
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b7c <LoopForever+0xe>)
  adds r2, r0, r1
 8000b50:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b52:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b54:	d3f6      	bcc.n	8000b44 <CopyDataInit>
  ldr r2, =_sbss
 8000b56:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <LoopForever+0x12>)
  b LoopFillZerobss
 8000b58:	e002      	b.n	8000b60 <LoopFillZerobss>

08000b5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  str  r3, [r2]
 8000b5c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5e:	3204      	adds	r2, #4

08000b60 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000b60:	4b08      	ldr	r3, [pc, #32]	@ (8000b84 <LoopForever+0x16>)
  cmp r2, r3
 8000b62:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b64:	d3f9      	bcc.n	8000b5a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000b66:	f002 ff95 	bl	8003a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b6a:	f7ff fc43 	bl	80003f4 <main>

08000b6e <LoopForever>:

LoopForever:
    b LoopForever
 8000b6e:	e7fe      	b.n	8000b6e <LoopForever>
  ldr   r0, =_estack
 8000b70:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000b74:	08003b84 	.word	0x08003b84
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000b80:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000b84:	200002c0 	.word	0x200002c0

08000b88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC1_IRQHandler>

08000b8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b90:	1dfb      	adds	r3, r7, #7
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b96:	2003      	movs	r0, #3
 8000b98:	f000 f80e 	bl	8000bb8 <HAL_InitTick>
 8000b9c:	1e03      	subs	r3, r0, #0
 8000b9e:	d003      	beq.n	8000ba8 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000ba0:	1dfb      	adds	r3, r7, #7
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
 8000ba6:	e001      	b.n	8000bac <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ba8:	f7ff fe7c 	bl	80008a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	781b      	ldrb	r3, [r3, #0]
}
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c40 <HAL_InitTick+0x88>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d02b      	beq.n	8000c28 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <HAL_InitTick+0x8c>)
 8000bd2:	681c      	ldr	r4, [r3, #0]
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c40 <HAL_InitTick+0x88>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	0019      	movs	r1, r3
 8000bda:	23fa      	movs	r3, #250	@ 0xfa
 8000bdc:	0098      	lsls	r0, r3, #2
 8000bde:	f7ff fa93 	bl	8000108 <__udivsi3>
 8000be2:	0003      	movs	r3, r0
 8000be4:	0019      	movs	r1, r3
 8000be6:	0020      	movs	r0, r4
 8000be8:	f7ff fa8e 	bl	8000108 <__udivsi3>
 8000bec:	0003      	movs	r3, r0
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f000 fd69 	bl	80016c6 <HAL_SYSTICK_Config>
 8000bf4:	1e03      	subs	r3, r0, #0
 8000bf6:	d112      	bne.n	8000c1e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d80a      	bhi.n	8000c14 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	2301      	movs	r3, #1
 8000c02:	425b      	negs	r3, r3
 8000c04:	2200      	movs	r2, #0
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 fd48 	bl	800169c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <HAL_InitTick+0x90>)
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	e00d      	b.n	8000c30 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c14:	230f      	movs	r3, #15
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
 8000c1c:	e008      	b.n	8000c30 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c1e:	230f      	movs	r3, #15
 8000c20:	18fb      	adds	r3, r7, r3
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	e003      	b.n	8000c30 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c28:	230f      	movs	r3, #15
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c30:	230f      	movs	r3, #15
 8000c32:	18fb      	adds	r3, r7, r3
 8000c34:	781b      	ldrb	r3, [r3, #0]
}
 8000c36:	0018      	movs	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b005      	add	sp, #20
 8000c3c:	bd90      	pop	{r4, r7, pc}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000004 	.word	0x20000004

08000c4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c50:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <HAL_IncTick+0x1c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	001a      	movs	r2, r3
 8000c56:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <HAL_IncTick+0x20>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	18d2      	adds	r2, r2, r3
 8000c5c:	4b03      	ldr	r3, [pc, #12]	@ (8000c6c <HAL_IncTick+0x20>)
 8000c5e:	601a      	str	r2, [r3, #0]
}
 8000c60:	46c0      	nop			@ (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	200002bc 	.word	0x200002bc

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b02      	ldr	r3, [pc, #8]	@ (8000c80 <HAL_GetTick+0x10>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	0018      	movs	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	200002bc 	.word	0x200002bc

08000c84 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a05      	ldr	r2, [pc, #20]	@ (8000ca8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000c94:	401a      	ands	r2, r3
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	601a      	str	r2, [r3, #0]
}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b002      	add	sp, #8
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	ff3fffff 	.word	0xff3fffff

08000cac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	23c0      	movs	r3, #192	@ 0xc0
 8000cba:	041b      	lsls	r3, r3, #16
 8000cbc:	4013      	ands	r3, r2
}
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b002      	add	sp, #8
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b084      	sub	sp, #16
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	60f8      	str	r0, [r7, #12]
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	2104      	movs	r1, #4
 8000cda:	400a      	ands	r2, r1
 8000cdc:	2107      	movs	r1, #7
 8000cde:	4091      	lsls	r1, r2
 8000ce0:	000a      	movs	r2, r1
 8000ce2:	43d2      	mvns	r2, r2
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	2104      	movs	r1, #4
 8000cea:	400b      	ands	r3, r1
 8000cec:	6879      	ldr	r1, [r7, #4]
 8000cee:	4099      	lsls	r1, r3
 8000cf0:	000b      	movs	r3, r1
 8000cf2:	431a      	orrs	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000cf8:	46c0      	nop			@ (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b004      	add	sp, #16
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	683a      	ldr	r2, [r7, #0]
 8000d10:	2104      	movs	r1, #4
 8000d12:	400a      	ands	r2, r1
 8000d14:	2107      	movs	r1, #7
 8000d16:	4091      	lsls	r1, r2
 8000d18:	000a      	movs	r2, r1
 8000d1a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	2104      	movs	r1, #4
 8000d20:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d22:	40da      	lsrs	r2, r3
 8000d24:	0013      	movs	r3, r2
}
 8000d26:	0018      	movs	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b002      	add	sp, #8
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b084      	sub	sp, #16
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60f8      	str	r0, [r7, #12]
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	211f      	movs	r1, #31
 8000d42:	400a      	ands	r2, r1
 8000d44:	210f      	movs	r1, #15
 8000d46:	4091      	lsls	r1, r2
 8000d48:	000a      	movs	r2, r1
 8000d4a:	43d2      	mvns	r2, r2
 8000d4c:	401a      	ands	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	0e9b      	lsrs	r3, r3, #26
 8000d52:	210f      	movs	r1, #15
 8000d54:	4019      	ands	r1, r3
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	201f      	movs	r0, #31
 8000d5a:	4003      	ands	r3, r0
 8000d5c:	4099      	lsls	r1, r3
 8000d5e:	000b      	movs	r3, r1
 8000d60:	431a      	orrs	r2, r3
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b004      	add	sp, #16
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	025b      	lsls	r3, r3, #9
 8000d80:	0a5b      	lsrs	r3, r3, #9
 8000d82:	431a      	orrs	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d88:	46c0      	nop			@ (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	b002      	add	sp, #8
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d9e:	683a      	ldr	r2, [r7, #0]
 8000da0:	0252      	lsls	r2, r2, #9
 8000da2:	0a52      	lsrs	r2, r2, #9
 8000da4:	43d2      	mvns	r2, r2
 8000da6:	401a      	ands	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000dac:	46c0      	nop			@ (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	b002      	add	sp, #8
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	68ba      	ldr	r2, [r7, #8]
 8000dc6:	0212      	lsls	r2, r2, #8
 8000dc8:	43d2      	mvns	r2, r2
 8000dca:	401a      	ands	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	021b      	lsls	r3, r3, #8
 8000dd0:	6879      	ldr	r1, [r7, #4]
 8000dd2:	400b      	ands	r3, r1
 8000dd4:	4904      	ldr	r1, [pc, #16]	@ (8000de8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000dd6:	400b      	ands	r3, r1
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000dde:	46c0      	nop			@ (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b004      	add	sp, #16
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	7fffff00 	.word	0x7fffff00

08000dec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	4a05      	ldr	r2, [pc, #20]	@ (8000e10 <LL_ADC_EnableInternalRegulator+0x24>)
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	2280      	movs	r2, #128	@ 0x80
 8000dfe:	0552      	lsls	r2, r2, #21
 8000e00:	431a      	orrs	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e06:	46c0      	nop			@ (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b002      	add	sp, #8
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			@ (mov r8, r8)
 8000e10:	6fffffe8 	.word	0x6fffffe8

08000e14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	2380      	movs	r3, #128	@ 0x80
 8000e22:	055b      	lsls	r3, r3, #21
 8000e24:	401a      	ands	r2, r3
 8000e26:	2380      	movs	r3, #128	@ 0x80
 8000e28:	055b      	lsls	r3, r3, #21
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d101      	bne.n	8000e32 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e000      	b.n	8000e34 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	0018      	movs	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b002      	add	sp, #8
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d101      	bne.n	8000e54 <LL_ADC_IsEnabled+0x18>
 8000e50:	2301      	movs	r3, #1
 8000e52:	e000      	b.n	8000e56 <LL_ADC_IsEnabled+0x1a>
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	0018      	movs	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b002      	add	sp, #8
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	2204      	movs	r2, #4
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	d101      	bne.n	8000e76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000e72:	2301      	movs	r3, #1
 8000e74:	e000      	b.n	8000e78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b002      	add	sp, #8
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e88:	231f      	movs	r3, #31
 8000e8a:	18fb      	adds	r3, r7, r3
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e17e      	b.n	80011a4 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d10a      	bne.n	8000ec4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f7ff fd1b 	bl	80008ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2254      	movs	r2, #84	@ 0x54
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f7ff ffa3 	bl	8000e14 <LL_ADC_IsInternalRegulatorEnabled>
 8000ece:	1e03      	subs	r3, r0, #0
 8000ed0:	d114      	bne.n	8000efc <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f7ff ff88 	bl	8000dec <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000edc:	4bb3      	ldr	r3, [pc, #716]	@ (80011ac <HAL_ADC_Init+0x32c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	49b3      	ldr	r1, [pc, #716]	@ (80011b0 <HAL_ADC_Init+0x330>)
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f7ff f910 	bl	8000108 <__udivsi3>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000eee:	e002      	b.n	8000ef6 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1f9      	bne.n	8000ef0 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	0018      	movs	r0, r3
 8000f02:	f7ff ff87 	bl	8000e14 <LL_ADC_IsInternalRegulatorEnabled>
 8000f06:	1e03      	subs	r3, r0, #0
 8000f08:	d10f      	bne.n	8000f2a <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f0e:	2210      	movs	r2, #16
 8000f10:	431a      	orrs	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000f22:	231f      	movs	r3, #31
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f7ff ff95 	bl	8000e5e <LL_ADC_REG_IsConversionOngoing>
 8000f34:	0003      	movs	r3, r0
 8000f36:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3c:	2210      	movs	r2, #16
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d000      	beq.n	8000f44 <HAL_ADC_Init+0xc4>
 8000f42:	e122      	b.n	800118a <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d000      	beq.n	8000f4c <HAL_ADC_Init+0xcc>
 8000f4a:	e11e      	b.n	800118a <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f50:	4a98      	ldr	r2, [pc, #608]	@ (80011b4 <HAL_ADC_Init+0x334>)
 8000f52:	4013      	ands	r3, r2
 8000f54:	2202      	movs	r2, #2
 8000f56:	431a      	orrs	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	0018      	movs	r0, r3
 8000f62:	f7ff ff6b 	bl	8000e3c <LL_ADC_IsEnabled>
 8000f66:	1e03      	subs	r3, r0, #0
 8000f68:	d000      	beq.n	8000f6c <HAL_ADC_Init+0xec>
 8000f6a:	e0ad      	b.n	80010c8 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	7e1b      	ldrb	r3, [r3, #24]
 8000f74:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000f76:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7e5b      	ldrb	r3, [r3, #25]
 8000f7c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f7e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	7e9b      	ldrb	r3, [r3, #26]
 8000f84:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f86:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <HAL_ADC_Init+0x116>
 8000f90:	2380      	movs	r3, #128	@ 0x80
 8000f92:	015b      	lsls	r3, r3, #5
 8000f94:	e000      	b.n	8000f98 <HAL_ADC_Init+0x118>
 8000f96:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000f98:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000f9e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	da04      	bge.n	8000fb2 <HAL_ADC_Init+0x132>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	085b      	lsrs	r3, r3, #1
 8000fb0:	e001      	b.n	8000fb6 <HAL_ADC_Init+0x136>
 8000fb2:	2380      	movs	r3, #128	@ 0x80
 8000fb4:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000fb6:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	212c      	movs	r1, #44	@ 0x2c
 8000fbc:	5c5b      	ldrb	r3, [r3, r1]
 8000fbe:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000fc0:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2220      	movs	r2, #32
 8000fcc:	5c9b      	ldrb	r3, [r3, r2]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d115      	bne.n	8000ffe <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	7e9b      	ldrb	r3, [r3, #26]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d105      	bne.n	8000fe6 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	2280      	movs	r2, #128	@ 0x80
 8000fde:	0252      	lsls	r2, r2, #9
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
 8000fe4:	e00b      	b.n	8000ffe <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fea:	2220      	movs	r2, #32
 8000fec:	431a      	orrs	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001002:	2b00      	cmp	r3, #0
 8001004:	d00a      	beq.n	800101c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800100a:	23e0      	movs	r3, #224	@ 0xe0
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001014:	4313      	orrs	r3, r2
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	4a65      	ldr	r2, [pc, #404]	@ (80011b8 <HAL_ADC_Init+0x338>)
 8001024:	4013      	ands	r3, r2
 8001026:	0019      	movs	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	430a      	orrs	r2, r1
 8001030:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	0f9b      	lsrs	r3, r3, #30
 8001038:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800103e:	4313      	orrs	r3, r2
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	4313      	orrs	r3, r2
 8001044:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	223c      	movs	r2, #60	@ 0x3c
 800104a:	5c9b      	ldrb	r3, [r3, r2]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d111      	bne.n	8001074 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	0f9b      	lsrs	r3, r3, #30
 8001056:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800105c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001062:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001068:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	4313      	orrs	r3, r2
 800106e:	2201      	movs	r2, #1
 8001070:	4313      	orrs	r3, r2
 8001072:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	4a50      	ldr	r2, [pc, #320]	@ (80011bc <HAL_ADC_Init+0x33c>)
 800107c:	4013      	ands	r3, r2
 800107e:	0019      	movs	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	430a      	orrs	r2, r1
 8001088:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	23c0      	movs	r3, #192	@ 0xc0
 8001090:	061b      	lsls	r3, r3, #24
 8001092:	429a      	cmp	r2, r3
 8001094:	d018      	beq.n	80010c8 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800109a:	2380      	movs	r3, #128	@ 0x80
 800109c:	05db      	lsls	r3, r3, #23
 800109e:	429a      	cmp	r2, r3
 80010a0:	d012      	beq.n	80010c8 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80010a6:	2380      	movs	r3, #128	@ 0x80
 80010a8:	061b      	lsls	r3, r3, #24
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d00c      	beq.n	80010c8 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80010ae:	4b44      	ldr	r3, [pc, #272]	@ (80011c0 <HAL_ADC_Init+0x340>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a44      	ldr	r2, [pc, #272]	@ (80011c4 <HAL_ADC_Init+0x344>)
 80010b4:	4013      	ands	r3, r2
 80010b6:	0019      	movs	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	23f0      	movs	r3, #240	@ 0xf0
 80010be:	039b      	lsls	r3, r3, #14
 80010c0:	401a      	ands	r2, r3
 80010c2:	4b3f      	ldr	r3, [pc, #252]	@ (80011c0 <HAL_ADC_Init+0x340>)
 80010c4:	430a      	orrs	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010d0:	001a      	movs	r2, r3
 80010d2:	2100      	movs	r1, #0
 80010d4:	f7ff fdf7 	bl	8000cc6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010e0:	4939      	ldr	r1, [pc, #228]	@ (80011c8 <HAL_ADC_Init+0x348>)
 80010e2:	001a      	movs	r2, r3
 80010e4:	f7ff fdef 	bl	8000cc6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d109      	bne.n	8001104 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2110      	movs	r1, #16
 80010fc:	4249      	negs	r1, r1
 80010fe:	430a      	orrs	r2, r1
 8001100:	629a      	str	r2, [r3, #40]	@ 0x28
 8001102:	e018      	b.n	8001136 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	691a      	ldr	r2, [r3, #16]
 8001108:	2380      	movs	r3, #128	@ 0x80
 800110a:	039b      	lsls	r3, r3, #14
 800110c:	429a      	cmp	r2, r3
 800110e:	d112      	bne.n	8001136 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	3b01      	subs	r3, #1
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	221c      	movs	r2, #28
 8001120:	4013      	ands	r3, r2
 8001122:	2210      	movs	r2, #16
 8001124:	4252      	negs	r2, r2
 8001126:	409a      	lsls	r2, r3
 8001128:	0011      	movs	r1, r2
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	430a      	orrs	r2, r1
 8001134:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2100      	movs	r1, #0
 800113c:	0018      	movs	r0, r3
 800113e:	f7ff fddf 	bl	8000d00 <LL_ADC_GetSamplingTimeCommonChannels>
 8001142:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001148:	429a      	cmp	r2, r3
 800114a:	d10b      	bne.n	8001164 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001156:	2203      	movs	r2, #3
 8001158:	4393      	bics	r3, r2
 800115a:	2201      	movs	r2, #1
 800115c:	431a      	orrs	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001162:	e01c      	b.n	800119e <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001168:	2212      	movs	r2, #18
 800116a:	4393      	bics	r3, r2
 800116c:	2210      	movs	r2, #16
 800116e:	431a      	orrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001178:	2201      	movs	r2, #1
 800117a:	431a      	orrs	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001180:	231f      	movs	r3, #31
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001188:	e009      	b.n	800119e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800118e:	2210      	movs	r2, #16
 8001190:	431a      	orrs	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001196:	231f      	movs	r3, #31
 8001198:	18fb      	adds	r3, r7, r3
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800119e:	231f      	movs	r3, #31
 80011a0:	18fb      	adds	r3, r7, r3
 80011a2:	781b      	ldrb	r3, [r3, #0]
}
 80011a4:	0018      	movs	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b008      	add	sp, #32
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000000 	.word	0x20000000
 80011b0:	00030d40 	.word	0x00030d40
 80011b4:	fffffefd 	.word	0xfffffefd
 80011b8:	ffde0201 	.word	0xffde0201
 80011bc:	1ffffc02 	.word	0x1ffffc02
 80011c0:	40012708 	.word	0x40012708
 80011c4:	ffc3ffff 	.word	0xffc3ffff
 80011c8:	7fffff04 	.word	0x7fffff04

080011cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d6:	2317      	movs	r3, #23
 80011d8:	18fb      	adds	r3, r7, r3
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2254      	movs	r2, #84	@ 0x54
 80011e6:	5c9b      	ldrb	r3, [r3, r2]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d101      	bne.n	80011f0 <HAL_ADC_ConfigChannel+0x24>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e1be      	b.n	800156e <HAL_ADC_ConfigChannel+0x3a2>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2254      	movs	r2, #84	@ 0x54
 80011f4:	2101      	movs	r1, #1
 80011f6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	0018      	movs	r0, r3
 80011fe:	f7ff fe2e 	bl	8000e5e <LL_ADC_REG_IsConversionOngoing>
 8001202:	1e03      	subs	r3, r0, #0
 8001204:	d000      	beq.n	8001208 <HAL_ADC_ConfigChannel+0x3c>
 8001206:	e1a1      	b.n	800154c <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b02      	cmp	r3, #2
 800120e:	d100      	bne.n	8001212 <HAL_ADC_ConfigChannel+0x46>
 8001210:	e152      	b.n	80014b8 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	691a      	ldr	r2, [r3, #16]
 8001216:	2380      	movs	r3, #128	@ 0x80
 8001218:	061b      	lsls	r3, r3, #24
 800121a:	429a      	cmp	r2, r3
 800121c:	d004      	beq.n	8001228 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001222:	4ac2      	ldr	r2, [pc, #776]	@ (800152c <HAL_ADC_ConfigChannel+0x360>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d108      	bne.n	800123a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	0019      	movs	r1, r3
 8001232:	0010      	movs	r0, r2
 8001234:	f7ff fd9b 	bl	8000d6e <LL_ADC_REG_SetSequencerChAdd>
 8001238:	e0ed      	b.n	8001416 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	211f      	movs	r1, #31
 8001244:	400b      	ands	r3, r1
 8001246:	210f      	movs	r1, #15
 8001248:	4099      	lsls	r1, r3
 800124a:	000b      	movs	r3, r1
 800124c:	43db      	mvns	r3, r3
 800124e:	4013      	ands	r3, r2
 8001250:	0019      	movs	r1, r3
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	025b      	lsls	r3, r3, #9
 8001258:	0a5b      	lsrs	r3, r3, #9
 800125a:	d105      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x9c>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	0e9b      	lsrs	r3, r3, #26
 8001262:	221f      	movs	r2, #31
 8001264:	4013      	ands	r3, r2
 8001266:	e0bc      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x216>
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2201      	movs	r2, #1
 800126e:	4013      	ands	r3, r2
 8001270:	d000      	beq.n	8001274 <HAL_ADC_ConfigChannel+0xa8>
 8001272:	e0b5      	b.n	80013e0 <HAL_ADC_ConfigChannel+0x214>
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2202      	movs	r2, #2
 800127a:	4013      	ands	r3, r2
 800127c:	d000      	beq.n	8001280 <HAL_ADC_ConfigChannel+0xb4>
 800127e:	e0ad      	b.n	80013dc <HAL_ADC_ConfigChannel+0x210>
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2204      	movs	r2, #4
 8001286:	4013      	ands	r3, r2
 8001288:	d000      	beq.n	800128c <HAL_ADC_ConfigChannel+0xc0>
 800128a:	e0a5      	b.n	80013d8 <HAL_ADC_ConfigChannel+0x20c>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2208      	movs	r2, #8
 8001292:	4013      	ands	r3, r2
 8001294:	d000      	beq.n	8001298 <HAL_ADC_ConfigChannel+0xcc>
 8001296:	e09d      	b.n	80013d4 <HAL_ADC_ConfigChannel+0x208>
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2210      	movs	r2, #16
 800129e:	4013      	ands	r3, r2
 80012a0:	d000      	beq.n	80012a4 <HAL_ADC_ConfigChannel+0xd8>
 80012a2:	e095      	b.n	80013d0 <HAL_ADC_ConfigChannel+0x204>
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2220      	movs	r2, #32
 80012aa:	4013      	ands	r3, r2
 80012ac:	d000      	beq.n	80012b0 <HAL_ADC_ConfigChannel+0xe4>
 80012ae:	e08d      	b.n	80013cc <HAL_ADC_ConfigChannel+0x200>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2240      	movs	r2, #64	@ 0x40
 80012b6:	4013      	ands	r3, r2
 80012b8:	d000      	beq.n	80012bc <HAL_ADC_ConfigChannel+0xf0>
 80012ba:	e085      	b.n	80013c8 <HAL_ADC_ConfigChannel+0x1fc>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2280      	movs	r2, #128	@ 0x80
 80012c2:	4013      	ands	r3, r2
 80012c4:	d000      	beq.n	80012c8 <HAL_ADC_ConfigChannel+0xfc>
 80012c6:	e07d      	b.n	80013c4 <HAL_ADC_ConfigChannel+0x1f8>
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	2380      	movs	r3, #128	@ 0x80
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4013      	ands	r3, r2
 80012d2:	d000      	beq.n	80012d6 <HAL_ADC_ConfigChannel+0x10a>
 80012d4:	e074      	b.n	80013c0 <HAL_ADC_ConfigChannel+0x1f4>
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	2380      	movs	r3, #128	@ 0x80
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4013      	ands	r3, r2
 80012e0:	d000      	beq.n	80012e4 <HAL_ADC_ConfigChannel+0x118>
 80012e2:	e06b      	b.n	80013bc <HAL_ADC_ConfigChannel+0x1f0>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	2380      	movs	r3, #128	@ 0x80
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	4013      	ands	r3, r2
 80012ee:	d000      	beq.n	80012f2 <HAL_ADC_ConfigChannel+0x126>
 80012f0:	e062      	b.n	80013b8 <HAL_ADC_ConfigChannel+0x1ec>
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	2380      	movs	r3, #128	@ 0x80
 80012f8:	011b      	lsls	r3, r3, #4
 80012fa:	4013      	ands	r3, r2
 80012fc:	d000      	beq.n	8001300 <HAL_ADC_ConfigChannel+0x134>
 80012fe:	e059      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x1e8>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	2380      	movs	r3, #128	@ 0x80
 8001306:	015b      	lsls	r3, r3, #5
 8001308:	4013      	ands	r3, r2
 800130a:	d151      	bne.n	80013b0 <HAL_ADC_ConfigChannel+0x1e4>
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	2380      	movs	r3, #128	@ 0x80
 8001312:	019b      	lsls	r3, r3, #6
 8001314:	4013      	ands	r3, r2
 8001316:	d149      	bne.n	80013ac <HAL_ADC_ConfigChannel+0x1e0>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	2380      	movs	r3, #128	@ 0x80
 800131e:	01db      	lsls	r3, r3, #7
 8001320:	4013      	ands	r3, r2
 8001322:	d141      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x1dc>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	2380      	movs	r3, #128	@ 0x80
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	4013      	ands	r3, r2
 800132e:	d139      	bne.n	80013a4 <HAL_ADC_ConfigChannel+0x1d8>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	2380      	movs	r3, #128	@ 0x80
 8001336:	025b      	lsls	r3, r3, #9
 8001338:	4013      	ands	r3, r2
 800133a:	d131      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x1d4>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	2380      	movs	r3, #128	@ 0x80
 8001342:	029b      	lsls	r3, r3, #10
 8001344:	4013      	ands	r3, r2
 8001346:	d129      	bne.n	800139c <HAL_ADC_ConfigChannel+0x1d0>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	2380      	movs	r3, #128	@ 0x80
 800134e:	02db      	lsls	r3, r3, #11
 8001350:	4013      	ands	r3, r2
 8001352:	d121      	bne.n	8001398 <HAL_ADC_ConfigChannel+0x1cc>
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	2380      	movs	r3, #128	@ 0x80
 800135a:	031b      	lsls	r3, r3, #12
 800135c:	4013      	ands	r3, r2
 800135e:	d119      	bne.n	8001394 <HAL_ADC_ConfigChannel+0x1c8>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	2380      	movs	r3, #128	@ 0x80
 8001366:	035b      	lsls	r3, r3, #13
 8001368:	4013      	ands	r3, r2
 800136a:	d111      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x1c4>
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2380      	movs	r3, #128	@ 0x80
 8001372:	039b      	lsls	r3, r3, #14
 8001374:	4013      	ands	r3, r2
 8001376:	d109      	bne.n	800138c <HAL_ADC_ConfigChannel+0x1c0>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	2380      	movs	r3, #128	@ 0x80
 800137e:	03db      	lsls	r3, r3, #15
 8001380:	4013      	ands	r3, r2
 8001382:	d001      	beq.n	8001388 <HAL_ADC_ConfigChannel+0x1bc>
 8001384:	2316      	movs	r3, #22
 8001386:	e02c      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x216>
 8001388:	2300      	movs	r3, #0
 800138a:	e02a      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x216>
 800138c:	2315      	movs	r3, #21
 800138e:	e028      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x216>
 8001390:	2314      	movs	r3, #20
 8001392:	e026      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x216>
 8001394:	2313      	movs	r3, #19
 8001396:	e024      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x216>
 8001398:	2312      	movs	r3, #18
 800139a:	e022      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x216>
 800139c:	2311      	movs	r3, #17
 800139e:	e020      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x216>
 80013a0:	2310      	movs	r3, #16
 80013a2:	e01e      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x216>
 80013a4:	230f      	movs	r3, #15
 80013a6:	e01c      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x216>
 80013a8:	230e      	movs	r3, #14
 80013aa:	e01a      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x216>
 80013ac:	230d      	movs	r3, #13
 80013ae:	e018      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x216>
 80013b0:	230c      	movs	r3, #12
 80013b2:	e016      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x216>
 80013b4:	230b      	movs	r3, #11
 80013b6:	e014      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x216>
 80013b8:	230a      	movs	r3, #10
 80013ba:	e012      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x216>
 80013bc:	2309      	movs	r3, #9
 80013be:	e010      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x216>
 80013c0:	2308      	movs	r3, #8
 80013c2:	e00e      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x216>
 80013c4:	2307      	movs	r3, #7
 80013c6:	e00c      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x216>
 80013c8:	2306      	movs	r3, #6
 80013ca:	e00a      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x216>
 80013cc:	2305      	movs	r3, #5
 80013ce:	e008      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x216>
 80013d0:	2304      	movs	r3, #4
 80013d2:	e006      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x216>
 80013d4:	2303      	movs	r3, #3
 80013d6:	e004      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x216>
 80013d8:	2302      	movs	r3, #2
 80013da:	e002      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x216>
 80013dc:	2301      	movs	r3, #1
 80013de:	e000      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x216>
 80013e0:	2300      	movs	r3, #0
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	6852      	ldr	r2, [r2, #4]
 80013e6:	201f      	movs	r0, #31
 80013e8:	4002      	ands	r2, r0
 80013ea:	4093      	lsls	r3, r2
 80013ec:	000a      	movs	r2, r1
 80013ee:	431a      	orrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	089b      	lsrs	r3, r3, #2
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	429a      	cmp	r2, r3
 8001402:	d808      	bhi.n	8001416 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6818      	ldr	r0, [r3, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	6859      	ldr	r1, [r3, #4]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	001a      	movs	r2, r3
 8001412:	f7ff fc8c 	bl	8000d2e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	6819      	ldr	r1, [r3, #0]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	001a      	movs	r2, r3
 8001424:	f7ff fcc6 	bl	8000db4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	db00      	blt.n	8001432 <HAL_ADC_ConfigChannel+0x266>
 8001430:	e096      	b.n	8001560 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001432:	4b3f      	ldr	r3, [pc, #252]	@ (8001530 <HAL_ADC_ConfigChannel+0x364>)
 8001434:	0018      	movs	r0, r3
 8001436:	f7ff fc39 	bl	8000cac <LL_ADC_GetCommonPathInternalCh>
 800143a:	0003      	movs	r3, r0
 800143c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a3c      	ldr	r2, [pc, #240]	@ (8001534 <HAL_ADC_ConfigChannel+0x368>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d123      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	2380      	movs	r3, #128	@ 0x80
 800144c:	041b      	lsls	r3, r3, #16
 800144e:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001450:	d11e      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	2280      	movs	r2, #128	@ 0x80
 8001456:	0412      	lsls	r2, r2, #16
 8001458:	4313      	orrs	r3, r2
 800145a:	4a35      	ldr	r2, [pc, #212]	@ (8001530 <HAL_ADC_ConfigChannel+0x364>)
 800145c:	0019      	movs	r1, r3
 800145e:	0010      	movs	r0, r2
 8001460:	f7ff fc10 	bl	8000c84 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001464:	4b34      	ldr	r3, [pc, #208]	@ (8001538 <HAL_ADC_ConfigChannel+0x36c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4934      	ldr	r1, [pc, #208]	@ (800153c <HAL_ADC_ConfigChannel+0x370>)
 800146a:	0018      	movs	r0, r3
 800146c:	f7fe fe4c 	bl	8000108 <__udivsi3>
 8001470:	0003      	movs	r3, r0
 8001472:	001a      	movs	r2, r3
 8001474:	0013      	movs	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	189b      	adds	r3, r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	3301      	adds	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001480:	e002      	b.n	8001488 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	3b01      	subs	r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f9      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800148e:	e067      	b.n	8001560 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a2a      	ldr	r2, [pc, #168]	@ (8001540 <HAL_ADC_ConfigChannel+0x374>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d162      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	2380      	movs	r3, #128	@ 0x80
 800149e:	03db      	lsls	r3, r3, #15
 80014a0:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80014a2:	d15d      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	2280      	movs	r2, #128	@ 0x80
 80014a8:	03d2      	lsls	r2, r2, #15
 80014aa:	4313      	orrs	r3, r2
 80014ac:	4a20      	ldr	r2, [pc, #128]	@ (8001530 <HAL_ADC_ConfigChannel+0x364>)
 80014ae:	0019      	movs	r1, r3
 80014b0:	0010      	movs	r0, r2
 80014b2:	f7ff fbe7 	bl	8000c84 <LL_ADC_SetCommonPathInternalCh>
 80014b6:	e053      	b.n	8001560 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	2380      	movs	r3, #128	@ 0x80
 80014be:	061b      	lsls	r3, r3, #24
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d004      	beq.n	80014ce <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80014c8:	4a18      	ldr	r2, [pc, #96]	@ (800152c <HAL_ADC_ConfigChannel+0x360>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d107      	bne.n	80014de <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	0019      	movs	r1, r3
 80014d8:	0010      	movs	r0, r2
 80014da:	f7ff fc59 	bl	8000d90 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	da3c      	bge.n	8001560 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014e6:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <HAL_ADC_ConfigChannel+0x364>)
 80014e8:	0018      	movs	r0, r3
 80014ea:	f7ff fbdf 	bl	8000cac <LL_ADC_GetCommonPathInternalCh>
 80014ee:	0003      	movs	r3, r0
 80014f0:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001534 <HAL_ADC_ConfigChannel+0x368>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d108      	bne.n	800150e <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4a11      	ldr	r2, [pc, #68]	@ (8001544 <HAL_ADC_ConfigChannel+0x378>)
 8001500:	4013      	ands	r3, r2
 8001502:	4a0b      	ldr	r2, [pc, #44]	@ (8001530 <HAL_ADC_ConfigChannel+0x364>)
 8001504:	0019      	movs	r1, r3
 8001506:	0010      	movs	r0, r2
 8001508:	f7ff fbbc 	bl	8000c84 <LL_ADC_SetCommonPathInternalCh>
 800150c:	e028      	b.n	8001560 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a0b      	ldr	r2, [pc, #44]	@ (8001540 <HAL_ADC_ConfigChannel+0x374>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d123      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	4a0b      	ldr	r2, [pc, #44]	@ (8001548 <HAL_ADC_ConfigChannel+0x37c>)
 800151c:	4013      	ands	r3, r2
 800151e:	4a04      	ldr	r2, [pc, #16]	@ (8001530 <HAL_ADC_ConfigChannel+0x364>)
 8001520:	0019      	movs	r1, r3
 8001522:	0010      	movs	r0, r2
 8001524:	f7ff fbae 	bl	8000c84 <LL_ADC_SetCommonPathInternalCh>
 8001528:	e01a      	b.n	8001560 <HAL_ADC_ConfigChannel+0x394>
 800152a:	46c0      	nop			@ (mov r8, r8)
 800152c:	80000004 	.word	0x80000004
 8001530:	40012708 	.word	0x40012708
 8001534:	a4000200 	.word	0xa4000200
 8001538:	20000000 	.word	0x20000000
 800153c:	00030d40 	.word	0x00030d40
 8001540:	a8000400 	.word	0xa8000400
 8001544:	ff7fffff 	.word	0xff7fffff
 8001548:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001550:	2220      	movs	r2, #32
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001558:	2317      	movs	r3, #23
 800155a:	18fb      	adds	r3, r7, r3
 800155c:	2201      	movs	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2254      	movs	r2, #84	@ 0x54
 8001564:	2100      	movs	r1, #0
 8001566:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001568:	2317      	movs	r3, #23
 800156a:	18fb      	adds	r3, r7, r3
 800156c:	781b      	ldrb	r3, [r3, #0]
}
 800156e:	0018      	movs	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	b006      	add	sp, #24
 8001574:	bd80      	pop	{r7, pc}
 8001576:	46c0      	nop			@ (mov r8, r8)

08001578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	0002      	movs	r2, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	1dfb      	adds	r3, r7, #7
 8001584:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001586:	1dfb      	adds	r3, r7, #7
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b7f      	cmp	r3, #127	@ 0x7f
 800158c:	d828      	bhi.n	80015e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800158e:	4a2f      	ldr	r2, [pc, #188]	@ (800164c <__NVIC_SetPriority+0xd4>)
 8001590:	1dfb      	adds	r3, r7, #7
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b25b      	sxtb	r3, r3
 8001596:	089b      	lsrs	r3, r3, #2
 8001598:	33c0      	adds	r3, #192	@ 0xc0
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	589b      	ldr	r3, [r3, r2]
 800159e:	1dfa      	adds	r2, r7, #7
 80015a0:	7812      	ldrb	r2, [r2, #0]
 80015a2:	0011      	movs	r1, r2
 80015a4:	2203      	movs	r2, #3
 80015a6:	400a      	ands	r2, r1
 80015a8:	00d2      	lsls	r2, r2, #3
 80015aa:	21ff      	movs	r1, #255	@ 0xff
 80015ac:	4091      	lsls	r1, r2
 80015ae:	000a      	movs	r2, r1
 80015b0:	43d2      	mvns	r2, r2
 80015b2:	401a      	ands	r2, r3
 80015b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	019b      	lsls	r3, r3, #6
 80015ba:	22ff      	movs	r2, #255	@ 0xff
 80015bc:	401a      	ands	r2, r3
 80015be:	1dfb      	adds	r3, r7, #7
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	0018      	movs	r0, r3
 80015c4:	2303      	movs	r3, #3
 80015c6:	4003      	ands	r3, r0
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015cc:	481f      	ldr	r0, [pc, #124]	@ (800164c <__NVIC_SetPriority+0xd4>)
 80015ce:	1dfb      	adds	r3, r7, #7
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	089b      	lsrs	r3, r3, #2
 80015d6:	430a      	orrs	r2, r1
 80015d8:	33c0      	adds	r3, #192	@ 0xc0
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015de:	e031      	b.n	8001644 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001650 <__NVIC_SetPriority+0xd8>)
 80015e2:	1dfb      	adds	r3, r7, #7
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	0019      	movs	r1, r3
 80015e8:	230f      	movs	r3, #15
 80015ea:	400b      	ands	r3, r1
 80015ec:	3b08      	subs	r3, #8
 80015ee:	089b      	lsrs	r3, r3, #2
 80015f0:	3306      	adds	r3, #6
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	18d3      	adds	r3, r2, r3
 80015f6:	3304      	adds	r3, #4
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	1dfa      	adds	r2, r7, #7
 80015fc:	7812      	ldrb	r2, [r2, #0]
 80015fe:	0011      	movs	r1, r2
 8001600:	2203      	movs	r2, #3
 8001602:	400a      	ands	r2, r1
 8001604:	00d2      	lsls	r2, r2, #3
 8001606:	21ff      	movs	r1, #255	@ 0xff
 8001608:	4091      	lsls	r1, r2
 800160a:	000a      	movs	r2, r1
 800160c:	43d2      	mvns	r2, r2
 800160e:	401a      	ands	r2, r3
 8001610:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	019b      	lsls	r3, r3, #6
 8001616:	22ff      	movs	r2, #255	@ 0xff
 8001618:	401a      	ands	r2, r3
 800161a:	1dfb      	adds	r3, r7, #7
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	0018      	movs	r0, r3
 8001620:	2303      	movs	r3, #3
 8001622:	4003      	ands	r3, r0
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001628:	4809      	ldr	r0, [pc, #36]	@ (8001650 <__NVIC_SetPriority+0xd8>)
 800162a:	1dfb      	adds	r3, r7, #7
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	001c      	movs	r4, r3
 8001630:	230f      	movs	r3, #15
 8001632:	4023      	ands	r3, r4
 8001634:	3b08      	subs	r3, #8
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	430a      	orrs	r2, r1
 800163a:	3306      	adds	r3, #6
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	18c3      	adds	r3, r0, r3
 8001640:	3304      	adds	r3, #4
 8001642:	601a      	str	r2, [r3, #0]
}
 8001644:	46c0      	nop			@ (mov r8, r8)
 8001646:	46bd      	mov	sp, r7
 8001648:	b003      	add	sp, #12
 800164a:	bd90      	pop	{r4, r7, pc}
 800164c:	e000e100 	.word	0xe000e100
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	1e5a      	subs	r2, r3, #1
 8001660:	2380      	movs	r3, #128	@ 0x80
 8001662:	045b      	lsls	r3, r3, #17
 8001664:	429a      	cmp	r2, r3
 8001666:	d301      	bcc.n	800166c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001668:	2301      	movs	r3, #1
 800166a:	e010      	b.n	800168e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166c:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <SysTick_Config+0x44>)
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	3a01      	subs	r2, #1
 8001672:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001674:	2301      	movs	r3, #1
 8001676:	425b      	negs	r3, r3
 8001678:	2103      	movs	r1, #3
 800167a:	0018      	movs	r0, r3
 800167c:	f7ff ff7c 	bl	8001578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001680:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <SysTick_Config+0x44>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001686:	4b04      	ldr	r3, [pc, #16]	@ (8001698 <SysTick_Config+0x44>)
 8001688:	2207      	movs	r2, #7
 800168a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800168c:	2300      	movs	r3, #0
}
 800168e:	0018      	movs	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	b002      	add	sp, #8
 8001694:	bd80      	pop	{r7, pc}
 8001696:	46c0      	nop			@ (mov r8, r8)
 8001698:	e000e010 	.word	0xe000e010

0800169c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	210f      	movs	r1, #15
 80016a8:	187b      	adds	r3, r7, r1
 80016aa:	1c02      	adds	r2, r0, #0
 80016ac:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	187b      	adds	r3, r7, r1
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	0011      	movs	r1, r2
 80016b8:	0018      	movs	r0, r3
 80016ba:	f7ff ff5d 	bl	8001578 <__NVIC_SetPriority>
}
 80016be:	46c0      	nop			@ (mov r8, r8)
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b004      	add	sp, #16
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	0018      	movs	r0, r3
 80016d2:	f7ff ffbf 	bl	8001654 <SysTick_Config>
 80016d6:	0003      	movs	r3, r0
}
 80016d8:	0018      	movs	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	b002      	add	sp, #8
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80016ee:	e14d      	b.n	800198c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2101      	movs	r1, #1
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4091      	lsls	r1, r2
 80016fa:	000a      	movs	r2, r1
 80016fc:	4013      	ands	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d100      	bne.n	8001708 <HAL_GPIO_Init+0x28>
 8001706:	e13e      	b.n	8001986 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x38>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b12      	cmp	r3, #18
 8001716:	d125      	bne.n	8001764 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	08da      	lsrs	r2, r3, #3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3208      	adds	r2, #8
 8001720:	0092      	lsls	r2, r2, #2
 8001722:	58d3      	ldr	r3, [r2, r3]
 8001724:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	2207      	movs	r2, #7
 800172a:	4013      	ands	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	220f      	movs	r2, #15
 8001730:	409a      	lsls	r2, r3
 8001732:	0013      	movs	r3, r2
 8001734:	43da      	mvns	r2, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	4013      	ands	r3, r2
 800173a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	220f      	movs	r2, #15
 8001742:	401a      	ands	r2, r3
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	2107      	movs	r1, #7
 8001748:	400b      	ands	r3, r1
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	409a      	lsls	r2, r3
 800174e:	0013      	movs	r3, r2
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	4313      	orrs	r3, r2
 8001754:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	08da      	lsrs	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3208      	adds	r2, #8
 800175e:	0092      	lsls	r2, r2, #2
 8001760:	6979      	ldr	r1, [r7, #20]
 8001762:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	2203      	movs	r2, #3
 8001770:	409a      	lsls	r2, r3
 8001772:	0013      	movs	r3, r2
 8001774:	43da      	mvns	r2, r3
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	4013      	ands	r3, r2
 800177a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2203      	movs	r2, #3
 8001782:	401a      	ands	r2, r3
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	409a      	lsls	r2, r3
 800178a:	0013      	movs	r3, r2
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	4313      	orrs	r3, r2
 8001790:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d00b      	beq.n	80017b8 <HAL_GPIO_Init+0xd8>
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d007      	beq.n	80017b8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ac:	2b11      	cmp	r3, #17
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b12      	cmp	r3, #18
 80017b6:	d130      	bne.n	800181a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	2203      	movs	r2, #3
 80017c4:	409a      	lsls	r2, r3
 80017c6:	0013      	movs	r3, r2
 80017c8:	43da      	mvns	r2, r3
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	4013      	ands	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	68da      	ldr	r2, [r3, #12]
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	409a      	lsls	r2, r3
 80017da:	0013      	movs	r3, r2
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	4313      	orrs	r3, r2
 80017e0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017ee:	2201      	movs	r2, #1
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	409a      	lsls	r2, r3
 80017f4:	0013      	movs	r3, r2
 80017f6:	43da      	mvns	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	4013      	ands	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	091b      	lsrs	r3, r3, #4
 8001804:	2201      	movs	r2, #1
 8001806:	401a      	ands	r2, r3
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	409a      	lsls	r2, r3
 800180c:	0013      	movs	r3, r2
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	4313      	orrs	r3, r2
 8001812:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b03      	cmp	r3, #3
 8001820:	d017      	beq.n	8001852 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	2203      	movs	r2, #3
 800182e:	409a      	lsls	r2, r3
 8001830:	0013      	movs	r3, r2
 8001832:	43da      	mvns	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	4013      	ands	r3, r2
 8001838:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	409a      	lsls	r2, r3
 8001844:	0013      	movs	r3, r2
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	4313      	orrs	r3, r2
 800184a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	2380      	movs	r3, #128	@ 0x80
 8001858:	055b      	lsls	r3, r3, #21
 800185a:	4013      	ands	r3, r2
 800185c:	d100      	bne.n	8001860 <HAL_GPIO_Init+0x180>
 800185e:	e092      	b.n	8001986 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001860:	4a50      	ldr	r2, [pc, #320]	@ (80019a4 <HAL_GPIO_Init+0x2c4>)
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	3318      	adds	r3, #24
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	589b      	ldr	r3, [r3, r2]
 800186c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	2203      	movs	r2, #3
 8001872:	4013      	ands	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	220f      	movs	r2, #15
 8001878:	409a      	lsls	r2, r3
 800187a:	0013      	movs	r3, r2
 800187c:	43da      	mvns	r2, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	4013      	ands	r3, r2
 8001882:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	23a0      	movs	r3, #160	@ 0xa0
 8001888:	05db      	lsls	r3, r3, #23
 800188a:	429a      	cmp	r2, r3
 800188c:	d013      	beq.n	80018b6 <HAL_GPIO_Init+0x1d6>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a45      	ldr	r2, [pc, #276]	@ (80019a8 <HAL_GPIO_Init+0x2c8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d00d      	beq.n	80018b2 <HAL_GPIO_Init+0x1d2>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a44      	ldr	r2, [pc, #272]	@ (80019ac <HAL_GPIO_Init+0x2cc>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d007      	beq.n	80018ae <HAL_GPIO_Init+0x1ce>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a43      	ldr	r2, [pc, #268]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d101      	bne.n	80018aa <HAL_GPIO_Init+0x1ca>
 80018a6:	2305      	movs	r3, #5
 80018a8:	e006      	b.n	80018b8 <HAL_GPIO_Init+0x1d8>
 80018aa:	2306      	movs	r3, #6
 80018ac:	e004      	b.n	80018b8 <HAL_GPIO_Init+0x1d8>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e002      	b.n	80018b8 <HAL_GPIO_Init+0x1d8>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <HAL_GPIO_Init+0x1d8>
 80018b6:	2300      	movs	r3, #0
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	2103      	movs	r1, #3
 80018bc:	400a      	ands	r2, r1
 80018be:	00d2      	lsls	r2, r2, #3
 80018c0:	4093      	lsls	r3, r2
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80018c8:	4936      	ldr	r1, [pc, #216]	@ (80019a4 <HAL_GPIO_Init+0x2c4>)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	3318      	adds	r3, #24
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80018d6:	4a33      	ldr	r2, [pc, #204]	@ (80019a4 <HAL_GPIO_Init+0x2c4>)
 80018d8:	2380      	movs	r3, #128	@ 0x80
 80018da:	58d3      	ldr	r3, [r2, r3]
 80018dc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	43da      	mvns	r2, r3
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	4013      	ands	r3, r2
 80018e6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	2380      	movs	r3, #128	@ 0x80
 80018ee:	025b      	lsls	r3, r3, #9
 80018f0:	4013      	ands	r3, r2
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80018fc:	4929      	ldr	r1, [pc, #164]	@ (80019a4 <HAL_GPIO_Init+0x2c4>)
 80018fe:	2280      	movs	r2, #128	@ 0x80
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001904:	4a27      	ldr	r2, [pc, #156]	@ (80019a4 <HAL_GPIO_Init+0x2c4>)
 8001906:	2384      	movs	r3, #132	@ 0x84
 8001908:	58d3      	ldr	r3, [r2, r3]
 800190a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	43da      	mvns	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	4013      	ands	r3, r2
 8001914:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	2380      	movs	r3, #128	@ 0x80
 800191c:	029b      	lsls	r3, r3, #10
 800191e:	4013      	ands	r3, r2
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4313      	orrs	r3, r2
 8001928:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800192a:	491e      	ldr	r1, [pc, #120]	@ (80019a4 <HAL_GPIO_Init+0x2c4>)
 800192c:	2284      	movs	r2, #132	@ 0x84
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001932:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <HAL_GPIO_Init+0x2c4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	43da      	mvns	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	4013      	ands	r3, r2
 8001940:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	2380      	movs	r3, #128	@ 0x80
 8001948:	035b      	lsls	r3, r3, #13
 800194a:	4013      	ands	r3, r2
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4313      	orrs	r3, r2
 8001954:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001956:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <HAL_GPIO_Init+0x2c4>)
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <HAL_GPIO_Init+0x2c4>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	43da      	mvns	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	4013      	ands	r3, r2
 800196a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	2380      	movs	r3, #128	@ 0x80
 8001972:	039b      	lsls	r3, r3, #14
 8001974:	4013      	ands	r3, r2
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4313      	orrs	r3, r2
 800197e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001980:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <HAL_GPIO_Init+0x2c4>)
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	3301      	adds	r3, #1
 800198a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	40da      	lsrs	r2, r3
 8001994:	1e13      	subs	r3, r2, #0
 8001996:	d000      	beq.n	800199a <HAL_GPIO_Init+0x2ba>
 8001998:	e6aa      	b.n	80016f0 <HAL_GPIO_Init+0x10>
  }
}
 800199a:	46c0      	nop			@ (mov r8, r8)
 800199c:	46c0      	nop			@ (mov r8, r8)
 800199e:	46bd      	mov	sp, r7
 80019a0:	b006      	add	sp, #24
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021800 	.word	0x40021800
 80019a8:	50000400 	.word	0x50000400
 80019ac:	50000800 	.word	0x50000800
 80019b0:	50001400 	.word	0x50001400

080019b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	0008      	movs	r0, r1
 80019be:	0011      	movs	r1, r2
 80019c0:	1cbb      	adds	r3, r7, #2
 80019c2:	1c02      	adds	r2, r0, #0
 80019c4:	801a      	strh	r2, [r3, #0]
 80019c6:	1c7b      	adds	r3, r7, #1
 80019c8:	1c0a      	adds	r2, r1, #0
 80019ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019cc:	1c7b      	adds	r3, r7, #1
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d004      	beq.n	80019de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019d4:	1cbb      	adds	r3, r7, #2
 80019d6:	881a      	ldrh	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019dc:	e003      	b.n	80019e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019de:	1cbb      	adds	r3, r7, #2
 80019e0:	881a      	ldrh	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019e6:	46c0      	nop			@ (mov r8, r8)
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b002      	add	sp, #8
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e1d0      	b.n	8001da4 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2201      	movs	r2, #1
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d100      	bne.n	8001a0e <HAL_RCC_OscConfig+0x1e>
 8001a0c:	e069      	b.n	8001ae2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a0e:	4bc8      	ldr	r3, [pc, #800]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2238      	movs	r2, #56	@ 0x38
 8001a14:	4013      	ands	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d105      	bne.n	8001a2a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d15d      	bne.n	8001ae2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e1bc      	b.n	8001da4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	2380      	movs	r3, #128	@ 0x80
 8001a30:	025b      	lsls	r3, r3, #9
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d107      	bne.n	8001a46 <HAL_RCC_OscConfig+0x56>
 8001a36:	4bbe      	ldr	r3, [pc, #760]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4bbd      	ldr	r3, [pc, #756]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001a3c:	2180      	movs	r1, #128	@ 0x80
 8001a3e:	0249      	lsls	r1, r1, #9
 8001a40:	430a      	orrs	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	e020      	b.n	8001a88 <HAL_RCC_OscConfig+0x98>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	23a0      	movs	r3, #160	@ 0xa0
 8001a4c:	02db      	lsls	r3, r3, #11
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d10e      	bne.n	8001a70 <HAL_RCC_OscConfig+0x80>
 8001a52:	4bb7      	ldr	r3, [pc, #732]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	4bb6      	ldr	r3, [pc, #728]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001a58:	2180      	movs	r1, #128	@ 0x80
 8001a5a:	02c9      	lsls	r1, r1, #11
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	4bb3      	ldr	r3, [pc, #716]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4bb2      	ldr	r3, [pc, #712]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001a66:	2180      	movs	r1, #128	@ 0x80
 8001a68:	0249      	lsls	r1, r1, #9
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	e00b      	b.n	8001a88 <HAL_RCC_OscConfig+0x98>
 8001a70:	4baf      	ldr	r3, [pc, #700]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4bae      	ldr	r3, [pc, #696]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001a76:	49af      	ldr	r1, [pc, #700]	@ (8001d34 <HAL_RCC_OscConfig+0x344>)
 8001a78:	400a      	ands	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	4bac      	ldr	r3, [pc, #688]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4bab      	ldr	r3, [pc, #684]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001a82:	49ad      	ldr	r1, [pc, #692]	@ (8001d38 <HAL_RCC_OscConfig+0x348>)
 8001a84:	400a      	ands	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d014      	beq.n	8001aba <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a90:	f7ff f8ee 	bl	8000c70 <HAL_GetTick>
 8001a94:	0003      	movs	r3, r0
 8001a96:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001a9a:	f7ff f8e9 	bl	8000c70 <HAL_GetTick>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b64      	cmp	r3, #100	@ 0x64
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e17b      	b.n	8001da4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aac:	4ba0      	ldr	r3, [pc, #640]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	2380      	movs	r3, #128	@ 0x80
 8001ab2:	029b      	lsls	r3, r3, #10
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0xaa>
 8001ab8:	e013      	b.n	8001ae2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aba:	f7ff f8d9 	bl	8000c70 <HAL_GetTick>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001ac4:	f7ff f8d4 	bl	8000c70 <HAL_GetTick>
 8001ac8:	0002      	movs	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b64      	cmp	r3, #100	@ 0x64
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e166      	b.n	8001da4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ad6:	4b96      	ldr	r3, [pc, #600]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	2380      	movs	r3, #128	@ 0x80
 8001adc:	029b      	lsls	r3, r3, #10
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d100      	bne.n	8001aee <HAL_RCC_OscConfig+0xfe>
 8001aec:	e086      	b.n	8001bfc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aee:	4b90      	ldr	r3, [pc, #576]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	2238      	movs	r2, #56	@ 0x38
 8001af4:	4013      	ands	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d12f      	bne.n	8001b5e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e14c      	b.n	8001da4 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0a:	4b89      	ldr	r3, [pc, #548]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	4a8b      	ldr	r2, [pc, #556]	@ (8001d3c <HAL_RCC_OscConfig+0x34c>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	0019      	movs	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	021a      	lsls	r2, r3, #8
 8001b1a:	4b85      	ldr	r3, [pc, #532]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d112      	bne.n	8001b4c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b26:	4b82      	ldr	r3, [pc, #520]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a85      	ldr	r2, [pc, #532]	@ (8001d40 <HAL_RCC_OscConfig+0x350>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	0019      	movs	r1, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	4b7e      	ldr	r3, [pc, #504]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001b36:	430a      	orrs	r2, r1
 8001b38:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001b3a:	4b7d      	ldr	r3, [pc, #500]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	0adb      	lsrs	r3, r3, #11
 8001b40:	2207      	movs	r2, #7
 8001b42:	4013      	ands	r3, r2
 8001b44:	4a7f      	ldr	r2, [pc, #508]	@ (8001d44 <HAL_RCC_OscConfig+0x354>)
 8001b46:	40da      	lsrs	r2, r3
 8001b48:	4b7f      	ldr	r3, [pc, #508]	@ (8001d48 <HAL_RCC_OscConfig+0x358>)
 8001b4a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b4c:	4b7f      	ldr	r3, [pc, #508]	@ (8001d4c <HAL_RCC_OscConfig+0x35c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	0018      	movs	r0, r3
 8001b52:	f7ff f831 	bl	8000bb8 <HAL_InitTick>
 8001b56:	1e03      	subs	r3, r0, #0
 8001b58:	d050      	beq.n	8001bfc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e122      	b.n	8001da4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d030      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b66:	4b72      	ldr	r3, [pc, #456]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a75      	ldr	r2, [pc, #468]	@ (8001d40 <HAL_RCC_OscConfig+0x350>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	0019      	movs	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691a      	ldr	r2, [r3, #16]
 8001b74:	4b6e      	ldr	r3, [pc, #440]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001b76:	430a      	orrs	r2, r1
 8001b78:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	4b6c      	ldr	r3, [pc, #432]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001b80:	2180      	movs	r1, #128	@ 0x80
 8001b82:	0049      	lsls	r1, r1, #1
 8001b84:	430a      	orrs	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b88:	f7ff f872 	bl	8000c70 <HAL_GetTick>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001b92:	f7ff f86d 	bl	8000c70 <HAL_GetTick>
 8001b96:	0002      	movs	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e0ff      	b.n	8001da4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ba4:	4b62      	ldr	r3, [pc, #392]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	2380      	movs	r3, #128	@ 0x80
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	4013      	ands	r3, r2
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb0:	4b5f      	ldr	r3, [pc, #380]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	4a61      	ldr	r2, [pc, #388]	@ (8001d3c <HAL_RCC_OscConfig+0x34c>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	0019      	movs	r1, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	021a      	lsls	r2, r3, #8
 8001bc0:	4b5b      	ldr	r3, [pc, #364]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	e019      	b.n	8001bfc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001bc8:	4b59      	ldr	r3, [pc, #356]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b58      	ldr	r3, [pc, #352]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001bce:	4960      	ldr	r1, [pc, #384]	@ (8001d50 <HAL_RCC_OscConfig+0x360>)
 8001bd0:	400a      	ands	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd4:	f7ff f84c 	bl	8000c70 <HAL_GetTick>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001bde:	f7ff f847 	bl	8000c70 <HAL_GetTick>
 8001be2:	0002      	movs	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e0d9      	b.n	8001da4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bf0:	4b4f      	ldr	r3, [pc, #316]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2380      	movs	r3, #128	@ 0x80
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d1f0      	bne.n	8001bde <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2208      	movs	r2, #8
 8001c02:	4013      	ands	r3, r2
 8001c04:	d042      	beq.n	8001c8c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001c06:	4b4a      	ldr	r3, [pc, #296]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2238      	movs	r2, #56	@ 0x38
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b18      	cmp	r3, #24
 8001c10:	d105      	bne.n	8001c1e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d138      	bne.n	8001c8c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e0c2      	b.n	8001da4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d019      	beq.n	8001c5a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001c26:	4b42      	ldr	r3, [pc, #264]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001c28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c2a:	4b41      	ldr	r3, [pc, #260]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c32:	f7ff f81d 	bl	8000c70 <HAL_GetTick>
 8001c36:	0003      	movs	r3, r0
 8001c38:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001c3c:	f7ff f818 	bl	8000c70 <HAL_GetTick>
 8001c40:	0002      	movs	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e0aa      	b.n	8001da4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001c4e:	4b38      	ldr	r3, [pc, #224]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c52:	2202      	movs	r2, #2
 8001c54:	4013      	ands	r3, r2
 8001c56:	d0f1      	beq.n	8001c3c <HAL_RCC_OscConfig+0x24c>
 8001c58:	e018      	b.n	8001c8c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001c5a:	4b35      	ldr	r3, [pc, #212]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001c5c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c5e:	4b34      	ldr	r3, [pc, #208]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001c60:	2101      	movs	r1, #1
 8001c62:	438a      	bics	r2, r1
 8001c64:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c66:	f7ff f803 	bl	8000c70 <HAL_GetTick>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001c70:	f7fe fffe 	bl	8000c70 <HAL_GetTick>
 8001c74:	0002      	movs	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e090      	b.n	8001da4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001c82:	4b2b      	ldr	r3, [pc, #172]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c86:	2202      	movs	r2, #2
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d1f1      	bne.n	8001c70 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2204      	movs	r2, #4
 8001c92:	4013      	ands	r3, r2
 8001c94:	d100      	bne.n	8001c98 <HAL_RCC_OscConfig+0x2a8>
 8001c96:	e084      	b.n	8001da2 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c98:	230f      	movs	r3, #15
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001ca0:	4b23      	ldr	r3, [pc, #140]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2238      	movs	r2, #56	@ 0x38
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b20      	cmp	r3, #32
 8001caa:	d106      	bne.n	8001cba <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d000      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x2c6>
 8001cb4:	e075      	b.n	8001da2 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e074      	b.n	8001da4 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d106      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x2e0>
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001cc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001cc8:	2101      	movs	r1, #1
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cce:	e01c      	b.n	8001d0a <HAL_RCC_OscConfig+0x31a>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b05      	cmp	r3, #5
 8001cd6:	d10c      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x302>
 8001cd8:	4b15      	ldr	r3, [pc, #84]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001cda:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cdc:	4b14      	ldr	r3, [pc, #80]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001cde:	2104      	movs	r1, #4
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ce4:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001ce6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ce8:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001cea:	2101      	movs	r1, #1
 8001cec:	430a      	orrs	r2, r1
 8001cee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cf0:	e00b      	b.n	8001d0a <HAL_RCC_OscConfig+0x31a>
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001cf4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	438a      	bics	r2, r1
 8001cfc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001d00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d02:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001d04:	2104      	movs	r1, #4
 8001d06:	438a      	bics	r2, r1
 8001d08:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d028      	beq.n	8001d64 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d12:	f7fe ffad 	bl	8000c70 <HAL_GetTick>
 8001d16:	0003      	movs	r3, r0
 8001d18:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001d1a:	e01d      	b.n	8001d58 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1c:	f7fe ffa8 	bl	8000c70 <HAL_GetTick>
 8001d20:	0002      	movs	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	4a0b      	ldr	r2, [pc, #44]	@ (8001d54 <HAL_RCC_OscConfig+0x364>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d915      	bls.n	8001d58 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e039      	b.n	8001da4 <HAL_RCC_OscConfig+0x3b4>
 8001d30:	40021000 	.word	0x40021000
 8001d34:	fffeffff 	.word	0xfffeffff
 8001d38:	fffbffff 	.word	0xfffbffff
 8001d3c:	ffff80ff 	.word	0xffff80ff
 8001d40:	ffffc7ff 	.word	0xffffc7ff
 8001d44:	02dc6c00 	.word	0x02dc6c00
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	20000004 	.word	0x20000004
 8001d50:	fffffeff 	.word	0xfffffeff
 8001d54:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001d58:	4b14      	ldr	r3, [pc, #80]	@ (8001dac <HAL_RCC_OscConfig+0x3bc>)
 8001d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d0dc      	beq.n	8001d1c <HAL_RCC_OscConfig+0x32c>
 8001d62:	e013      	b.n	8001d8c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d64:	f7fe ff84 	bl	8000c70 <HAL_GetTick>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001d6c:	e009      	b.n	8001d82 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6e:	f7fe ff7f 	bl	8000c70 <HAL_GetTick>
 8001d72:	0002      	movs	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	4a0d      	ldr	r2, [pc, #52]	@ (8001db0 <HAL_RCC_OscConfig+0x3c0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e010      	b.n	8001da4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001d82:	4b0a      	ldr	r3, [pc, #40]	@ (8001dac <HAL_RCC_OscConfig+0x3bc>)
 8001d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d86:	2202      	movs	r2, #2
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d1f0      	bne.n	8001d6e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001d8c:	230f      	movs	r3, #15
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d105      	bne.n	8001da2 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001d96:	4b05      	ldr	r3, [pc, #20]	@ (8001dac <HAL_RCC_OscConfig+0x3bc>)
 8001d98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d9a:	4b04      	ldr	r3, [pc, #16]	@ (8001dac <HAL_RCC_OscConfig+0x3bc>)
 8001d9c:	4905      	ldr	r1, [pc, #20]	@ (8001db4 <HAL_RCC_OscConfig+0x3c4>)
 8001d9e:	400a      	ands	r2, r1
 8001da0:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	0018      	movs	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b006      	add	sp, #24
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40021000 	.word	0x40021000
 8001db0:	00001388 	.word	0x00001388
 8001db4:	efffffff 	.word	0xefffffff

08001db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0e9      	b.n	8001fa0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dcc:	4b76      	ldr	r3, [pc, #472]	@ (8001fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2207      	movs	r2, #7
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d91e      	bls.n	8001e18 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dda:	4b73      	ldr	r3, [pc, #460]	@ (8001fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2207      	movs	r2, #7
 8001de0:	4393      	bics	r3, r2
 8001de2:	0019      	movs	r1, r3
 8001de4:	4b70      	ldr	r3, [pc, #448]	@ (8001fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dec:	f7fe ff40 	bl	8000c70 <HAL_GetTick>
 8001df0:	0003      	movs	r3, r0
 8001df2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001df4:	e009      	b.n	8001e0a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001df6:	f7fe ff3b 	bl	8000c70 <HAL_GetTick>
 8001dfa:	0002      	movs	r2, r0
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	4a6a      	ldr	r2, [pc, #424]	@ (8001fac <HAL_RCC_ClockConfig+0x1f4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e0ca      	b.n	8001fa0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e0a:	4b67      	ldr	r3, [pc, #412]	@ (8001fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2207      	movs	r2, #7
 8001e10:	4013      	ands	r3, r2
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d1ee      	bne.n	8001df6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d017      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2204      	movs	r2, #4
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d008      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e2c:	4b60      	ldr	r3, [pc, #384]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	4a60      	ldr	r2, [pc, #384]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1fc>)
 8001e32:	401a      	ands	r2, r3
 8001e34:	4b5e      	ldr	r3, [pc, #376]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e36:	21b0      	movs	r1, #176	@ 0xb0
 8001e38:	0109      	lsls	r1, r1, #4
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e3e:	4b5c      	ldr	r3, [pc, #368]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	4a5d      	ldr	r2, [pc, #372]	@ (8001fb8 <HAL_RCC_ClockConfig+0x200>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	0019      	movs	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	4b58      	ldr	r3, [pc, #352]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2201      	movs	r2, #1
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d055      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001e5c:	4b54      	ldr	r3, [pc, #336]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	221c      	movs	r2, #28
 8001e62:	4393      	bics	r3, r2
 8001e64:	0019      	movs	r1, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	4b51      	ldr	r3, [pc, #324]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d107      	bne.n	8001e88 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e78:	4b4d      	ldr	r3, [pc, #308]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	2380      	movs	r3, #128	@ 0x80
 8001e7e:	029b      	lsls	r3, r3, #10
 8001e80:	4013      	ands	r3, r2
 8001e82:	d11f      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e08b      	b.n	8001fa0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d107      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e90:	4b47      	ldr	r3, [pc, #284]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	2380      	movs	r3, #128	@ 0x80
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d113      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e07f      	b.n	8001fa0 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001ea8:	4b41      	ldr	r3, [pc, #260]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eac:	2202      	movs	r2, #2
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d108      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e074      	b.n	8001fa0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001eb6:	4b3e      	ldr	r3, [pc, #248]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eba:	2202      	movs	r2, #2
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e06d      	b.n	8001fa0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ec4:	4b3a      	ldr	r3, [pc, #232]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2207      	movs	r2, #7
 8001eca:	4393      	bics	r3, r2
 8001ecc:	0019      	movs	r1, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	4b37      	ldr	r3, [pc, #220]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ed8:	f7fe feca 	bl	8000c70 <HAL_GetTick>
 8001edc:	0003      	movs	r3, r0
 8001ede:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee0:	e009      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee2:	f7fe fec5 	bl	8000c70 <HAL_GetTick>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	4a2f      	ldr	r2, [pc, #188]	@ (8001fac <HAL_RCC_ClockConfig+0x1f4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e054      	b.n	8001fa0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef6:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2238      	movs	r2, #56	@ 0x38
 8001efc:	401a      	ands	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d1ec      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f08:	4b27      	ldr	r3, [pc, #156]	@ (8001fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2207      	movs	r2, #7
 8001f0e:	4013      	ands	r3, r2
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d21e      	bcs.n	8001f54 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f16:	4b24      	ldr	r3, [pc, #144]	@ (8001fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	4393      	bics	r3, r2
 8001f1e:	0019      	movs	r1, r3
 8001f20:	4b21      	ldr	r3, [pc, #132]	@ (8001fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f28:	f7fe fea2 	bl	8000c70 <HAL_GetTick>
 8001f2c:	0003      	movs	r3, r0
 8001f2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f30:	e009      	b.n	8001f46 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001f32:	f7fe fe9d 	bl	8000c70 <HAL_GetTick>
 8001f36:	0002      	movs	r2, r0
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001fac <HAL_RCC_ClockConfig+0x1f4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e02c      	b.n	8001fa0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f46:	4b18      	ldr	r3, [pc, #96]	@ (8001fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2207      	movs	r2, #7
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d1ee      	bne.n	8001f32 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2204      	movs	r2, #4
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d009      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f5e:	4b14      	ldr	r3, [pc, #80]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	4a16      	ldr	r2, [pc, #88]	@ (8001fbc <HAL_RCC_ClockConfig+0x204>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	0019      	movs	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	4b10      	ldr	r3, [pc, #64]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001f72:	f000 f82b 	bl	8001fcc <HAL_RCC_GetSysClockFreq>
 8001f76:	0001      	movs	r1, r0
 8001f78:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	220f      	movs	r2, #15
 8001f80:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001f82:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc0 <HAL_RCC_ClockConfig+0x208>)
 8001f84:	0092      	lsls	r2, r2, #2
 8001f86:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f88:	221f      	movs	r2, #31
 8001f8a:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001f8c:	000a      	movs	r2, r1
 8001f8e:	40da      	lsrs	r2, r3
 8001f90:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <HAL_RCC_ClockConfig+0x20c>)
 8001f92:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f94:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc8 <HAL_RCC_ClockConfig+0x210>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f7fe fe0d 	bl	8000bb8 <HAL_InitTick>
 8001f9e:	0003      	movs	r3, r0
}
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b004      	add	sp, #16
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40022000 	.word	0x40022000
 8001fac:	00001388 	.word	0x00001388
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	ffff84ff 	.word	0xffff84ff
 8001fb8:	fffff0ff 	.word	0xfffff0ff
 8001fbc:	ffff8fff 	.word	0xffff8fff
 8001fc0:	08003af4 	.word	0x08003af4
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	20000004 	.word	0x20000004

08001fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8001fd2:	4b23      	ldr	r3, [pc, #140]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	089b      	lsrs	r3, r3, #2
 8001fd8:	2207      	movs	r2, #7
 8001fda:	4013      	ands	r3, r2
 8001fdc:	3301      	adds	r3, #1
 8001fde:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2238      	movs	r2, #56	@ 0x38
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d10f      	bne.n	800200a <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001fea:	4b1d      	ldr	r3, [pc, #116]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	0adb      	lsrs	r3, r3, #11
 8001ff0:	2207      	movs	r2, #7
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	0013      	movs	r3, r2
 8001ffa:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4819      	ldr	r0, [pc, #100]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x98>)
 8002000:	f7fe f882 	bl	8000108 <__udivsi3>
 8002004:	0003      	movs	r3, r0
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	e01e      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800200a:	4b15      	ldr	r3, [pc, #84]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x94>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2238      	movs	r2, #56	@ 0x38
 8002010:	4013      	ands	r3, r2
 8002012:	2b08      	cmp	r3, #8
 8002014:	d102      	bne.n	800201c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002016:	4b14      	ldr	r3, [pc, #80]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	e015      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800201c:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x94>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2238      	movs	r2, #56	@ 0x38
 8002022:	4013      	ands	r3, r2
 8002024:	2b20      	cmp	r3, #32
 8002026:	d103      	bne.n	8002030 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002028:	2380      	movs	r3, #128	@ 0x80
 800202a:	021b      	lsls	r3, r3, #8
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	e00b      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002030:	4b0b      	ldr	r3, [pc, #44]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x94>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2238      	movs	r2, #56	@ 0x38
 8002036:	4013      	ands	r3, r2
 8002038:	2b18      	cmp	r3, #24
 800203a:	d103      	bne.n	8002044 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800203c:	23fa      	movs	r3, #250	@ 0xfa
 800203e:	01db      	lsls	r3, r3, #7
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	e001      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f7fe f85c 	bl	8000108 <__udivsi3>
 8002050:	0003      	movs	r3, r0
 8002052:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8002054:	68fb      	ldr	r3, [r7, #12]
}
 8002056:	0018      	movs	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	b004      	add	sp, #16
 800205c:	bd80      	pop	{r7, pc}
 800205e:	46c0      	nop			@ (mov r8, r8)
 8002060:	40021000 	.word	0x40021000
 8002064:	02dc6c00 	.word	0x02dc6c00
 8002068:	007a1200 	.word	0x007a1200

0800206c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002070:	f7ff ffac 	bl	8001fcc <HAL_RCC_GetSysClockFreq>
 8002074:	0001      	movs	r1, r0
 8002076:	4b09      	ldr	r3, [pc, #36]	@ (800209c <HAL_RCC_GetHCLKFreq+0x30>)
 8002078:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800207a:	0a1b      	lsrs	r3, r3, #8
 800207c:	220f      	movs	r2, #15
 800207e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002080:	4b07      	ldr	r3, [pc, #28]	@ (80020a0 <HAL_RCC_GetHCLKFreq+0x34>)
 8002082:	0092      	lsls	r2, r2, #2
 8002084:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002086:	221f      	movs	r2, #31
 8002088:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800208a:	000a      	movs	r2, r1
 800208c:	40da      	lsrs	r2, r3
 800208e:	4b05      	ldr	r3, [pc, #20]	@ (80020a4 <HAL_RCC_GetHCLKFreq+0x38>)
 8002090:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8002092:	4b04      	ldr	r3, [pc, #16]	@ (80020a4 <HAL_RCC_GetHCLKFreq+0x38>)
 8002094:	681b      	ldr	r3, [r3, #0]
}
 8002096:	0018      	movs	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000
 80020a0:	08003af4 	.word	0x08003af4
 80020a4:	20000000 	.word	0x20000000

080020a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80020ac:	f7ff ffde 	bl	800206c <HAL_RCC_GetHCLKFreq>
 80020b0:	0001      	movs	r1, r0
 80020b2:	4b07      	ldr	r3, [pc, #28]	@ (80020d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	0b1b      	lsrs	r3, r3, #12
 80020b8:	2207      	movs	r2, #7
 80020ba:	401a      	ands	r2, r3
 80020bc:	4b05      	ldr	r3, [pc, #20]	@ (80020d4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80020be:	0092      	lsls	r2, r2, #2
 80020c0:	58d3      	ldr	r3, [r2, r3]
 80020c2:	221f      	movs	r2, #31
 80020c4:	4013      	ands	r3, r2
 80020c6:	40d9      	lsrs	r1, r3
 80020c8:	000b      	movs	r3, r1
}
 80020ca:	0018      	movs	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000
 80020d4:	08003b34 	.word	0x08003b34

080020d8 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80020e0:	2313      	movs	r3, #19
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020e8:	2312      	movs	r3, #18
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2240      	movs	r2, #64	@ 0x40
 80020f6:	4013      	ands	r3, r2
 80020f8:	d100      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x24>
 80020fa:	e079      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020fc:	2011      	movs	r0, #17
 80020fe:	183b      	adds	r3, r7, r0
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002104:	4b63      	ldr	r3, [pc, #396]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002106:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002108:	2380      	movs	r3, #128	@ 0x80
 800210a:	055b      	lsls	r3, r3, #21
 800210c:	4013      	ands	r3, r2
 800210e:	d110      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002110:	4b60      	ldr	r3, [pc, #384]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002112:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002114:	4b5f      	ldr	r3, [pc, #380]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	0549      	lsls	r1, r1, #21
 800211a:	430a      	orrs	r2, r1
 800211c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800211e:	4b5d      	ldr	r3, [pc, #372]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002120:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002122:	2380      	movs	r3, #128	@ 0x80
 8002124:	055b      	lsls	r3, r3, #21
 8002126:	4013      	ands	r3, r2
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212c:	183b      	adds	r3, r7, r0
 800212e:	2201      	movs	r2, #1
 8002130:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002132:	4b58      	ldr	r3, [pc, #352]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002134:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002136:	23c0      	movs	r3, #192	@ 0xc0
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4013      	ands	r3, r2
 800213c:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d019      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	429a      	cmp	r2, r3
 800214c:	d014      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800214e:	4b51      	ldr	r3, [pc, #324]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002152:	4a51      	ldr	r2, [pc, #324]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002154:	4013      	ands	r3, r2
 8002156:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002158:	4b4e      	ldr	r3, [pc, #312]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800215a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800215c:	4b4d      	ldr	r3, [pc, #308]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800215e:	2180      	movs	r1, #128	@ 0x80
 8002160:	0249      	lsls	r1, r1, #9
 8002162:	430a      	orrs	r2, r1
 8002164:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002166:	4b4b      	ldr	r3, [pc, #300]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002168:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800216a:	4b4a      	ldr	r3, [pc, #296]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800216c:	494b      	ldr	r1, [pc, #300]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800216e:	400a      	ands	r2, r1
 8002170:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002172:	4b48      	ldr	r3, [pc, #288]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2201      	movs	r2, #1
 800217c:	4013      	ands	r3, r2
 800217e:	d016      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002180:	f7fe fd76 	bl	8000c70 <HAL_GetTick>
 8002184:	0003      	movs	r3, r0
 8002186:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002188:	e00c      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218a:	f7fe fd71 	bl	8000c70 <HAL_GetTick>
 800218e:	0002      	movs	r2, r0
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	4a42      	ldr	r2, [pc, #264]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d904      	bls.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 800219a:	2313      	movs	r3, #19
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	2203      	movs	r2, #3
 80021a0:	701a      	strb	r2, [r3, #0]
          break;
 80021a2:	e004      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80021a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a8:	2202      	movs	r2, #2
 80021aa:	4013      	ands	r3, r2
 80021ac:	d0ed      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 80021ae:	2313      	movs	r3, #19
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10a      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021b8:	4b36      	ldr	r3, [pc, #216]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021bc:	4a36      	ldr	r2, [pc, #216]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021be:	4013      	ands	r3, r2
 80021c0:	0019      	movs	r1, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	699a      	ldr	r2, [r3, #24]
 80021c6:	4b33      	ldr	r3, [pc, #204]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021c8:	430a      	orrs	r2, r1
 80021ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021cc:	e005      	b.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021ce:	2312      	movs	r3, #18
 80021d0:	18fb      	adds	r3, r7, r3
 80021d2:	2213      	movs	r2, #19
 80021d4:	18ba      	adds	r2, r7, r2
 80021d6:	7812      	ldrb	r2, [r2, #0]
 80021d8:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021da:	2311      	movs	r3, #17
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d105      	bne.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021ea:	492e      	ldr	r1, [pc, #184]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80021ec:	400a      	ands	r2, r1
 80021ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2201      	movs	r2, #1
 80021f6:	4013      	ands	r3, r2
 80021f8:	d009      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021fa:	4b26      	ldr	r3, [pc, #152]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fe:	2203      	movs	r2, #3
 8002200:	4393      	bics	r3, r2
 8002202:	0019      	movs	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	4b22      	ldr	r3, [pc, #136]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800220a:	430a      	orrs	r2, r1
 800220c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2202      	movs	r2, #2
 8002214:	4013      	ands	r3, r2
 8002216:	d009      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002218:	4b1e      	ldr	r3, [pc, #120]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800221a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221c:	4a22      	ldr	r2, [pc, #136]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800221e:	4013      	ands	r3, r2
 8002220:	0019      	movs	r1, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	4b1b      	ldr	r3, [pc, #108]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002228:	430a      	orrs	r2, r1
 800222a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2220      	movs	r2, #32
 8002232:	4013      	ands	r3, r2
 8002234:	d008      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002236:	4b17      	ldr	r3, [pc, #92]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	0899      	lsrs	r1, r3, #2
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695a      	ldr	r2, [r3, #20]
 8002242:	4b14      	ldr	r3, [pc, #80]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002244:	430a      	orrs	r2, r1
 8002246:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2204      	movs	r2, #4
 800224e:	4013      	ands	r3, r2
 8002250:	d009      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002252:	4b10      	ldr	r3, [pc, #64]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002256:	4a15      	ldr	r2, [pc, #84]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002258:	4013      	ands	r3, r2
 800225a:	0019      	movs	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	4b0c      	ldr	r3, [pc, #48]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002262:	430a      	orrs	r2, r1
 8002264:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2280      	movs	r2, #128	@ 0x80
 800226c:	4013      	ands	r3, r2
 800226e:	d009      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002270:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	22e0      	movs	r2, #224	@ 0xe0
 8002276:	4393      	bics	r3, r2
 8002278:	0019      	movs	r1, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002280:	430a      	orrs	r2, r1
 8002282:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002284:	2312      	movs	r3, #18
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	781b      	ldrb	r3, [r3, #0]
}
 800228a:	0018      	movs	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	b006      	add	sp, #24
 8002290:	bd80      	pop	{r7, pc}
 8002292:	46c0      	nop			@ (mov r8, r8)
 8002294:	40021000 	.word	0x40021000
 8002298:	fffffcff 	.word	0xfffffcff
 800229c:	fffeffff 	.word	0xfffeffff
 80022a0:	00001388 	.word	0x00001388
 80022a4:	efffffff 	.word	0xefffffff
 80022a8:	ffffcfff 	.word	0xffffcfff
 80022ac:	ffff3fff 	.word	0xffff3fff

080022b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	1dbb      	adds	r3, r7, #6
 80022bc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	228c      	movs	r2, #140	@ 0x8c
 80022c2:	589b      	ldr	r3, [r3, r2]
 80022c4:	2b20      	cmp	r3, #32
 80022c6:	d145      	bne.n	8002354 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_UART_Receive_IT+0x26>
 80022ce:	1dbb      	adds	r3, r7, #6
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e03d      	b.n	8002356 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	2380      	movs	r3, #128	@ 0x80
 80022e0:	015b      	lsls	r3, r3, #5
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d109      	bne.n	80022fa <HAL_UART_Receive_IT+0x4a>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d105      	bne.n	80022fa <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2201      	movs	r2, #1
 80022f2:	4013      	ands	r3, r2
 80022f4:	d001      	beq.n	80022fa <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e02d      	b.n	8002356 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	2380      	movs	r3, #128	@ 0x80
 8002308:	041b      	lsls	r3, r3, #16
 800230a:	4013      	ands	r3, r2
 800230c:	d019      	beq.n	8002342 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800230e:	f3ef 8310 	mrs	r3, PRIMASK
 8002312:	613b      	str	r3, [r7, #16]
  return(result);
 8002314:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002316:	61fb      	str	r3, [r7, #28]
 8002318:	2301      	movs	r3, #1
 800231a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f383 8810 	msr	PRIMASK, r3
}
 8002322:	46c0      	nop			@ (mov r8, r8)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2180      	movs	r1, #128	@ 0x80
 8002330:	04c9      	lsls	r1, r1, #19
 8002332:	430a      	orrs	r2, r1
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	f383 8810 	msr	PRIMASK, r3
}
 8002340:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002342:	1dbb      	adds	r3, r7, #6
 8002344:	881a      	ldrh	r2, [r3, #0]
 8002346:	68b9      	ldr	r1, [r7, #8]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	0018      	movs	r0, r3
 800234c:	f000 fb66 	bl	8002a1c <UART_Start_Receive_IT>
 8002350:	0003      	movs	r3, r0
 8002352:	e000      	b.n	8002356 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002354:	2302      	movs	r3, #2
  }
}
 8002356:	0018      	movs	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	b008      	add	sp, #32
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002366:	46c0      	nop			@ (mov r8, r8)
 8002368:	46bd      	mov	sp, r7
 800236a:	b002      	add	sp, #8
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	000a      	movs	r2, r1
 8002378:	1cbb      	adds	r3, r7, #2
 800237a:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800237c:	46c0      	nop			@ (mov r8, r8)
 800237e:	46bd      	mov	sp, r7
 8002380:	b002      	add	sp, #8
 8002382:	bd80      	pop	{r7, pc}

08002384 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800238c:	231e      	movs	r3, #30
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4aab      	ldr	r2, [pc, #684]	@ (8002660 <UART_SetConfig+0x2dc>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	0019      	movs	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	430a      	orrs	r2, r1
 80023c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4aa6      	ldr	r2, [pc, #664]	@ (8002664 <UART_SetConfig+0x2e0>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	0019      	movs	r1, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	4a9d      	ldr	r2, [pc, #628]	@ (8002668 <UART_SetConfig+0x2e4>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	0019      	movs	r1, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002406:	220f      	movs	r2, #15
 8002408:	4393      	bics	r3, r2
 800240a:	0019      	movs	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a93      	ldr	r2, [pc, #588]	@ (800266c <UART_SetConfig+0x2e8>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d127      	bne.n	8002472 <UART_SetConfig+0xee>
 8002422:	4b93      	ldr	r3, [pc, #588]	@ (8002670 <UART_SetConfig+0x2ec>)
 8002424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002426:	2203      	movs	r2, #3
 8002428:	4013      	ands	r3, r2
 800242a:	2b03      	cmp	r3, #3
 800242c:	d017      	beq.n	800245e <UART_SetConfig+0xda>
 800242e:	d81b      	bhi.n	8002468 <UART_SetConfig+0xe4>
 8002430:	2b02      	cmp	r3, #2
 8002432:	d00a      	beq.n	800244a <UART_SetConfig+0xc6>
 8002434:	d818      	bhi.n	8002468 <UART_SetConfig+0xe4>
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <UART_SetConfig+0xbc>
 800243a:	2b01      	cmp	r3, #1
 800243c:	d00a      	beq.n	8002454 <UART_SetConfig+0xd0>
 800243e:	e013      	b.n	8002468 <UART_SetConfig+0xe4>
 8002440:	231f      	movs	r3, #31
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
 8002448:	e021      	b.n	800248e <UART_SetConfig+0x10a>
 800244a:	231f      	movs	r3, #31
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	2202      	movs	r2, #2
 8002450:	701a      	strb	r2, [r3, #0]
 8002452:	e01c      	b.n	800248e <UART_SetConfig+0x10a>
 8002454:	231f      	movs	r3, #31
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	2204      	movs	r2, #4
 800245a:	701a      	strb	r2, [r3, #0]
 800245c:	e017      	b.n	800248e <UART_SetConfig+0x10a>
 800245e:	231f      	movs	r3, #31
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	2208      	movs	r2, #8
 8002464:	701a      	strb	r2, [r3, #0]
 8002466:	e012      	b.n	800248e <UART_SetConfig+0x10a>
 8002468:	231f      	movs	r3, #31
 800246a:	18fb      	adds	r3, r7, r3
 800246c:	2210      	movs	r2, #16
 800246e:	701a      	strb	r2, [r3, #0]
 8002470:	e00d      	b.n	800248e <UART_SetConfig+0x10a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a7f      	ldr	r2, [pc, #508]	@ (8002674 <UART_SetConfig+0x2f0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d104      	bne.n	8002486 <UART_SetConfig+0x102>
 800247c:	231f      	movs	r3, #31
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
 8002484:	e003      	b.n	800248e <UART_SetConfig+0x10a>
 8002486:	231f      	movs	r3, #31
 8002488:	18fb      	adds	r3, r7, r3
 800248a:	2210      	movs	r2, #16
 800248c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69da      	ldr	r2, [r3, #28]
 8002492:	2380      	movs	r3, #128	@ 0x80
 8002494:	021b      	lsls	r3, r3, #8
 8002496:	429a      	cmp	r2, r3
 8002498:	d000      	beq.n	800249c <UART_SetConfig+0x118>
 800249a:	e06f      	b.n	800257c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800249c:	231f      	movs	r3, #31
 800249e:	18fb      	adds	r3, r7, r3
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d01f      	beq.n	80024e6 <UART_SetConfig+0x162>
 80024a6:	dc22      	bgt.n	80024ee <UART_SetConfig+0x16a>
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d017      	beq.n	80024dc <UART_SetConfig+0x158>
 80024ac:	dc1f      	bgt.n	80024ee <UART_SetConfig+0x16a>
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <UART_SetConfig+0x134>
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d005      	beq.n	80024c2 <UART_SetConfig+0x13e>
 80024b6:	e01a      	b.n	80024ee <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024b8:	f7ff fdf6 	bl	80020a8 <HAL_RCC_GetPCLK1Freq>
 80024bc:	0003      	movs	r3, r0
 80024be:	61bb      	str	r3, [r7, #24]
        break;
 80024c0:	e01c      	b.n	80024fc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80024c2:	4b6b      	ldr	r3, [pc, #428]	@ (8002670 <UART_SetConfig+0x2ec>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	095b      	lsrs	r3, r3, #5
 80024c8:	2207      	movs	r2, #7
 80024ca:	4013      	ands	r3, r2
 80024cc:	3301      	adds	r3, #1
 80024ce:	0019      	movs	r1, r3
 80024d0:	4869      	ldr	r0, [pc, #420]	@ (8002678 <UART_SetConfig+0x2f4>)
 80024d2:	f7fd fe19 	bl	8000108 <__udivsi3>
 80024d6:	0003      	movs	r3, r0
 80024d8:	61bb      	str	r3, [r7, #24]
        break;
 80024da:	e00f      	b.n	80024fc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024dc:	f7ff fd76 	bl	8001fcc <HAL_RCC_GetSysClockFreq>
 80024e0:	0003      	movs	r3, r0
 80024e2:	61bb      	str	r3, [r7, #24]
        break;
 80024e4:	e00a      	b.n	80024fc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024e6:	2380      	movs	r3, #128	@ 0x80
 80024e8:	021b      	lsls	r3, r3, #8
 80024ea:	61bb      	str	r3, [r7, #24]
        break;
 80024ec:	e006      	b.n	80024fc <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80024f2:	231e      	movs	r3, #30
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	2201      	movs	r2, #1
 80024f8:	701a      	strb	r2, [r3, #0]
        break;
 80024fa:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d100      	bne.n	8002504 <UART_SetConfig+0x180>
 8002502:	e097      	b.n	8002634 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002508:	4b5c      	ldr	r3, [pc, #368]	@ (800267c <UART_SetConfig+0x2f8>)
 800250a:	0052      	lsls	r2, r2, #1
 800250c:	5ad3      	ldrh	r3, [r2, r3]
 800250e:	0019      	movs	r1, r3
 8002510:	69b8      	ldr	r0, [r7, #24]
 8002512:	f7fd fdf9 	bl	8000108 <__udivsi3>
 8002516:	0003      	movs	r3, r0
 8002518:	005a      	lsls	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	085b      	lsrs	r3, r3, #1
 8002520:	18d2      	adds	r2, r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	0019      	movs	r1, r3
 8002528:	0010      	movs	r0, r2
 800252a:	f7fd fded 	bl	8000108 <__udivsi3>
 800252e:	0003      	movs	r3, r0
 8002530:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	2b0f      	cmp	r3, #15
 8002536:	d91c      	bls.n	8002572 <UART_SetConfig+0x1ee>
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	2380      	movs	r3, #128	@ 0x80
 800253c:	025b      	lsls	r3, r3, #9
 800253e:	429a      	cmp	r2, r3
 8002540:	d217      	bcs.n	8002572 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	b29a      	uxth	r2, r3
 8002546:	200e      	movs	r0, #14
 8002548:	183b      	adds	r3, r7, r0
 800254a:	210f      	movs	r1, #15
 800254c:	438a      	bics	r2, r1
 800254e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	085b      	lsrs	r3, r3, #1
 8002554:	b29b      	uxth	r3, r3
 8002556:	2207      	movs	r2, #7
 8002558:	4013      	ands	r3, r2
 800255a:	b299      	uxth	r1, r3
 800255c:	183b      	adds	r3, r7, r0
 800255e:	183a      	adds	r2, r7, r0
 8002560:	8812      	ldrh	r2, [r2, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	183a      	adds	r2, r7, r0
 800256c:	8812      	ldrh	r2, [r2, #0]
 800256e:	60da      	str	r2, [r3, #12]
 8002570:	e060      	b.n	8002634 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002572:	231e      	movs	r3, #30
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	e05b      	b.n	8002634 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800257c:	231f      	movs	r3, #31
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b08      	cmp	r3, #8
 8002584:	d01f      	beq.n	80025c6 <UART_SetConfig+0x242>
 8002586:	dc22      	bgt.n	80025ce <UART_SetConfig+0x24a>
 8002588:	2b04      	cmp	r3, #4
 800258a:	d017      	beq.n	80025bc <UART_SetConfig+0x238>
 800258c:	dc1f      	bgt.n	80025ce <UART_SetConfig+0x24a>
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <UART_SetConfig+0x214>
 8002592:	2b02      	cmp	r3, #2
 8002594:	d005      	beq.n	80025a2 <UART_SetConfig+0x21e>
 8002596:	e01a      	b.n	80025ce <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002598:	f7ff fd86 	bl	80020a8 <HAL_RCC_GetPCLK1Freq>
 800259c:	0003      	movs	r3, r0
 800259e:	61bb      	str	r3, [r7, #24]
        break;
 80025a0:	e01c      	b.n	80025dc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80025a2:	4b33      	ldr	r3, [pc, #204]	@ (8002670 <UART_SetConfig+0x2ec>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	2207      	movs	r2, #7
 80025aa:	4013      	ands	r3, r2
 80025ac:	3301      	adds	r3, #1
 80025ae:	0019      	movs	r1, r3
 80025b0:	4831      	ldr	r0, [pc, #196]	@ (8002678 <UART_SetConfig+0x2f4>)
 80025b2:	f7fd fda9 	bl	8000108 <__udivsi3>
 80025b6:	0003      	movs	r3, r0
 80025b8:	61bb      	str	r3, [r7, #24]
        break;
 80025ba:	e00f      	b.n	80025dc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025bc:	f7ff fd06 	bl	8001fcc <HAL_RCC_GetSysClockFreq>
 80025c0:	0003      	movs	r3, r0
 80025c2:	61bb      	str	r3, [r7, #24]
        break;
 80025c4:	e00a      	b.n	80025dc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025c6:	2380      	movs	r3, #128	@ 0x80
 80025c8:	021b      	lsls	r3, r3, #8
 80025ca:	61bb      	str	r3, [r7, #24]
        break;
 80025cc:	e006      	b.n	80025dc <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80025d2:	231e      	movs	r3, #30
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
        break;
 80025da:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d028      	beq.n	8002634 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025e6:	4b25      	ldr	r3, [pc, #148]	@ (800267c <UART_SetConfig+0x2f8>)
 80025e8:	0052      	lsls	r2, r2, #1
 80025ea:	5ad3      	ldrh	r3, [r2, r3]
 80025ec:	0019      	movs	r1, r3
 80025ee:	69b8      	ldr	r0, [r7, #24]
 80025f0:	f7fd fd8a 	bl	8000108 <__udivsi3>
 80025f4:	0003      	movs	r3, r0
 80025f6:	001a      	movs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	085b      	lsrs	r3, r3, #1
 80025fe:	18d2      	adds	r2, r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	0019      	movs	r1, r3
 8002606:	0010      	movs	r0, r2
 8002608:	f7fd fd7e 	bl	8000108 <__udivsi3>
 800260c:	0003      	movs	r3, r0
 800260e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	2b0f      	cmp	r3, #15
 8002614:	d90a      	bls.n	800262c <UART_SetConfig+0x2a8>
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	2380      	movs	r3, #128	@ 0x80
 800261a:	025b      	lsls	r3, r3, #9
 800261c:	429a      	cmp	r2, r3
 800261e:	d205      	bcs.n	800262c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	b29a      	uxth	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	e003      	b.n	8002634 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800262c:	231e      	movs	r3, #30
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	226a      	movs	r2, #106	@ 0x6a
 8002638:	2101      	movs	r1, #1
 800263a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2268      	movs	r2, #104	@ 0x68
 8002640:	2101      	movs	r1, #1
 8002642:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002650:	231e      	movs	r3, #30
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	781b      	ldrb	r3, [r3, #0]
}
 8002656:	0018      	movs	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	b008      	add	sp, #32
 800265c:	bd80      	pop	{r7, pc}
 800265e:	46c0      	nop			@ (mov r8, r8)
 8002660:	cfff69f3 	.word	0xcfff69f3
 8002664:	ffffcfff 	.word	0xffffcfff
 8002668:	11fff4ff 	.word	0x11fff4ff
 800266c:	40013800 	.word	0x40013800
 8002670:	40021000 	.word	0x40021000
 8002674:	40004400 	.word	0x40004400
 8002678:	02dc6c00 	.word	0x02dc6c00
 800267c:	08003b54 	.word	0x08003b54

08002680 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268c:	2208      	movs	r2, #8
 800268e:	4013      	ands	r3, r2
 8002690:	d00b      	beq.n	80026aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	4a4a      	ldr	r2, [pc, #296]	@ (80027c4 <UART_AdvFeatureConfig+0x144>)
 800269a:	4013      	ands	r3, r2
 800269c:	0019      	movs	r1, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ae:	2201      	movs	r2, #1
 80026b0:	4013      	ands	r3, r2
 80026b2:	d00b      	beq.n	80026cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4a43      	ldr	r2, [pc, #268]	@ (80027c8 <UART_AdvFeatureConfig+0x148>)
 80026bc:	4013      	ands	r3, r2
 80026be:	0019      	movs	r1, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d0:	2202      	movs	r2, #2
 80026d2:	4013      	ands	r3, r2
 80026d4:	d00b      	beq.n	80026ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4a3b      	ldr	r2, [pc, #236]	@ (80027cc <UART_AdvFeatureConfig+0x14c>)
 80026de:	4013      	ands	r3, r2
 80026e0:	0019      	movs	r1, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f2:	2204      	movs	r2, #4
 80026f4:	4013      	ands	r3, r2
 80026f6:	d00b      	beq.n	8002710 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4a34      	ldr	r2, [pc, #208]	@ (80027d0 <UART_AdvFeatureConfig+0x150>)
 8002700:	4013      	ands	r3, r2
 8002702:	0019      	movs	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002714:	2210      	movs	r2, #16
 8002716:	4013      	ands	r3, r2
 8002718:	d00b      	beq.n	8002732 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	4a2c      	ldr	r2, [pc, #176]	@ (80027d4 <UART_AdvFeatureConfig+0x154>)
 8002722:	4013      	ands	r3, r2
 8002724:	0019      	movs	r1, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002736:	2220      	movs	r2, #32
 8002738:	4013      	ands	r3, r2
 800273a:	d00b      	beq.n	8002754 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	4a25      	ldr	r2, [pc, #148]	@ (80027d8 <UART_AdvFeatureConfig+0x158>)
 8002744:	4013      	ands	r3, r2
 8002746:	0019      	movs	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002758:	2240      	movs	r2, #64	@ 0x40
 800275a:	4013      	ands	r3, r2
 800275c:	d01d      	beq.n	800279a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	4a1d      	ldr	r2, [pc, #116]	@ (80027dc <UART_AdvFeatureConfig+0x15c>)
 8002766:	4013      	ands	r3, r2
 8002768:	0019      	movs	r1, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800277a:	2380      	movs	r3, #128	@ 0x80
 800277c:	035b      	lsls	r3, r3, #13
 800277e:	429a      	cmp	r2, r3
 8002780:	d10b      	bne.n	800279a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	4a15      	ldr	r2, [pc, #84]	@ (80027e0 <UART_AdvFeatureConfig+0x160>)
 800278a:	4013      	ands	r3, r2
 800278c:	0019      	movs	r1, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279e:	2280      	movs	r2, #128	@ 0x80
 80027a0:	4013      	ands	r3, r2
 80027a2:	d00b      	beq.n	80027bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4a0e      	ldr	r2, [pc, #56]	@ (80027e4 <UART_AdvFeatureConfig+0x164>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	0019      	movs	r1, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	605a      	str	r2, [r3, #4]
  }
}
 80027bc:	46c0      	nop			@ (mov r8, r8)
 80027be:	46bd      	mov	sp, r7
 80027c0:	b002      	add	sp, #8
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	ffff7fff 	.word	0xffff7fff
 80027c8:	fffdffff 	.word	0xfffdffff
 80027cc:	fffeffff 	.word	0xfffeffff
 80027d0:	fffbffff 	.word	0xfffbffff
 80027d4:	ffffefff 	.word	0xffffefff
 80027d8:	ffffdfff 	.word	0xffffdfff
 80027dc:	ffefffff 	.word	0xffefffff
 80027e0:	ff9fffff 	.word	0xff9fffff
 80027e4:	fff7ffff 	.word	0xfff7ffff

080027e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b092      	sub	sp, #72	@ 0x48
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2290      	movs	r2, #144	@ 0x90
 80027f4:	2100      	movs	r1, #0
 80027f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80027f8:	f7fe fa3a 	bl	8000c70 <HAL_GetTick>
 80027fc:	0003      	movs	r3, r0
 80027fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2208      	movs	r2, #8
 8002808:	4013      	ands	r3, r2
 800280a:	2b08      	cmp	r3, #8
 800280c:	d12d      	bne.n	800286a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800280e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002810:	2280      	movs	r2, #128	@ 0x80
 8002812:	0391      	lsls	r1, r2, #14
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	4a47      	ldr	r2, [pc, #284]	@ (8002934 <UART_CheckIdleState+0x14c>)
 8002818:	9200      	str	r2, [sp, #0]
 800281a:	2200      	movs	r2, #0
 800281c:	f000 f88e 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 8002820:	1e03      	subs	r3, r0, #0
 8002822:	d022      	beq.n	800286a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002824:	f3ef 8310 	mrs	r3, PRIMASK
 8002828:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800282a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800282c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800282e:	2301      	movs	r3, #1
 8002830:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002834:	f383 8810 	msr	PRIMASK, r3
}
 8002838:	46c0      	nop			@ (mov r8, r8)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2180      	movs	r1, #128	@ 0x80
 8002846:	438a      	bics	r2, r1
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800284c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800284e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002850:	f383 8810 	msr	PRIMASK, r3
}
 8002854:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2288      	movs	r2, #136	@ 0x88
 800285a:	2120      	movs	r1, #32
 800285c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2284      	movs	r2, #132	@ 0x84
 8002862:	2100      	movs	r1, #0
 8002864:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e060      	b.n	800292c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2204      	movs	r2, #4
 8002872:	4013      	ands	r3, r2
 8002874:	2b04      	cmp	r3, #4
 8002876:	d146      	bne.n	8002906 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800287a:	2280      	movs	r2, #128	@ 0x80
 800287c:	03d1      	lsls	r1, r2, #15
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4a2c      	ldr	r2, [pc, #176]	@ (8002934 <UART_CheckIdleState+0x14c>)
 8002882:	9200      	str	r2, [sp, #0]
 8002884:	2200      	movs	r2, #0
 8002886:	f000 f859 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 800288a:	1e03      	subs	r3, r0, #0
 800288c:	d03b      	beq.n	8002906 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800288e:	f3ef 8310 	mrs	r3, PRIMASK
 8002892:	60fb      	str	r3, [r7, #12]
  return(result);
 8002894:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002896:	637b      	str	r3, [r7, #52]	@ 0x34
 8002898:	2301      	movs	r3, #1
 800289a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f383 8810 	msr	PRIMASK, r3
}
 80028a2:	46c0      	nop			@ (mov r8, r8)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4922      	ldr	r1, [pc, #136]	@ (8002938 <UART_CheckIdleState+0x150>)
 80028b0:	400a      	ands	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f383 8810 	msr	PRIMASK, r3
}
 80028be:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80028c0:	f3ef 8310 	mrs	r3, PRIMASK
 80028c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80028c6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80028ca:	2301      	movs	r3, #1
 80028cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f383 8810 	msr	PRIMASK, r3
}
 80028d4:	46c0      	nop			@ (mov r8, r8)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2101      	movs	r1, #1
 80028e2:	438a      	bics	r2, r1
 80028e4:	609a      	str	r2, [r3, #8]
 80028e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	f383 8810 	msr	PRIMASK, r3
}
 80028f0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	228c      	movs	r2, #140	@ 0x8c
 80028f6:	2120      	movs	r1, #32
 80028f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2284      	movs	r2, #132	@ 0x84
 80028fe:	2100      	movs	r1, #0
 8002900:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e012      	b.n	800292c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2288      	movs	r2, #136	@ 0x88
 800290a:	2120      	movs	r1, #32
 800290c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	228c      	movs	r2, #140	@ 0x8c
 8002912:	2120      	movs	r1, #32
 8002914:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2284      	movs	r2, #132	@ 0x84
 8002926:	2100      	movs	r1, #0
 8002928:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	0018      	movs	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	b010      	add	sp, #64	@ 0x40
 8002932:	bd80      	pop	{r7, pc}
 8002934:	01ffffff 	.word	0x01ffffff
 8002938:	fffffedf 	.word	0xfffffedf

0800293c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	1dfb      	adds	r3, r7, #7
 800294a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800294c:	e051      	b.n	80029f2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	3301      	adds	r3, #1
 8002952:	d04e      	beq.n	80029f2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002954:	f7fe f98c 	bl	8000c70 <HAL_GetTick>
 8002958:	0002      	movs	r2, r0
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	429a      	cmp	r2, r3
 8002962:	d302      	bcc.n	800296a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e051      	b.n	8002a12 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2204      	movs	r2, #4
 8002976:	4013      	ands	r3, r2
 8002978:	d03b      	beq.n	80029f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b80      	cmp	r3, #128	@ 0x80
 800297e:	d038      	beq.n	80029f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b40      	cmp	r3, #64	@ 0x40
 8002984:	d035      	beq.n	80029f2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	2208      	movs	r2, #8
 800298e:	4013      	ands	r3, r2
 8002990:	2b08      	cmp	r3, #8
 8002992:	d111      	bne.n	80029b8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2208      	movs	r2, #8
 800299a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	0018      	movs	r0, r3
 80029a0:	f000 f960 	bl	8002c64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2290      	movs	r2, #144	@ 0x90
 80029a8:	2108      	movs	r1, #8
 80029aa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2284      	movs	r2, #132	@ 0x84
 80029b0:	2100      	movs	r1, #0
 80029b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e02c      	b.n	8002a12 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	69da      	ldr	r2, [r3, #28]
 80029be:	2380      	movs	r3, #128	@ 0x80
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	401a      	ands	r2, r3
 80029c4:	2380      	movs	r3, #128	@ 0x80
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d112      	bne.n	80029f2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2280      	movs	r2, #128	@ 0x80
 80029d2:	0112      	lsls	r2, r2, #4
 80029d4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	0018      	movs	r0, r3
 80029da:	f000 f943 	bl	8002c64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2290      	movs	r2, #144	@ 0x90
 80029e2:	2120      	movs	r1, #32
 80029e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2284      	movs	r2, #132	@ 0x84
 80029ea:	2100      	movs	r1, #0
 80029ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e00f      	b.n	8002a12 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	4013      	ands	r3, r2
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	425a      	negs	r2, r3
 8002a02:	4153      	adcs	r3, r2
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	001a      	movs	r2, r3
 8002a08:	1dfb      	adds	r3, r7, #7
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d09e      	beq.n	800294e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	0018      	movs	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b004      	add	sp, #16
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b098      	sub	sp, #96	@ 0x60
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	1dbb      	adds	r3, r7, #6
 8002a28:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1dba      	adds	r2, r7, #6
 8002a34:	215c      	movs	r1, #92	@ 0x5c
 8002a36:	8812      	ldrh	r2, [r2, #0]
 8002a38:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1dba      	adds	r2, r7, #6
 8002a3e:	215e      	movs	r1, #94	@ 0x5e
 8002a40:	8812      	ldrh	r2, [r2, #0]
 8002a42:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	2380      	movs	r3, #128	@ 0x80
 8002a50:	015b      	lsls	r3, r3, #5
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d10d      	bne.n	8002a72 <UART_Start_Receive_IT+0x56>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d104      	bne.n	8002a68 <UART_Start_Receive_IT+0x4c>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2260      	movs	r2, #96	@ 0x60
 8002a62:	497b      	ldr	r1, [pc, #492]	@ (8002c50 <UART_Start_Receive_IT+0x234>)
 8002a64:	5299      	strh	r1, [r3, r2]
 8002a66:	e02e      	b.n	8002ac6 <UART_Start_Receive_IT+0xaa>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2260      	movs	r2, #96	@ 0x60
 8002a6c:	21ff      	movs	r1, #255	@ 0xff
 8002a6e:	5299      	strh	r1, [r3, r2]
 8002a70:	e029      	b.n	8002ac6 <UART_Start_Receive_IT+0xaa>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10d      	bne.n	8002a96 <UART_Start_Receive_IT+0x7a>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d104      	bne.n	8002a8c <UART_Start_Receive_IT+0x70>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2260      	movs	r2, #96	@ 0x60
 8002a86:	21ff      	movs	r1, #255	@ 0xff
 8002a88:	5299      	strh	r1, [r3, r2]
 8002a8a:	e01c      	b.n	8002ac6 <UART_Start_Receive_IT+0xaa>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2260      	movs	r2, #96	@ 0x60
 8002a90:	217f      	movs	r1, #127	@ 0x7f
 8002a92:	5299      	strh	r1, [r3, r2]
 8002a94:	e017      	b.n	8002ac6 <UART_Start_Receive_IT+0xaa>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	055b      	lsls	r3, r3, #21
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d10d      	bne.n	8002abe <UART_Start_Receive_IT+0xa2>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d104      	bne.n	8002ab4 <UART_Start_Receive_IT+0x98>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2260      	movs	r2, #96	@ 0x60
 8002aae:	217f      	movs	r1, #127	@ 0x7f
 8002ab0:	5299      	strh	r1, [r3, r2]
 8002ab2:	e008      	b.n	8002ac6 <UART_Start_Receive_IT+0xaa>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2260      	movs	r2, #96	@ 0x60
 8002ab8:	213f      	movs	r1, #63	@ 0x3f
 8002aba:	5299      	strh	r1, [r3, r2]
 8002abc:	e003      	b.n	8002ac6 <UART_Start_Receive_IT+0xaa>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2260      	movs	r2, #96	@ 0x60
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2290      	movs	r2, #144	@ 0x90
 8002aca:	2100      	movs	r1, #0
 8002acc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	228c      	movs	r2, #140	@ 0x8c
 8002ad2:	2122      	movs	r1, #34	@ 0x22
 8002ad4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8002ada:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8002adc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ade:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ae6:	f383 8810 	msr	PRIMASK, r3
}
 8002aea:	46c0      	nop			@ (mov r8, r8)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2101      	movs	r1, #1
 8002af8:	430a      	orrs	r2, r1
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002afe:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b02:	f383 8810 	msr	PRIMASK, r3
}
 8002b06:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002b0c:	2380      	movs	r3, #128	@ 0x80
 8002b0e:	059b      	lsls	r3, r3, #22
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d150      	bne.n	8002bb6 <UART_Start_Receive_IT+0x19a>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2268      	movs	r2, #104	@ 0x68
 8002b18:	5a9b      	ldrh	r3, [r3, r2]
 8002b1a:	1dba      	adds	r2, r7, #6
 8002b1c:	8812      	ldrh	r2, [r2, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d349      	bcc.n	8002bb6 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	2380      	movs	r3, #128	@ 0x80
 8002b28:	015b      	lsls	r3, r3, #5
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d107      	bne.n	8002b3e <UART_Start_Receive_IT+0x122>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d103      	bne.n	8002b3e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4a46      	ldr	r2, [pc, #280]	@ (8002c54 <UART_Start_Receive_IT+0x238>)
 8002b3a:	675a      	str	r2, [r3, #116]	@ 0x74
 8002b3c:	e002      	b.n	8002b44 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4a45      	ldr	r2, [pc, #276]	@ (8002c58 <UART_Start_Receive_IT+0x23c>)
 8002b42:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d019      	beq.n	8002b80 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b50:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8002b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b56:	2301      	movs	r3, #1
 8002b58:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b5c:	f383 8810 	msr	PRIMASK, r3
}
 8002b60:	46c0      	nop			@ (mov r8, r8)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2180      	movs	r1, #128	@ 0x80
 8002b6e:	0049      	lsls	r1, r1, #1
 8002b70:	430a      	orrs	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b7a:	f383 8810 	msr	PRIMASK, r3
}
 8002b7e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b80:	f3ef 8310 	mrs	r3, PRIMASK
 8002b84:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002b88:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b90:	f383 8810 	msr	PRIMASK, r3
}
 8002b94:	46c0      	nop			@ (mov r8, r8)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2180      	movs	r1, #128	@ 0x80
 8002ba2:	0549      	lsls	r1, r1, #21
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	609a      	str	r2, [r3, #8]
 8002ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002baa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bae:	f383 8810 	msr	PRIMASK, r3
}
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	e047      	b.n	8002c46 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	2380      	movs	r3, #128	@ 0x80
 8002bbc:	015b      	lsls	r3, r3, #5
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d107      	bne.n	8002bd2 <UART_Start_Receive_IT+0x1b6>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d103      	bne.n	8002bd2 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4a23      	ldr	r2, [pc, #140]	@ (8002c5c <UART_Start_Receive_IT+0x240>)
 8002bce:	675a      	str	r2, [r3, #116]	@ 0x74
 8002bd0:	e002      	b.n	8002bd8 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4a22      	ldr	r2, [pc, #136]	@ (8002c60 <UART_Start_Receive_IT+0x244>)
 8002bd6:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d019      	beq.n	8002c14 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002be0:	f3ef 8310 	mrs	r3, PRIMASK
 8002be4:	61fb      	str	r3, [r7, #28]
  return(result);
 8002be6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8002be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bea:	2301      	movs	r3, #1
 8002bec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	f383 8810 	msr	PRIMASK, r3
}
 8002bf4:	46c0      	nop			@ (mov r8, r8)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2190      	movs	r1, #144	@ 0x90
 8002c02:	0049      	lsls	r1, r1, #1
 8002c04:	430a      	orrs	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	f383 8810 	msr	PRIMASK, r3
}
 8002c12:	e018      	b.n	8002c46 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c14:	f3ef 8310 	mrs	r3, PRIMASK
 8002c18:	613b      	str	r3, [r7, #16]
  return(result);
 8002c1a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002c1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c1e:	2301      	movs	r3, #1
 8002c20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f383 8810 	msr	PRIMASK, r3
}
 8002c28:	46c0      	nop			@ (mov r8, r8)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2120      	movs	r1, #32
 8002c36:	430a      	orrs	r2, r1
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	f383 8810 	msr	PRIMASK, r3
}
 8002c44:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	0018      	movs	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b018      	add	sp, #96	@ 0x60
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	000001ff 	.word	0x000001ff
 8002c54:	080033d5 	.word	0x080033d5
 8002c58:	080030a1 	.word	0x080030a1
 8002c5c:	08002ee9 	.word	0x08002ee9
 8002c60:	08002d31 	.word	0x08002d31

08002c64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08e      	sub	sp, #56	@ 0x38
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c70:	617b      	str	r3, [r7, #20]
  return(result);
 8002c72:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c76:	2301      	movs	r3, #1
 8002c78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	f383 8810 	msr	PRIMASK, r3
}
 8002c80:	46c0      	nop			@ (mov r8, r8)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4926      	ldr	r1, [pc, #152]	@ (8002d28 <UART_EndRxTransfer+0xc4>)
 8002c8e:	400a      	ands	r2, r1
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	f383 8810 	msr	PRIMASK, r3
}
 8002c9c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c9e:	f3ef 8310 	mrs	r3, PRIMASK
 8002ca2:	623b      	str	r3, [r7, #32]
  return(result);
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002ca6:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ca8:	2301      	movs	r3, #1
 8002caa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cae:	f383 8810 	msr	PRIMASK, r3
}
 8002cb2:	46c0      	nop			@ (mov r8, r8)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	491b      	ldr	r1, [pc, #108]	@ (8002d2c <UART_EndRxTransfer+0xc8>)
 8002cc0:	400a      	ands	r2, r1
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cca:	f383 8810 	msr	PRIMASK, r3
}
 8002cce:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d118      	bne.n	8002d0a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cdc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002cde:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f383 8810 	msr	PRIMASK, r3
}
 8002cec:	46c0      	nop			@ (mov r8, r8)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2110      	movs	r1, #16
 8002cfa:	438a      	bics	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f383 8810 	msr	PRIMASK, r3
}
 8002d08:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	228c      	movs	r2, #140	@ 0x8c
 8002d0e:	2120      	movs	r1, #32
 8002d10:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b00e      	add	sp, #56	@ 0x38
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	fffffedf 	.word	0xfffffedf
 8002d2c:	effffffe 	.word	0xeffffffe

08002d30 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b094      	sub	sp, #80	@ 0x50
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002d38:	204e      	movs	r0, #78	@ 0x4e
 8002d3a:	183b      	adds	r3, r7, r0
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	2160      	movs	r1, #96	@ 0x60
 8002d40:	5a52      	ldrh	r2, [r2, r1]
 8002d42:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	228c      	movs	r2, #140	@ 0x8c
 8002d48:	589b      	ldr	r3, [r3, r2]
 8002d4a:	2b22      	cmp	r3, #34	@ 0x22
 8002d4c:	d000      	beq.n	8002d50 <UART_RxISR_8BIT+0x20>
 8002d4e:	e0ba      	b.n	8002ec6 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d56:	214c      	movs	r1, #76	@ 0x4c
 8002d58:	187b      	adds	r3, r7, r1
 8002d5a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002d5c:	187b      	adds	r3, r7, r1
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	183b      	adds	r3, r7, r0
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	b2d9      	uxtb	r1, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6c:	400a      	ands	r2, r1
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	225e      	movs	r2, #94	@ 0x5e
 8002d80:	5a9b      	ldrh	r3, [r3, r2]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b299      	uxth	r1, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	225e      	movs	r2, #94	@ 0x5e
 8002d8c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	225e      	movs	r2, #94	@ 0x5e
 8002d92:	5a9b      	ldrh	r3, [r3, r2]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d000      	beq.n	8002d9c <UART_RxISR_8BIT+0x6c>
 8002d9a:	e09c      	b.n	8002ed6 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002da0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002da4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002da6:	2301      	movs	r3, #1
 8002da8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dac:	f383 8810 	msr	PRIMASK, r3
}
 8002db0:	46c0      	nop			@ (mov r8, r8)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4948      	ldr	r1, [pc, #288]	@ (8002ee0 <UART_RxISR_8BIT+0x1b0>)
 8002dbe:	400a      	ands	r2, r1
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc8:	f383 8810 	msr	PRIMASK, r3
}
 8002dcc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002dce:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dd8:	2301      	movs	r3, #1
 8002dda:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dde:	f383 8810 	msr	PRIMASK, r3
}
 8002de2:	46c0      	nop			@ (mov r8, r8)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2101      	movs	r1, #1
 8002df0:	438a      	bics	r2, r1
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002df6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dfa:	f383 8810 	msr	PRIMASK, r3
}
 8002dfe:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	228c      	movs	r2, #140	@ 0x8c
 8002e04:	2120      	movs	r1, #32
 8002e06:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	2380      	movs	r3, #128	@ 0x80
 8002e1c:	041b      	lsls	r3, r3, #16
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d018      	beq.n	8002e54 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e22:	f3ef 8310 	mrs	r3, PRIMASK
 8002e26:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e28:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f383 8810 	msr	PRIMASK, r3
}
 8002e36:	46c0      	nop			@ (mov r8, r8)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4928      	ldr	r1, [pc, #160]	@ (8002ee4 <UART_RxISR_8BIT+0x1b4>)
 8002e44:	400a      	ands	r2, r1
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	f383 8810 	msr	PRIMASK, r3
}
 8002e52:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d12f      	bne.n	8002ebc <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e62:	f3ef 8310 	mrs	r3, PRIMASK
 8002e66:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e68:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	f383 8810 	msr	PRIMASK, r3
}
 8002e76:	46c0      	nop			@ (mov r8, r8)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2110      	movs	r1, #16
 8002e84:	438a      	bics	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f383 8810 	msr	PRIMASK, r3
}
 8002e92:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	2210      	movs	r2, #16
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b10      	cmp	r3, #16
 8002ea0:	d103      	bne.n	8002eaa <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2210      	movs	r2, #16
 8002ea8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	225c      	movs	r2, #92	@ 0x5c
 8002eae:	5a9a      	ldrh	r2, [r3, r2]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	0011      	movs	r1, r2
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f7ff fa5a 	bl	800236e <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002eba:	e00c      	b.n	8002ed6 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f7fd fc9c 	bl	80007fc <HAL_UART_RxCpltCallback>
}
 8002ec4:	e007      	b.n	8002ed6 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699a      	ldr	r2, [r3, #24]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2108      	movs	r1, #8
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	619a      	str	r2, [r3, #24]
}
 8002ed6:	46c0      	nop			@ (mov r8, r8)
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b014      	add	sp, #80	@ 0x50
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			@ (mov r8, r8)
 8002ee0:	fffffedf 	.word	0xfffffedf
 8002ee4:	fbffffff 	.word	0xfbffffff

08002ee8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b094      	sub	sp, #80	@ 0x50
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002ef0:	204e      	movs	r0, #78	@ 0x4e
 8002ef2:	183b      	adds	r3, r7, r0
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	2160      	movs	r1, #96	@ 0x60
 8002ef8:	5a52      	ldrh	r2, [r2, r1]
 8002efa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	228c      	movs	r2, #140	@ 0x8c
 8002f00:	589b      	ldr	r3, [r3, r2]
 8002f02:	2b22      	cmp	r3, #34	@ 0x22
 8002f04:	d000      	beq.n	8002f08 <UART_RxISR_16BIT+0x20>
 8002f06:	e0ba      	b.n	800307e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f0e:	214c      	movs	r1, #76	@ 0x4c
 8002f10:	187b      	adds	r3, r7, r1
 8002f12:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f18:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8002f1a:	187b      	adds	r3, r7, r1
 8002f1c:	183a      	adds	r2, r7, r0
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	8812      	ldrh	r2, [r2, #0]
 8002f22:	4013      	ands	r3, r2
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f28:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f2e:	1c9a      	adds	r2, r3, #2
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	225e      	movs	r2, #94	@ 0x5e
 8002f38:	5a9b      	ldrh	r3, [r3, r2]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b299      	uxth	r1, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	225e      	movs	r2, #94	@ 0x5e
 8002f44:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	225e      	movs	r2, #94	@ 0x5e
 8002f4a:	5a9b      	ldrh	r3, [r3, r2]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d000      	beq.n	8002f54 <UART_RxISR_16BIT+0x6c>
 8002f52:	e09c      	b.n	800308e <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f54:	f3ef 8310 	mrs	r3, PRIMASK
 8002f58:	623b      	str	r3, [r7, #32]
  return(result);
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f5e:	2301      	movs	r3, #1
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	f383 8810 	msr	PRIMASK, r3
}
 8002f68:	46c0      	nop			@ (mov r8, r8)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4948      	ldr	r1, [pc, #288]	@ (8003098 <UART_RxISR_16BIT+0x1b0>)
 8002f76:	400a      	ands	r2, r1
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f80:	f383 8810 	msr	PRIMASK, r3
}
 8002f84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f86:	f3ef 8310 	mrs	r3, PRIMASK
 8002f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8002f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f90:	2301      	movs	r3, #1
 8002f92:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f96:	f383 8810 	msr	PRIMASK, r3
}
 8002f9a:	46c0      	nop			@ (mov r8, r8)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	438a      	bics	r2, r1
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fae:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fb2:	f383 8810 	msr	PRIMASK, r3
}
 8002fb6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	228c      	movs	r2, #140	@ 0x8c
 8002fbc:	2120      	movs	r1, #32
 8002fbe:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	2380      	movs	r3, #128	@ 0x80
 8002fd4:	041b      	lsls	r3, r3, #16
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d018      	beq.n	800300c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002fda:	f3ef 8310 	mrs	r3, PRIMASK
 8002fde:	617b      	str	r3, [r7, #20]
  return(result);
 8002fe0:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	f383 8810 	msr	PRIMASK, r3
}
 8002fee:	46c0      	nop			@ (mov r8, r8)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4928      	ldr	r1, [pc, #160]	@ (800309c <UART_RxISR_16BIT+0x1b4>)
 8002ffc:	400a      	ands	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003002:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f383 8810 	msr	PRIMASK, r3
}
 800300a:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d12f      	bne.n	8003074 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800301a:	f3ef 8310 	mrs	r3, PRIMASK
 800301e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003020:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003022:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003024:	2301      	movs	r3, #1
 8003026:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f383 8810 	msr	PRIMASK, r3
}
 800302e:	46c0      	nop			@ (mov r8, r8)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2110      	movs	r1, #16
 800303c:	438a      	bics	r2, r1
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003042:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f383 8810 	msr	PRIMASK, r3
}
 800304a:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	2210      	movs	r2, #16
 8003054:	4013      	ands	r3, r2
 8003056:	2b10      	cmp	r3, #16
 8003058:	d103      	bne.n	8003062 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2210      	movs	r2, #16
 8003060:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	225c      	movs	r2, #92	@ 0x5c
 8003066:	5a9a      	ldrh	r2, [r3, r2]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	0011      	movs	r1, r2
 800306c:	0018      	movs	r0, r3
 800306e:	f7ff f97e 	bl	800236e <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003072:	e00c      	b.n	800308e <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	0018      	movs	r0, r3
 8003078:	f7fd fbc0 	bl	80007fc <HAL_UART_RxCpltCallback>
}
 800307c:	e007      	b.n	800308e <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699a      	ldr	r2, [r3, #24]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2108      	movs	r1, #8
 800308a:	430a      	orrs	r2, r1
 800308c:	619a      	str	r2, [r3, #24]
}
 800308e:	46c0      	nop			@ (mov r8, r8)
 8003090:	46bd      	mov	sp, r7
 8003092:	b014      	add	sp, #80	@ 0x50
 8003094:	bd80      	pop	{r7, pc}
 8003096:	46c0      	nop			@ (mov r8, r8)
 8003098:	fffffedf 	.word	0xfffffedf
 800309c:	fbffffff 	.word	0xfbffffff

080030a0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b0a0      	sub	sp, #128	@ 0x80
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80030a8:	237a      	movs	r3, #122	@ 0x7a
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	2160      	movs	r1, #96	@ 0x60
 80030b0:	5a52      	ldrh	r2, [r2, r1]
 80030b2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	228c      	movs	r2, #140	@ 0x8c
 80030d0:	589b      	ldr	r3, [r3, r2]
 80030d2:	2b22      	cmp	r3, #34	@ 0x22
 80030d4:	d000      	beq.n	80030d8 <UART_RxISR_8BIT_FIFOEN+0x38>
 80030d6:	e166      	b.n	80033a6 <UART_RxISR_8BIT_FIFOEN+0x306>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80030d8:	236e      	movs	r3, #110	@ 0x6e
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	2168      	movs	r1, #104	@ 0x68
 80030e0:	5a52      	ldrh	r2, [r2, r1]
 80030e2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80030e4:	e10d      	b.n	8003302 <UART_RxISR_8BIT_FIFOEN+0x262>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030ec:	216c      	movs	r1, #108	@ 0x6c
 80030ee:	187b      	adds	r3, r7, r1
 80030f0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80030f2:	187b      	adds	r3, r7, r1
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	237a      	movs	r3, #122	@ 0x7a
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	b2d9      	uxtb	r1, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003104:	400a      	ands	r2, r1
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	225e      	movs	r2, #94	@ 0x5e
 8003118:	5a9b      	ldrh	r3, [r3, r2]
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b299      	uxth	r1, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	225e      	movs	r2, #94	@ 0x5e
 8003124:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800312e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003130:	2207      	movs	r2, #7
 8003132:	4013      	ands	r3, r2
 8003134:	d049      	beq.n	80031ca <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003136:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003138:	2201      	movs	r2, #1
 800313a:	4013      	ands	r3, r2
 800313c:	d010      	beq.n	8003160 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800313e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003140:	2380      	movs	r3, #128	@ 0x80
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	4013      	ands	r3, r2
 8003146:	d00b      	beq.n	8003160 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2201      	movs	r2, #1
 800314e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2290      	movs	r2, #144	@ 0x90
 8003154:	589b      	ldr	r3, [r3, r2]
 8003156:	2201      	movs	r2, #1
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2190      	movs	r1, #144	@ 0x90
 800315e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003160:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003162:	2202      	movs	r2, #2
 8003164:	4013      	ands	r3, r2
 8003166:	d00f      	beq.n	8003188 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003168:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800316a:	2201      	movs	r2, #1
 800316c:	4013      	ands	r3, r2
 800316e:	d00b      	beq.n	8003188 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2202      	movs	r2, #2
 8003176:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2290      	movs	r2, #144	@ 0x90
 800317c:	589b      	ldr	r3, [r3, r2]
 800317e:	2204      	movs	r2, #4
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2190      	movs	r1, #144	@ 0x90
 8003186:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003188:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800318a:	2204      	movs	r2, #4
 800318c:	4013      	ands	r3, r2
 800318e:	d00f      	beq.n	80031b0 <UART_RxISR_8BIT_FIFOEN+0x110>
 8003190:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003192:	2201      	movs	r2, #1
 8003194:	4013      	ands	r3, r2
 8003196:	d00b      	beq.n	80031b0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2204      	movs	r2, #4
 800319e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2290      	movs	r2, #144	@ 0x90
 80031a4:	589b      	ldr	r3, [r3, r2]
 80031a6:	2202      	movs	r2, #2
 80031a8:	431a      	orrs	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2190      	movs	r1, #144	@ 0x90
 80031ae:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2290      	movs	r2, #144	@ 0x90
 80031b4:	589b      	ldr	r3, [r3, r2]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d007      	beq.n	80031ca <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	0018      	movs	r0, r3
 80031be:	f7ff f8ce 	bl	800235e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2290      	movs	r2, #144	@ 0x90
 80031c6:	2100      	movs	r1, #0
 80031c8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	225e      	movs	r2, #94	@ 0x5e
 80031ce:	5a9b      	ldrh	r3, [r3, r2]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d000      	beq.n	80031d8 <UART_RxISR_8BIT_FIFOEN+0x138>
 80031d6:	e094      	b.n	8003302 <UART_RxISR_8BIT_FIFOEN+0x262>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031d8:	f3ef 8310 	mrs	r3, PRIMASK
 80031dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 80031de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031e2:	2301      	movs	r3, #1
 80031e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031e8:	f383 8810 	msr	PRIMASK, r3
}
 80031ec:	46c0      	nop			@ (mov r8, r8)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4971      	ldr	r1, [pc, #452]	@ (80033c0 <UART_RxISR_8BIT_FIFOEN+0x320>)
 80031fa:	400a      	ands	r2, r1
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003200:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003204:	f383 8810 	msr	PRIMASK, r3
}
 8003208:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800320a:	f3ef 8310 	mrs	r3, PRIMASK
 800320e:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8003210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003212:	667b      	str	r3, [r7, #100]	@ 0x64
 8003214:	2301      	movs	r3, #1
 8003216:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003218:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800321a:	f383 8810 	msr	PRIMASK, r3
}
 800321e:	46c0      	nop			@ (mov r8, r8)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4966      	ldr	r1, [pc, #408]	@ (80033c4 <UART_RxISR_8BIT_FIFOEN+0x324>)
 800322c:	400a      	ands	r2, r1
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003232:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003236:	f383 8810 	msr	PRIMASK, r3
}
 800323a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	228c      	movs	r2, #140	@ 0x8c
 8003240:	2120      	movs	r1, #32
 8003242:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	2380      	movs	r3, #128	@ 0x80
 8003258:	041b      	lsls	r3, r3, #16
 800325a:	4013      	ands	r3, r2
 800325c:	d018      	beq.n	8003290 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800325e:	f3ef 8310 	mrs	r3, PRIMASK
 8003262:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003266:	663b      	str	r3, [r7, #96]	@ 0x60
 8003268:	2301      	movs	r3, #1
 800326a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800326c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800326e:	f383 8810 	msr	PRIMASK, r3
}
 8003272:	46c0      	nop			@ (mov r8, r8)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4952      	ldr	r1, [pc, #328]	@ (80033c8 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8003280:	400a      	ands	r2, r1
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003286:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800328a:	f383 8810 	msr	PRIMASK, r3
}
 800328e:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003294:	2b01      	cmp	r3, #1
 8003296:	d12f      	bne.n	80032f8 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800329e:	f3ef 8310 	mrs	r3, PRIMASK
 80032a2:	623b      	str	r3, [r7, #32]
  return(result);
 80032a4:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032a8:	2301      	movs	r3, #1
 80032aa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ae:	f383 8810 	msr	PRIMASK, r3
}
 80032b2:	46c0      	nop			@ (mov r8, r8)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2110      	movs	r1, #16
 80032c0:	438a      	bics	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ca:	f383 8810 	msr	PRIMASK, r3
}
 80032ce:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	2210      	movs	r2, #16
 80032d8:	4013      	ands	r3, r2
 80032da:	2b10      	cmp	r3, #16
 80032dc:	d103      	bne.n	80032e6 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2210      	movs	r2, #16
 80032e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	225c      	movs	r2, #92	@ 0x5c
 80032ea:	5a9a      	ldrh	r2, [r3, r2]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	0011      	movs	r1, r2
 80032f0:	0018      	movs	r0, r3
 80032f2:	f7ff f83c 	bl	800236e <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80032f6:	e00e      	b.n	8003316 <UART_RxISR_8BIT_FIFOEN+0x276>
          HAL_UART_RxCpltCallback(huart);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	0018      	movs	r0, r3
 80032fc:	f7fd fa7e 	bl	80007fc <HAL_UART_RxCpltCallback>
        break;
 8003300:	e009      	b.n	8003316 <UART_RxISR_8BIT_FIFOEN+0x276>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003302:	236e      	movs	r3, #110	@ 0x6e
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d004      	beq.n	8003316 <UART_RxISR_8BIT_FIFOEN+0x276>
 800330c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800330e:	2220      	movs	r2, #32
 8003310:	4013      	ands	r3, r2
 8003312:	d000      	beq.n	8003316 <UART_RxISR_8BIT_FIFOEN+0x276>
 8003314:	e6e7      	b.n	80030e6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003316:	205a      	movs	r0, #90	@ 0x5a
 8003318:	183b      	adds	r3, r7, r0
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	215e      	movs	r1, #94	@ 0x5e
 800331e:	5a52      	ldrh	r2, [r2, r1]
 8003320:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003322:	0001      	movs	r1, r0
 8003324:	187b      	adds	r3, r7, r1
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d044      	beq.n	80033b6 <UART_RxISR_8BIT_FIFOEN+0x316>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2268      	movs	r2, #104	@ 0x68
 8003330:	5a9b      	ldrh	r3, [r3, r2]
 8003332:	187a      	adds	r2, r7, r1
 8003334:	8812      	ldrh	r2, [r2, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d23d      	bcs.n	80033b6 <UART_RxISR_8BIT_FIFOEN+0x316>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800333a:	f3ef 8310 	mrs	r3, PRIMASK
 800333e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003340:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003342:	657b      	str	r3, [r7, #84]	@ 0x54
 8003344:	2301      	movs	r3, #1
 8003346:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f383 8810 	msr	PRIMASK, r3
}
 800334e:	46c0      	nop			@ (mov r8, r8)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	491c      	ldr	r1, [pc, #112]	@ (80033cc <UART_RxISR_8BIT_FIFOEN+0x32c>)
 800335c:	400a      	ands	r2, r1
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003362:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	f383 8810 	msr	PRIMASK, r3
}
 800336a:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a18      	ldr	r2, [pc, #96]	@ (80033d0 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8003370:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003372:	f3ef 8310 	mrs	r3, PRIMASK
 8003376:	617b      	str	r3, [r7, #20]
  return(result);
 8003378:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800337a:	653b      	str	r3, [r7, #80]	@ 0x50
 800337c:	2301      	movs	r3, #1
 800337e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	f383 8810 	msr	PRIMASK, r3
}
 8003386:	46c0      	nop			@ (mov r8, r8)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2120      	movs	r1, #32
 8003394:	430a      	orrs	r2, r1
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800339a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f383 8810 	msr	PRIMASK, r3
}
 80033a2:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80033a4:	e007      	b.n	80033b6 <UART_RxISR_8BIT_FIFOEN+0x316>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	699a      	ldr	r2, [r3, #24]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2108      	movs	r1, #8
 80033b2:	430a      	orrs	r2, r1
 80033b4:	619a      	str	r2, [r3, #24]
}
 80033b6:	46c0      	nop			@ (mov r8, r8)
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b020      	add	sp, #128	@ 0x80
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	46c0      	nop			@ (mov r8, r8)
 80033c0:	fffffeff 	.word	0xfffffeff
 80033c4:	effffffe 	.word	0xeffffffe
 80033c8:	fbffffff 	.word	0xfbffffff
 80033cc:	efffffff 	.word	0xefffffff
 80033d0:	08002d31 	.word	0x08002d31

080033d4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b0a2      	sub	sp, #136	@ 0x88
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80033dc:	2382      	movs	r3, #130	@ 0x82
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	2160      	movs	r1, #96	@ 0x60
 80033e4:	5a52      	ldrh	r2, [r2, r1]
 80033e6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	2284      	movs	r2, #132	@ 0x84
 80033f0:	18ba      	adds	r2, r7, r2
 80033f2:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	228c      	movs	r2, #140	@ 0x8c
 8003408:	589b      	ldr	r3, [r3, r2]
 800340a:	2b22      	cmp	r3, #34	@ 0x22
 800340c:	d000      	beq.n	8003410 <UART_RxISR_16BIT_FIFOEN+0x3c>
 800340e:	e170      	b.n	80036f2 <UART_RxISR_16BIT_FIFOEN+0x31e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003410:	2376      	movs	r3, #118	@ 0x76
 8003412:	18fb      	adds	r3, r7, r3
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	2168      	movs	r1, #104	@ 0x68
 8003418:	5a52      	ldrh	r2, [r2, r1]
 800341a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800341c:	e115      	b.n	800364a <UART_RxISR_16BIT_FIFOEN+0x276>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003424:	2174      	movs	r1, #116	@ 0x74
 8003426:	187b      	adds	r3, r7, r1
 8003428:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342e:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8003430:	187b      	adds	r3, r7, r1
 8003432:	2282      	movs	r2, #130	@ 0x82
 8003434:	18ba      	adds	r2, r7, r2
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	8812      	ldrh	r2, [r2, #0]
 800343a:	4013      	ands	r3, r2
 800343c:	b29a      	uxth	r2, r3
 800343e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003440:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003446:	1c9a      	adds	r2, r3, #2
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	225e      	movs	r2, #94	@ 0x5e
 8003450:	5a9b      	ldrh	r3, [r3, r2]
 8003452:	b29b      	uxth	r3, r3
 8003454:	3b01      	subs	r3, #1
 8003456:	b299      	uxth	r1, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	225e      	movs	r2, #94	@ 0x5e
 800345c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	2184      	movs	r1, #132	@ 0x84
 8003466:	187a      	adds	r2, r7, r1
 8003468:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800346a:	187b      	adds	r3, r7, r1
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2207      	movs	r2, #7
 8003470:	4013      	ands	r3, r2
 8003472:	d04e      	beq.n	8003512 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003474:	187b      	adds	r3, r7, r1
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2201      	movs	r2, #1
 800347a:	4013      	ands	r3, r2
 800347c:	d010      	beq.n	80034a0 <UART_RxISR_16BIT_FIFOEN+0xcc>
 800347e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003480:	2380      	movs	r3, #128	@ 0x80
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4013      	ands	r3, r2
 8003486:	d00b      	beq.n	80034a0 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2201      	movs	r2, #1
 800348e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2290      	movs	r2, #144	@ 0x90
 8003494:	589b      	ldr	r3, [r3, r2]
 8003496:	2201      	movs	r2, #1
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2190      	movs	r1, #144	@ 0x90
 800349e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034a0:	2384      	movs	r3, #132	@ 0x84
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2202      	movs	r2, #2
 80034a8:	4013      	ands	r3, r2
 80034aa:	d00f      	beq.n	80034cc <UART_RxISR_16BIT_FIFOEN+0xf8>
 80034ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034ae:	2201      	movs	r2, #1
 80034b0:	4013      	ands	r3, r2
 80034b2:	d00b      	beq.n	80034cc <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2202      	movs	r2, #2
 80034ba:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2290      	movs	r2, #144	@ 0x90
 80034c0:	589b      	ldr	r3, [r3, r2]
 80034c2:	2204      	movs	r2, #4
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2190      	movs	r1, #144	@ 0x90
 80034ca:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034cc:	2384      	movs	r3, #132	@ 0x84
 80034ce:	18fb      	adds	r3, r7, r3
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2204      	movs	r2, #4
 80034d4:	4013      	ands	r3, r2
 80034d6:	d00f      	beq.n	80034f8 <UART_RxISR_16BIT_FIFOEN+0x124>
 80034d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034da:	2201      	movs	r2, #1
 80034dc:	4013      	ands	r3, r2
 80034de:	d00b      	beq.n	80034f8 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2204      	movs	r2, #4
 80034e6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2290      	movs	r2, #144	@ 0x90
 80034ec:	589b      	ldr	r3, [r3, r2]
 80034ee:	2202      	movs	r2, #2
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2190      	movs	r1, #144	@ 0x90
 80034f6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2290      	movs	r2, #144	@ 0x90
 80034fc:	589b      	ldr	r3, [r3, r2]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d007      	beq.n	8003512 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	0018      	movs	r0, r3
 8003506:	f7fe ff2a 	bl	800235e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2290      	movs	r2, #144	@ 0x90
 800350e:	2100      	movs	r1, #0
 8003510:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	225e      	movs	r2, #94	@ 0x5e
 8003516:	5a9b      	ldrh	r3, [r3, r2]
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d000      	beq.n	8003520 <UART_RxISR_16BIT_FIFOEN+0x14c>
 800351e:	e094      	b.n	800364a <UART_RxISR_16BIT_FIFOEN+0x276>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003520:	f3ef 8310 	mrs	r3, PRIMASK
 8003524:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003528:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800352a:	2301      	movs	r3, #1
 800352c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800352e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003530:	f383 8810 	msr	PRIMASK, r3
}
 8003534:	46c0      	nop			@ (mov r8, r8)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4972      	ldr	r1, [pc, #456]	@ (800370c <UART_RxISR_16BIT_FIFOEN+0x338>)
 8003542:	400a      	ands	r2, r1
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003548:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800354c:	f383 8810 	msr	PRIMASK, r3
}
 8003550:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003552:	f3ef 8310 	mrs	r3, PRIMASK
 8003556:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003558:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800355a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800355c:	2301      	movs	r3, #1
 800355e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003562:	f383 8810 	msr	PRIMASK, r3
}
 8003566:	46c0      	nop			@ (mov r8, r8)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4967      	ldr	r1, [pc, #412]	@ (8003710 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8003574:	400a      	ands	r2, r1
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800357a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800357c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800357e:	f383 8810 	msr	PRIMASK, r3
}
 8003582:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	228c      	movs	r2, #140	@ 0x8c
 8003588:	2120      	movs	r1, #32
 800358a:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	2380      	movs	r3, #128	@ 0x80
 80035a0:	041b      	lsls	r3, r3, #16
 80035a2:	4013      	ands	r3, r2
 80035a4:	d018      	beq.n	80035d8 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80035a6:	f3ef 8310 	mrs	r3, PRIMASK
 80035aa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80035ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80035ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80035b0:	2301      	movs	r3, #1
 80035b2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b6:	f383 8810 	msr	PRIMASK, r3
}
 80035ba:	46c0      	nop			@ (mov r8, r8)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4953      	ldr	r1, [pc, #332]	@ (8003714 <UART_RxISR_16BIT_FIFOEN+0x340>)
 80035c8:	400a      	ands	r2, r1
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d2:	f383 8810 	msr	PRIMASK, r3
}
 80035d6:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d12f      	bne.n	8003640 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80035e6:	f3ef 8310 	mrs	r3, PRIMASK
 80035ea:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80035ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80035f0:	2301      	movs	r3, #1
 80035f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f6:	f383 8810 	msr	PRIMASK, r3
}
 80035fa:	46c0      	nop			@ (mov r8, r8)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2110      	movs	r1, #16
 8003608:	438a      	bics	r2, r1
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800360e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003612:	f383 8810 	msr	PRIMASK, r3
}
 8003616:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	2210      	movs	r2, #16
 8003620:	4013      	ands	r3, r2
 8003622:	2b10      	cmp	r3, #16
 8003624:	d103      	bne.n	800362e <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2210      	movs	r2, #16
 800362c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	225c      	movs	r2, #92	@ 0x5c
 8003632:	5a9a      	ldrh	r2, [r3, r2]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	0011      	movs	r1, r2
 8003638:	0018      	movs	r0, r3
 800363a:	f7fe fe98 	bl	800236e <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800363e:	e010      	b.n	8003662 <UART_RxISR_16BIT_FIFOEN+0x28e>
          HAL_UART_RxCpltCallback(huart);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	0018      	movs	r0, r3
 8003644:	f7fd f8da 	bl	80007fc <HAL_UART_RxCpltCallback>
        break;
 8003648:	e00b      	b.n	8003662 <UART_RxISR_16BIT_FIFOEN+0x28e>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800364a:	2376      	movs	r3, #118	@ 0x76
 800364c:	18fb      	adds	r3, r7, r3
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d006      	beq.n	8003662 <UART_RxISR_16BIT_FIFOEN+0x28e>
 8003654:	2384      	movs	r3, #132	@ 0x84
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2220      	movs	r2, #32
 800365c:	4013      	ands	r3, r2
 800365e:	d000      	beq.n	8003662 <UART_RxISR_16BIT_FIFOEN+0x28e>
 8003660:	e6dd      	b.n	800341e <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003662:	205e      	movs	r0, #94	@ 0x5e
 8003664:	183b      	adds	r3, r7, r0
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	215e      	movs	r1, #94	@ 0x5e
 800366a:	5a52      	ldrh	r2, [r2, r1]
 800366c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800366e:	0001      	movs	r1, r0
 8003670:	187b      	adds	r3, r7, r1
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d044      	beq.n	8003702 <UART_RxISR_16BIT_FIFOEN+0x32e>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2268      	movs	r2, #104	@ 0x68
 800367c:	5a9b      	ldrh	r3, [r3, r2]
 800367e:	187a      	adds	r2, r7, r1
 8003680:	8812      	ldrh	r2, [r2, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d23d      	bcs.n	8003702 <UART_RxISR_16BIT_FIFOEN+0x32e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003686:	f3ef 8310 	mrs	r3, PRIMASK
 800368a:	60fb      	str	r3, [r7, #12]
  return(result);
 800368c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800368e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003690:	2301      	movs	r3, #1
 8003692:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f383 8810 	msr	PRIMASK, r3
}
 800369a:	46c0      	nop			@ (mov r8, r8)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	491c      	ldr	r1, [pc, #112]	@ (8003718 <UART_RxISR_16BIT_FIFOEN+0x344>)
 80036a8:	400a      	ands	r2, r1
 80036aa:	609a      	str	r2, [r3, #8]
 80036ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f383 8810 	msr	PRIMASK, r3
}
 80036b6:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a18      	ldr	r2, [pc, #96]	@ (800371c <UART_RxISR_16BIT_FIFOEN+0x348>)
 80036bc:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80036be:	f3ef 8310 	mrs	r3, PRIMASK
 80036c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80036c4:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80036c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80036c8:	2301      	movs	r3, #1
 80036ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f383 8810 	msr	PRIMASK, r3
}
 80036d2:	46c0      	nop			@ (mov r8, r8)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2120      	movs	r1, #32
 80036e0:	430a      	orrs	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	f383 8810 	msr	PRIMASK, r3
}
 80036ee:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80036f0:	e007      	b.n	8003702 <UART_RxISR_16BIT_FIFOEN+0x32e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699a      	ldr	r2, [r3, #24]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2108      	movs	r1, #8
 80036fe:	430a      	orrs	r2, r1
 8003700:	619a      	str	r2, [r3, #24]
}
 8003702:	46c0      	nop			@ (mov r8, r8)
 8003704:	46bd      	mov	sp, r7
 8003706:	b022      	add	sp, #136	@ 0x88
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			@ (mov r8, r8)
 800370c:	fffffeff 	.word	0xfffffeff
 8003710:	effffffe 	.word	0xeffffffe
 8003714:	fbffffff 	.word	0xfbffffff
 8003718:	efffffff 	.word	0xefffffff
 800371c:	08002ee9 	.word	0x08002ee9

08003720 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e05d      	b.n	80037f4 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2288      	movs	r2, #136	@ 0x88
 800373c:	589b      	ldr	r3, [r3, r2]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d107      	bne.n	8003752 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2284      	movs	r2, #132	@ 0x84
 8003746:	2100      	movs	r1, #0
 8003748:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	0018      	movs	r0, r3
 800374e:	f7fd f927 	bl	80009a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2288      	movs	r2, #136	@ 0x88
 8003756:	2124      	movs	r1, #36	@ 0x24
 8003758:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2101      	movs	r1, #1
 8003766:	438a      	bics	r2, r1
 8003768:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	0018      	movs	r0, r3
 8003776:	f7fe ff83 	bl	8002680 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	0018      	movs	r0, r3
 800377e:	f7fe fe01 	bl	8002384 <UART_SetConfig>
 8003782:	0003      	movs	r3, r0
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e033      	b.n	80037f4 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2180      	movs	r1, #128	@ 0x80
 8003798:	01c9      	lsls	r1, r1, #7
 800379a:	430a      	orrs	r2, r1
 800379c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	4a15      	ldr	r2, [pc, #84]	@ (80037fc <HAL_RS485Ex_Init+0xdc>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	0019      	movs	r1, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	055b      	lsls	r3, r3, #21
 80037b8:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	041b      	lsls	r3, r3, #16
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a0d      	ldr	r2, [pc, #52]	@ (8003800 <HAL_RS485Ex_Init+0xe0>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	0019      	movs	r1, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2101      	movs	r1, #1
 80037e6:	430a      	orrs	r2, r1
 80037e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	0018      	movs	r0, r3
 80037ee:	f7fe fffb 	bl	80027e8 <UART_CheckIdleState>
 80037f2:	0003      	movs	r3, r0
}
 80037f4:	0018      	movs	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b006      	add	sp, #24
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	ffff7fff 	.word	0xffff7fff
 8003800:	fc00ffff 	.word	0xfc00ffff

08003804 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2284      	movs	r2, #132	@ 0x84
 8003810:	5c9b      	ldrb	r3, [r3, r2]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_UARTEx_DisableFifoMode+0x16>
 8003816:	2302      	movs	r3, #2
 8003818:	e027      	b.n	800386a <HAL_UARTEx_DisableFifoMode+0x66>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2284      	movs	r2, #132	@ 0x84
 800381e:	2101      	movs	r1, #1
 8003820:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2288      	movs	r2, #136	@ 0x88
 8003826:	2124      	movs	r1, #36	@ 0x24
 8003828:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2101      	movs	r1, #1
 800383e:	438a      	bics	r2, r1
 8003840:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4a0b      	ldr	r2, [pc, #44]	@ (8003874 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003846:	4013      	ands	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2288      	movs	r2, #136	@ 0x88
 800385c:	2120      	movs	r1, #32
 800385e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2284      	movs	r2, #132	@ 0x84
 8003864:	2100      	movs	r1, #0
 8003866:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	0018      	movs	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	b004      	add	sp, #16
 8003870:	bd80      	pop	{r7, pc}
 8003872:	46c0      	nop			@ (mov r8, r8)
 8003874:	dfffffff 	.word	0xdfffffff

08003878 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2284      	movs	r2, #132	@ 0x84
 8003886:	5c9b      	ldrb	r3, [r3, r2]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800388c:	2302      	movs	r3, #2
 800388e:	e02e      	b.n	80038ee <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2284      	movs	r2, #132	@ 0x84
 8003894:	2101      	movs	r1, #1
 8003896:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2288      	movs	r2, #136	@ 0x88
 800389c:	2124      	movs	r1, #36	@ 0x24
 800389e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2101      	movs	r1, #1
 80038b4:	438a      	bics	r2, r1
 80038b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	08d9      	lsrs	r1, r3, #3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	0018      	movs	r0, r3
 80038d0:	f000 f854 	bl	800397c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2288      	movs	r2, #136	@ 0x88
 80038e0:	2120      	movs	r1, #32
 80038e2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2284      	movs	r2, #132	@ 0x84
 80038e8:	2100      	movs	r1, #0
 80038ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	0018      	movs	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	b004      	add	sp, #16
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2284      	movs	r2, #132	@ 0x84
 8003906:	5c9b      	ldrb	r3, [r3, r2]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800390c:	2302      	movs	r3, #2
 800390e:	e02f      	b.n	8003970 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2284      	movs	r2, #132	@ 0x84
 8003914:	2101      	movs	r1, #1
 8003916:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2288      	movs	r2, #136	@ 0x88
 800391c:	2124      	movs	r1, #36	@ 0x24
 800391e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2101      	movs	r1, #1
 8003934:	438a      	bics	r2, r1
 8003936:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	4a0e      	ldr	r2, [pc, #56]	@ (8003978 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003940:	4013      	ands	r3, r2
 8003942:	0019      	movs	r1, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	0018      	movs	r0, r3
 8003952:	f000 f813 	bl	800397c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2288      	movs	r2, #136	@ 0x88
 8003962:	2120      	movs	r1, #32
 8003964:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2284      	movs	r2, #132	@ 0x84
 800396a:	2100      	movs	r1, #0
 800396c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	0018      	movs	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	b004      	add	sp, #16
 8003976:	bd80      	pop	{r7, pc}
 8003978:	f1ffffff 	.word	0xf1ffffff

0800397c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800397c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003988:	2b00      	cmp	r3, #0
 800398a:	d108      	bne.n	800399e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	226a      	movs	r2, #106	@ 0x6a
 8003990:	2101      	movs	r1, #1
 8003992:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2268      	movs	r2, #104	@ 0x68
 8003998:	2101      	movs	r1, #1
 800399a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800399c:	e043      	b.n	8003a26 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800399e:	260f      	movs	r6, #15
 80039a0:	19bb      	adds	r3, r7, r6
 80039a2:	2208      	movs	r2, #8
 80039a4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80039a6:	200e      	movs	r0, #14
 80039a8:	183b      	adds	r3, r7, r0
 80039aa:	2208      	movs	r2, #8
 80039ac:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	0e5b      	lsrs	r3, r3, #25
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	240d      	movs	r4, #13
 80039ba:	193b      	adds	r3, r7, r4
 80039bc:	2107      	movs	r1, #7
 80039be:	400a      	ands	r2, r1
 80039c0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	0f5b      	lsrs	r3, r3, #29
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	250c      	movs	r5, #12
 80039ce:	197b      	adds	r3, r7, r5
 80039d0:	2107      	movs	r1, #7
 80039d2:	400a      	ands	r2, r1
 80039d4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039d6:	183b      	adds	r3, r7, r0
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	197a      	adds	r2, r7, r5
 80039dc:	7812      	ldrb	r2, [r2, #0]
 80039de:	4914      	ldr	r1, [pc, #80]	@ (8003a30 <UARTEx_SetNbDataToProcess+0xb4>)
 80039e0:	5c8a      	ldrb	r2, [r1, r2]
 80039e2:	435a      	muls	r2, r3
 80039e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80039e6:	197b      	adds	r3, r7, r5
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	4a12      	ldr	r2, [pc, #72]	@ (8003a34 <UARTEx_SetNbDataToProcess+0xb8>)
 80039ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039ee:	0019      	movs	r1, r3
 80039f0:	f7fc fc14 	bl	800021c <__divsi3>
 80039f4:	0003      	movs	r3, r0
 80039f6:	b299      	uxth	r1, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	226a      	movs	r2, #106	@ 0x6a
 80039fc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039fe:	19bb      	adds	r3, r7, r6
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	193a      	adds	r2, r7, r4
 8003a04:	7812      	ldrb	r2, [r2, #0]
 8003a06:	490a      	ldr	r1, [pc, #40]	@ (8003a30 <UARTEx_SetNbDataToProcess+0xb4>)
 8003a08:	5c8a      	ldrb	r2, [r1, r2]
 8003a0a:	435a      	muls	r2, r3
 8003a0c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003a0e:	193b      	adds	r3, r7, r4
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	4a08      	ldr	r2, [pc, #32]	@ (8003a34 <UARTEx_SetNbDataToProcess+0xb8>)
 8003a14:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003a16:	0019      	movs	r1, r3
 8003a18:	f7fc fc00 	bl	800021c <__divsi3>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	b299      	uxth	r1, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2268      	movs	r2, #104	@ 0x68
 8003a24:	5299      	strh	r1, [r3, r2]
}
 8003a26:	46c0      	nop			@ (mov r8, r8)
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b005      	add	sp, #20
 8003a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a2e:	46c0      	nop			@ (mov r8, r8)
 8003a30:	08003b6c 	.word	0x08003b6c
 8003a34:	08003b74 	.word	0x08003b74

08003a38 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e017      	b.n	8003a7a <HAL_WWDG_Init+0x42>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f7fd f82d 	bl	8000aac <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2180      	movs	r1, #128	@ 0x80
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	0011      	movs	r1, r2
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	b002      	add	sp, #8
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <memset>:
 8003a82:	0003      	movs	r3, r0
 8003a84:	1882      	adds	r2, r0, r2
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d100      	bne.n	8003a8c <memset+0xa>
 8003a8a:	4770      	bx	lr
 8003a8c:	7019      	strb	r1, [r3, #0]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	e7f9      	b.n	8003a86 <memset+0x4>
	...

08003a94 <__libc_init_array>:
 8003a94:	b570      	push	{r4, r5, r6, lr}
 8003a96:	2600      	movs	r6, #0
 8003a98:	4c0c      	ldr	r4, [pc, #48]	@ (8003acc <__libc_init_array+0x38>)
 8003a9a:	4d0d      	ldr	r5, [pc, #52]	@ (8003ad0 <__libc_init_array+0x3c>)
 8003a9c:	1b64      	subs	r4, r4, r5
 8003a9e:	10a4      	asrs	r4, r4, #2
 8003aa0:	42a6      	cmp	r6, r4
 8003aa2:	d109      	bne.n	8003ab8 <__libc_init_array+0x24>
 8003aa4:	2600      	movs	r6, #0
 8003aa6:	f000 f819 	bl	8003adc <_init>
 8003aaa:	4c0a      	ldr	r4, [pc, #40]	@ (8003ad4 <__libc_init_array+0x40>)
 8003aac:	4d0a      	ldr	r5, [pc, #40]	@ (8003ad8 <__libc_init_array+0x44>)
 8003aae:	1b64      	subs	r4, r4, r5
 8003ab0:	10a4      	asrs	r4, r4, #2
 8003ab2:	42a6      	cmp	r6, r4
 8003ab4:	d105      	bne.n	8003ac2 <__libc_init_array+0x2e>
 8003ab6:	bd70      	pop	{r4, r5, r6, pc}
 8003ab8:	00b3      	lsls	r3, r6, #2
 8003aba:	58eb      	ldr	r3, [r5, r3]
 8003abc:	4798      	blx	r3
 8003abe:	3601      	adds	r6, #1
 8003ac0:	e7ee      	b.n	8003aa0 <__libc_init_array+0xc>
 8003ac2:	00b3      	lsls	r3, r6, #2
 8003ac4:	58eb      	ldr	r3, [r5, r3]
 8003ac6:	4798      	blx	r3
 8003ac8:	3601      	adds	r6, #1
 8003aca:	e7f2      	b.n	8003ab2 <__libc_init_array+0x1e>
 8003acc:	08003b7c 	.word	0x08003b7c
 8003ad0:	08003b7c 	.word	0x08003b7c
 8003ad4:	08003b80 	.word	0x08003b80
 8003ad8:	08003b7c 	.word	0x08003b7c

08003adc <_init>:
 8003adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ade:	46c0      	nop			@ (mov r8, r8)
 8003ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ae2:	bc08      	pop	{r3}
 8003ae4:	469e      	mov	lr, r3
 8003ae6:	4770      	bx	lr

08003ae8 <_fini>:
 8003ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aea:	46c0      	nop			@ (mov r8, r8)
 8003aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aee:	bc08      	pop	{r3}
 8003af0:	469e      	mov	lr, r3
 8003af2:	4770      	bx	lr
