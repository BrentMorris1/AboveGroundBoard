
AboveGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c34  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002cf4  08002cf4  00003cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d7c  08002d7c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d7c  08002d7c  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d7c  08002d7c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d7c  08002d7c  00003d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d80  08002d80  00003d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002d84  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  08002d90  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08002d90  00004138  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9f1  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c40  00000000  00000000  0000fa25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  00011668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000752  00000000  00000000  00011ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001350b  00000000  00000000  00012742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c23b  00000000  00000000  00025c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ad91  00000000  00000000  00031e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000acc19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002184  00000000  00000000  000acc5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000aede0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002cdc 	.word	0x08002cdc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002cdc 	.word	0x08002cdc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f8:	f000 fb4d 	bl	8000a96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fc:	f000 f80a 	bl	8000414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000400:	f000 f95e 	bl	80006c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000404:	f000 f84a 	bl	800049c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000408:	f000 f8ea 	bl	80005e0 <MX_USART1_UART_Init>
  MX_WWDG_Init();
 800040c:	f000 f938 	bl	8000680 <MX_WWDG_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000410:	46c0      	nop			@ (mov r8, r8)
 8000412:	e7fd      	b.n	8000410 <main+0x1c>

08000414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	b08d      	sub	sp, #52	@ 0x34
 8000418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041a:	2414      	movs	r4, #20
 800041c:	193b      	adds	r3, r7, r4
 800041e:	0018      	movs	r0, r3
 8000420:	231c      	movs	r3, #28
 8000422:	001a      	movs	r2, r3
 8000424:	2100      	movs	r1, #0
 8000426:	f002 fc2c 	bl	8002c82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042a:	003b      	movs	r3, r7
 800042c:	0018      	movs	r0, r3
 800042e:	2314      	movs	r3, #20
 8000430:	001a      	movs	r2, r3
 8000432:	2100      	movs	r1, #0
 8000434:	f002 fc25 	bl	8002c82 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000438:	193b      	adds	r3, r7, r4
 800043a:	2202      	movs	r2, #2
 800043c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043e:	193b      	adds	r3, r7, r4
 8000440:	2280      	movs	r2, #128	@ 0x80
 8000442:	0052      	lsls	r2, r2, #1
 8000444:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8000446:	193b      	adds	r3, r7, r4
 8000448:	2280      	movs	r2, #128	@ 0x80
 800044a:	0152      	lsls	r2, r2, #5
 800044c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800044e:	193b      	adds	r3, r7, r4
 8000450:	2240      	movs	r2, #64	@ 0x40
 8000452:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000454:	193b      	adds	r3, r7, r4
 8000456:	0018      	movs	r0, r3
 8000458:	f001 fa50 	bl	80018fc <HAL_RCC_OscConfig>
 800045c:	1e03      	subs	r3, r0, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000460:	f000 f9a0 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000464:	003b      	movs	r3, r7
 8000466:	2207      	movs	r2, #7
 8000468:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800046a:	003b      	movs	r3, r7
 800046c:	2200      	movs	r2, #0
 800046e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000470:	003b      	movs	r3, r7
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000476:	003b      	movs	r3, r7
 8000478:	2200      	movs	r2, #0
 800047a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800047c:	003b      	movs	r3, r7
 800047e:	2200      	movs	r2, #0
 8000480:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000482:	003b      	movs	r3, r7
 8000484:	2100      	movs	r1, #0
 8000486:	0018      	movs	r0, r3
 8000488:	f001 fc1c 	bl	8001cc4 <HAL_RCC_ClockConfig>
 800048c:	1e03      	subs	r3, r0, #0
 800048e:	d001      	beq.n	8000494 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000490:	f000 f988 	bl	80007a4 <Error_Handler>
  }
}
 8000494:	46c0      	nop			@ (mov r8, r8)
 8000496:	46bd      	mov	sp, r7
 8000498:	b00d      	add	sp, #52	@ 0x34
 800049a:	bd90      	pop	{r4, r7, pc}

0800049c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	0018      	movs	r0, r3
 80004a6:	230c      	movs	r3, #12
 80004a8:	001a      	movs	r2, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	f002 fbe9 	bl	8002c82 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004b0:	4b45      	ldr	r3, [pc, #276]	@ (80005c8 <MX_ADC1_Init+0x12c>)
 80004b2:	4a46      	ldr	r2, [pc, #280]	@ (80005cc <MX_ADC1_Init+0x130>)
 80004b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80004b6:	4b44      	ldr	r3, [pc, #272]	@ (80005c8 <MX_ADC1_Init+0x12c>)
 80004b8:	22c0      	movs	r2, #192	@ 0xc0
 80004ba:	0612      	lsls	r2, r2, #24
 80004bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004be:	4b42      	ldr	r3, [pc, #264]	@ (80005c8 <MX_ADC1_Init+0x12c>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004c4:	4b40      	ldr	r3, [pc, #256]	@ (80005c8 <MX_ADC1_Init+0x12c>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 80004ca:	4b3f      	ldr	r3, [pc, #252]	@ (80005c8 <MX_ADC1_Init+0x12c>)
 80004cc:	2280      	movs	r2, #128	@ 0x80
 80004ce:	0612      	lsls	r2, r2, #24
 80004d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004d2:	4b3d      	ldr	r3, [pc, #244]	@ (80005c8 <MX_ADC1_Init+0x12c>)
 80004d4:	2204      	movs	r2, #4
 80004d6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004d8:	4b3b      	ldr	r3, [pc, #236]	@ (80005c8 <MX_ADC1_Init+0x12c>)
 80004da:	2200      	movs	r2, #0
 80004dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80004de:	4b3a      	ldr	r3, [pc, #232]	@ (80005c8 <MX_ADC1_Init+0x12c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004e4:	4b38      	ldr	r3, [pc, #224]	@ (80005c8 <MX_ADC1_Init+0x12c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80004ea:	4b37      	ldr	r3, [pc, #220]	@ (80005c8 <MX_ADC1_Init+0x12c>)
 80004ec:	2201      	movs	r2, #1
 80004ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f0:	4b35      	ldr	r3, [pc, #212]	@ (80005c8 <MX_ADC1_Init+0x12c>)
 80004f2:	2220      	movs	r2, #32
 80004f4:	2100      	movs	r1, #0
 80004f6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004f8:	4b33      	ldr	r3, [pc, #204]	@ (80005c8 <MX_ADC1_Init+0x12c>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004fe:	4b32      	ldr	r3, [pc, #200]	@ (80005c8 <MX_ADC1_Init+0x12c>)
 8000500:	2200      	movs	r2, #0
 8000502:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000504:	4b30      	ldr	r3, [pc, #192]	@ (80005c8 <MX_ADC1_Init+0x12c>)
 8000506:	222c      	movs	r2, #44	@ 0x2c
 8000508:	2100      	movs	r1, #0
 800050a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800050c:	4b2e      	ldr	r3, [pc, #184]	@ (80005c8 <MX_ADC1_Init+0x12c>)
 800050e:	2200      	movs	r2, #0
 8000510:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000512:	4b2d      	ldr	r3, [pc, #180]	@ (80005c8 <MX_ADC1_Init+0x12c>)
 8000514:	2200      	movs	r2, #0
 8000516:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000518:	4b2b      	ldr	r3, [pc, #172]	@ (80005c8 <MX_ADC1_Init+0x12c>)
 800051a:	223c      	movs	r2, #60	@ 0x3c
 800051c:	2100      	movs	r1, #0
 800051e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000520:	4b29      	ldr	r3, [pc, #164]	@ (80005c8 <MX_ADC1_Init+0x12c>)
 8000522:	2200      	movs	r2, #0
 8000524:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000526:	4b28      	ldr	r3, [pc, #160]	@ (80005c8 <MX_ADC1_Init+0x12c>)
 8000528:	0018      	movs	r0, r3
 800052a:	f000 fc2f 	bl	8000d8c <HAL_ADC_Init>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8000532:	f000 f937 	bl	80007a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2201      	movs	r2, #1
 800053a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2201      	movs	r2, #1
 8000540:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000542:	1d3a      	adds	r2, r7, #4
 8000544:	4b20      	ldr	r3, [pc, #128]	@ (80005c8 <MX_ADC1_Init+0x12c>)
 8000546:	0011      	movs	r1, r2
 8000548:	0018      	movs	r0, r3
 800054a:	f000 fdc5 	bl	80010d8 <HAL_ADC_ConfigChannel>
 800054e:	1e03      	subs	r3, r0, #0
 8000550:	d001      	beq.n	8000556 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000552:	f000 f927 	bl	80007a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	4a1d      	ldr	r2, [pc, #116]	@ (80005d0 <MX_ADC1_Init+0x134>)
 800055a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055c:	1d3a      	adds	r2, r7, #4
 800055e:	4b1a      	ldr	r3, [pc, #104]	@ (80005c8 <MX_ADC1_Init+0x12c>)
 8000560:	0011      	movs	r1, r2
 8000562:	0018      	movs	r0, r3
 8000564:	f000 fdb8 	bl	80010d8 <HAL_ADC_ConfigChannel>
 8000568:	1e03      	subs	r3, r0, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 800056c:	f000 f91a 	bl	80007a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	4a18      	ldr	r2, [pc, #96]	@ (80005d4 <MX_ADC1_Init+0x138>)
 8000574:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000576:	1d3a      	adds	r2, r7, #4
 8000578:	4b13      	ldr	r3, [pc, #76]	@ (80005c8 <MX_ADC1_Init+0x12c>)
 800057a:	0011      	movs	r1, r2
 800057c:	0018      	movs	r0, r3
 800057e:	f000 fdab 	bl	80010d8 <HAL_ADC_ConfigChannel>
 8000582:	1e03      	subs	r3, r0, #0
 8000584:	d001      	beq.n	800058a <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000586:	f000 f90d 	bl	80007a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	4a12      	ldr	r2, [pc, #72]	@ (80005d8 <MX_ADC1_Init+0x13c>)
 800058e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	1d3a      	adds	r2, r7, #4
 8000592:	4b0d      	ldr	r3, [pc, #52]	@ (80005c8 <MX_ADC1_Init+0x12c>)
 8000594:	0011      	movs	r1, r2
 8000596:	0018      	movs	r0, r3
 8000598:	f000 fd9e 	bl	80010d8 <HAL_ADC_ConfigChannel>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80005a0:	f000 f900 	bl	80007a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	4a0d      	ldr	r2, [pc, #52]	@ (80005dc <MX_ADC1_Init+0x140>)
 80005a8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005aa:	1d3a      	adds	r2, r7, #4
 80005ac:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <MX_ADC1_Init+0x12c>)
 80005ae:	0011      	movs	r1, r2
 80005b0:	0018      	movs	r0, r3
 80005b2:	f000 fd91 	bl	80010d8 <HAL_ADC_ConfigChannel>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 80005ba:	f000 f8f3 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005be:	46c0      	nop			@ (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b004      	add	sp, #16
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	20000028 	.word	0x20000028
 80005cc:	40012400 	.word	0x40012400
 80005d0:	04000002 	.word	0x04000002
 80005d4:	08000004 	.word	0x08000004
 80005d8:	0c000008 	.word	0x0c000008
 80005dc:	10000010 	.word	0x10000010

080005e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005e4:	4b24      	ldr	r3, [pc, #144]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 80005e6:	4a25      	ldr	r2, [pc, #148]	@ (800067c <MX_USART1_UART_Init+0x9c>)
 80005e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005ea:	4b23      	ldr	r3, [pc, #140]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 80005ec:	22e1      	movs	r2, #225	@ 0xe1
 80005ee:	0252      	lsls	r2, r2, #9
 80005f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005f2:	4b21      	ldr	r3, [pc, #132]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000604:	4b1c      	ldr	r3, [pc, #112]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 8000606:	220c      	movs	r2, #12
 8000608:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060a:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000610:	4b19      	ldr	r3, [pc, #100]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000616:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800061c:	4b16      	ldr	r3, [pc, #88]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000622:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000628:	4813      	ldr	r0, [pc, #76]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 800062a:	2300      	movs	r3, #0
 800062c:	2200      	movs	r2, #0
 800062e:	2100      	movs	r1, #0
 8000630:	f002 f976 	bl	8002920 <HAL_RS485Ex_Init>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000638:	f000 f8b4 	bl	80007a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800063c:	4b0e      	ldr	r3, [pc, #56]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 800063e:	2100      	movs	r1, #0
 8000640:	0018      	movs	r0, r3
 8000642:	f002 fa19 	bl	8002a78 <HAL_UARTEx_SetTxFifoThreshold>
 8000646:	1e03      	subs	r3, r0, #0
 8000648:	d001      	beq.n	800064e <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 800064a:	f000 f8ab 	bl	80007a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800064e:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 8000650:	2100      	movs	r1, #0
 8000652:	0018      	movs	r0, r3
 8000654:	f002 fa50 	bl	8002af8 <HAL_UARTEx_SetRxFifoThreshold>
 8000658:	1e03      	subs	r3, r0, #0
 800065a:	d001      	beq.n	8000660 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 800065c:	f000 f8a2 	bl	80007a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000660:	4b05      	ldr	r3, [pc, #20]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 8000662:	0018      	movs	r0, r3
 8000664:	f002 f9ce 	bl	8002a04 <HAL_UARTEx_DisableFifoMode>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d001      	beq.n	8000670 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 800066c:	f000 f89a 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000670:	46c0      	nop			@ (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	2000008c 	.word	0x2000008c
 800067c:	40013800 	.word	0x40013800

08000680 <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 8000684:	4b0c      	ldr	r3, [pc, #48]	@ (80006b8 <MX_WWDG_Init+0x38>)
 8000686:	4a0d      	ldr	r2, [pc, #52]	@ (80006bc <MX_WWDG_Init+0x3c>)
 8000688:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 800068a:	4b0b      	ldr	r3, [pc, #44]	@ (80006b8 <MX_WWDG_Init+0x38>)
 800068c:	2200      	movs	r2, #0
 800068e:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 8000690:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <MX_WWDG_Init+0x38>)
 8000692:	2240      	movs	r2, #64	@ 0x40
 8000694:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 8000696:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <MX_WWDG_Init+0x38>)
 8000698:	2240      	movs	r2, #64	@ 0x40
 800069a:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 800069c:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <MX_WWDG_Init+0x38>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 80006a2:	4b05      	ldr	r3, [pc, #20]	@ (80006b8 <MX_WWDG_Init+0x38>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f002 fac7 	bl	8002c38 <HAL_WWDG_Init>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_WWDG_Init+0x32>
  {
    Error_Handler();
 80006ae:	f000 f879 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 80006b2:	46c0      	nop			@ (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000120 	.word	0x20000120
 80006bc:	40002c00 	.word	0x40002c00

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b089      	sub	sp, #36	@ 0x24
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	240c      	movs	r4, #12
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	0018      	movs	r0, r3
 80006cc:	2314      	movs	r3, #20
 80006ce:	001a      	movs	r2, r3
 80006d0:	2100      	movs	r1, #0
 80006d2:	f002 fad6 	bl	8002c82 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b32      	ldr	r3, [pc, #200]	@ (80007a0 <MX_GPIO_Init+0xe0>)
 80006d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006da:	4b31      	ldr	r3, [pc, #196]	@ (80007a0 <MX_GPIO_Init+0xe0>)
 80006dc:	2102      	movs	r1, #2
 80006de:	430a      	orrs	r2, r1
 80006e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006e2:	4b2f      	ldr	r3, [pc, #188]	@ (80007a0 <MX_GPIO_Init+0xe0>)
 80006e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006e6:	2202      	movs	r2, #2
 80006e8:	4013      	ands	r3, r2
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	4b2c      	ldr	r3, [pc, #176]	@ (80007a0 <MX_GPIO_Init+0xe0>)
 80006f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006f2:	4b2b      	ldr	r3, [pc, #172]	@ (80007a0 <MX_GPIO_Init+0xe0>)
 80006f4:	2104      	movs	r1, #4
 80006f6:	430a      	orrs	r2, r1
 80006f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006fa:	4b29      	ldr	r3, [pc, #164]	@ (80007a0 <MX_GPIO_Init+0xe0>)
 80006fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006fe:	2204      	movs	r2, #4
 8000700:	4013      	ands	r3, r2
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b26      	ldr	r3, [pc, #152]	@ (80007a0 <MX_GPIO_Init+0xe0>)
 8000708:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800070a:	4b25      	ldr	r3, [pc, #148]	@ (80007a0 <MX_GPIO_Init+0xe0>)
 800070c:	2101      	movs	r1, #1
 800070e:	430a      	orrs	r2, r1
 8000710:	635a      	str	r2, [r3, #52]	@ 0x34
 8000712:	4b23      	ldr	r3, [pc, #140]	@ (80007a0 <MX_GPIO_Init+0xe0>)
 8000714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000716:	2201      	movs	r2, #1
 8000718:	4013      	ands	r3, r2
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DCV_POS_B_Pin|DCV_POS_A_Pin, GPIO_PIN_RESET);
 800071e:	23a0      	movs	r3, #160	@ 0xa0
 8000720:	05db      	lsls	r3, r3, #23
 8000722:	2200      	movs	r2, #0
 8000724:	2160      	movs	r1, #96	@ 0x60
 8000726:	0018      	movs	r0, r3
 8000728:	f001 f8ca 	bl	80018c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DCV_POS_B_Pin DCV_POS_A_Pin */
  GPIO_InitStruct.Pin = DCV_POS_B_Pin|DCV_POS_A_Pin;
 800072c:	193b      	adds	r3, r7, r4
 800072e:	2260      	movs	r2, #96	@ 0x60
 8000730:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	193b      	adds	r3, r7, r4
 8000734:	2201      	movs	r2, #1
 8000736:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	193b      	adds	r3, r7, r4
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	193a      	adds	r2, r7, r4
 8000746:	23a0      	movs	r3, #160	@ 0xa0
 8000748:	05db      	lsls	r3, r3, #23
 800074a:	0011      	movs	r1, r2
 800074c:	0018      	movs	r0, r3
 800074e:	f000 ff4d 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Oil_Low_Pin */
  GPIO_InitStruct.Pin = Oil_Low_Pin;
 8000752:	193b      	adds	r3, r7, r4
 8000754:	2280      	movs	r2, #128	@ 0x80
 8000756:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000758:	193b      	adds	r3, r7, r4
 800075a:	2200      	movs	r2, #0
 800075c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	193b      	adds	r3, r7, r4
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Oil_Low_GPIO_Port, &GPIO_InitStruct);
 8000764:	193a      	adds	r2, r7, r4
 8000766:	23a0      	movs	r3, #160	@ 0xa0
 8000768:	05db      	lsls	r3, r3, #23
 800076a:	0011      	movs	r1, r2
 800076c:	0018      	movs	r0, r3
 800076e:	f000 ff3d 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Oil_High_Pin */
  GPIO_InitStruct.Pin = Oil_High_Pin;
 8000772:	0021      	movs	r1, r4
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2280      	movs	r2, #128	@ 0x80
 8000778:	0052      	lsls	r2, r2, #1
 800077a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2202      	movs	r2, #2
 8000786:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Oil_High_GPIO_Port, &GPIO_InitStruct);
 8000788:	187a      	adds	r2, r7, r1
 800078a:	23a0      	movs	r3, #160	@ 0xa0
 800078c:	05db      	lsls	r3, r3, #23
 800078e:	0011      	movs	r1, r2
 8000790:	0018      	movs	r0, r3
 8000792:	f000 ff2b 	bl	80015ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	b009      	add	sp, #36	@ 0x24
 800079c:	bd90      	pop	{r4, r7, pc}
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	40021000 	.word	0x40021000

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	46c0      	nop			@ (mov r8, r8)
 80007ae:	e7fd      	b.n	80007ac <Error_Handler+0x8>

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <HAL_MspInit+0x44>)
 80007b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <HAL_MspInit+0x44>)
 80007bc:	2101      	movs	r1, #1
 80007be:	430a      	orrs	r2, r1
 80007c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80007c2:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <HAL_MspInit+0x44>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c6:	2201      	movs	r2, #1
 80007c8:	4013      	ands	r3, r2
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <HAL_MspInit+0x44>)
 80007d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <HAL_MspInit+0x44>)
 80007d4:	2180      	movs	r1, #128	@ 0x80
 80007d6:	0549      	lsls	r1, r1, #21
 80007d8:	430a      	orrs	r2, r1
 80007da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007dc:	4b05      	ldr	r3, [pc, #20]	@ (80007f4 <HAL_MspInit+0x44>)
 80007de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007e0:	2380      	movs	r3, #128	@ 0x80
 80007e2:	055b      	lsls	r3, r3, #21
 80007e4:	4013      	ands	r3, r2
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b002      	add	sp, #8
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			@ (mov r8, r8)
 80007f4:	40021000 	.word	0x40021000

080007f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b091      	sub	sp, #68	@ 0x44
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	232c      	movs	r3, #44	@ 0x2c
 8000802:	18fb      	adds	r3, r7, r3
 8000804:	0018      	movs	r0, r3
 8000806:	2314      	movs	r3, #20
 8000808:	001a      	movs	r2, r3
 800080a:	2100      	movs	r1, #0
 800080c:	f002 fa39 	bl	8002c82 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000810:	2410      	movs	r4, #16
 8000812:	193b      	adds	r3, r7, r4
 8000814:	0018      	movs	r0, r3
 8000816:	231c      	movs	r3, #28
 8000818:	001a      	movs	r2, r3
 800081a:	2100      	movs	r1, #0
 800081c:	f002 fa31 	bl	8002c82 <memset>
  if(hadc->Instance==ADC1)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a1f      	ldr	r2, [pc, #124]	@ (80008a4 <HAL_ADC_MspInit+0xac>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d138      	bne.n	800089c <HAL_ADC_MspInit+0xa4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800082a:	193b      	adds	r3, r7, r4
 800082c:	2220      	movs	r2, #32
 800082e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000830:	193b      	adds	r3, r7, r4
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000836:	193b      	adds	r3, r7, r4
 8000838:	0018      	movs	r0, r3
 800083a:	f001 fbd3 	bl	8001fe4 <HAL_RCCEx_PeriphCLKConfig>
 800083e:	1e03      	subs	r3, r0, #0
 8000840:	d001      	beq.n	8000846 <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 8000842:	f7ff ffaf 	bl	80007a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000846:	4b18      	ldr	r3, [pc, #96]	@ (80008a8 <HAL_ADC_MspInit+0xb0>)
 8000848:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800084a:	4b17      	ldr	r3, [pc, #92]	@ (80008a8 <HAL_ADC_MspInit+0xb0>)
 800084c:	2180      	movs	r1, #128	@ 0x80
 800084e:	0349      	lsls	r1, r1, #13
 8000850:	430a      	orrs	r2, r1
 8000852:	641a      	str	r2, [r3, #64]	@ 0x40
 8000854:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <HAL_ADC_MspInit+0xb0>)
 8000856:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000858:	2380      	movs	r3, #128	@ 0x80
 800085a:	035b      	lsls	r3, r3, #13
 800085c:	4013      	ands	r3, r2
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <HAL_ADC_MspInit+0xb0>)
 8000864:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000866:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <HAL_ADC_MspInit+0xb0>)
 8000868:	2101      	movs	r1, #1
 800086a:	430a      	orrs	r2, r1
 800086c:	635a      	str	r2, [r3, #52]	@ 0x34
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <HAL_ADC_MspInit+0xb0>)
 8000870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000872:	2201      	movs	r2, #1
 8000874:	4013      	ands	r3, r2
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Oil_Pressure_Pin|Water_Pressure_Pin|Water_Flow_Pin|Jack_Excursion_Pin
 800087a:	212c      	movs	r1, #44	@ 0x2c
 800087c:	187b      	adds	r3, r7, r1
 800087e:	221f      	movs	r2, #31
 8000880:	601a      	str	r2, [r3, #0]
                          |Oil_Temp_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2203      	movs	r2, #3
 8000886:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	187a      	adds	r2, r7, r1
 8000890:	23a0      	movs	r3, #160	@ 0xa0
 8000892:	05db      	lsls	r3, r3, #23
 8000894:	0011      	movs	r1, r2
 8000896:	0018      	movs	r0, r3
 8000898:	f000 fea8 	bl	80015ec <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800089c:	46c0      	nop			@ (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b011      	add	sp, #68	@ 0x44
 80008a2:	bd90      	pop	{r4, r7, pc}
 80008a4:	40012400 	.word	0x40012400
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b093      	sub	sp, #76	@ 0x4c
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	2334      	movs	r3, #52	@ 0x34
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	0018      	movs	r0, r3
 80008ba:	2314      	movs	r3, #20
 80008bc:	001a      	movs	r2, r3
 80008be:	2100      	movs	r1, #0
 80008c0:	f002 f9df 	bl	8002c82 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c4:	2418      	movs	r4, #24
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	0018      	movs	r0, r3
 80008ca:	231c      	movs	r3, #28
 80008cc:	001a      	movs	r2, r3
 80008ce:	2100      	movs	r1, #0
 80008d0:	f002 f9d7 	bl	8002c82 <memset>
  if(huart->Instance==USART1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a34      	ldr	r2, [pc, #208]	@ (80009ac <HAL_UART_MspInit+0x100>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d161      	bne.n	80009a2 <HAL_UART_MspInit+0xf6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	2201      	movs	r2, #1
 80008e2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	0018      	movs	r0, r3
 80008ee:	f001 fb79 	bl	8001fe4 <HAL_RCCEx_PeriphCLKConfig>
 80008f2:	1e03      	subs	r3, r0, #0
 80008f4:	d001      	beq.n	80008fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80008f6:	f7ff ff55 	bl	80007a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008fa:	4b2d      	ldr	r3, [pc, #180]	@ (80009b0 <HAL_UART_MspInit+0x104>)
 80008fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008fe:	4b2c      	ldr	r3, [pc, #176]	@ (80009b0 <HAL_UART_MspInit+0x104>)
 8000900:	2180      	movs	r1, #128	@ 0x80
 8000902:	01c9      	lsls	r1, r1, #7
 8000904:	430a      	orrs	r2, r1
 8000906:	641a      	str	r2, [r3, #64]	@ 0x40
 8000908:	4b29      	ldr	r3, [pc, #164]	@ (80009b0 <HAL_UART_MspInit+0x104>)
 800090a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800090c:	2380      	movs	r3, #128	@ 0x80
 800090e:	01db      	lsls	r3, r3, #7
 8000910:	4013      	ands	r3, r2
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b26      	ldr	r3, [pc, #152]	@ (80009b0 <HAL_UART_MspInit+0x104>)
 8000918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800091a:	4b25      	ldr	r3, [pc, #148]	@ (80009b0 <HAL_UART_MspInit+0x104>)
 800091c:	2102      	movs	r1, #2
 800091e:	430a      	orrs	r2, r1
 8000920:	635a      	str	r2, [r3, #52]	@ 0x34
 8000922:	4b23      	ldr	r3, [pc, #140]	@ (80009b0 <HAL_UART_MspInit+0x104>)
 8000924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000926:	2202      	movs	r2, #2
 8000928:	4013      	ands	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b20      	ldr	r3, [pc, #128]	@ (80009b0 <HAL_UART_MspInit+0x104>)
 8000930:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000932:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <HAL_UART_MspInit+0x104>)
 8000934:	2101      	movs	r1, #1
 8000936:	430a      	orrs	r2, r1
 8000938:	635a      	str	r2, [r3, #52]	@ 0x34
 800093a:	4b1d      	ldr	r3, [pc, #116]	@ (80009b0 <HAL_UART_MspInit+0x104>)
 800093c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800093e:	2201      	movs	r2, #1
 8000940:	4013      	ands	r3, r2
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000946:	2434      	movs	r4, #52	@ 0x34
 8000948:	193b      	adds	r3, r7, r4
 800094a:	22c0      	movs	r2, #192	@ 0xc0
 800094c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	193b      	adds	r3, r7, r4
 8000950:	2202      	movs	r2, #2
 8000952:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	193b      	adds	r3, r7, r4
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	193b      	adds	r3, r7, r4
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000960:	193b      	adds	r3, r7, r4
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	193b      	adds	r3, r7, r4
 8000968:	4a12      	ldr	r2, [pc, #72]	@ (80009b4 <HAL_UART_MspInit+0x108>)
 800096a:	0019      	movs	r1, r3
 800096c:	0010      	movs	r0, r2
 800096e:	f000 fe3d 	bl	80015ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000972:	0021      	movs	r1, r4
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2280      	movs	r2, #128	@ 0x80
 8000978:	0152      	lsls	r2, r2, #5
 800097a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2202      	movs	r2, #2
 8000980:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2201      	movs	r2, #1
 8000992:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	187a      	adds	r2, r7, r1
 8000996:	23a0      	movs	r3, #160	@ 0xa0
 8000998:	05db      	lsls	r3, r3, #23
 800099a:	0011      	movs	r1, r2
 800099c:	0018      	movs	r0, r3
 800099e:	f000 fe25 	bl	80015ec <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b013      	add	sp, #76	@ 0x4c
 80009a8:	bd90      	pop	{r4, r7, pc}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	40013800 	.word	0x40013800
 80009b0:	40021000 	.word	0x40021000
 80009b4:	50000400 	.word	0x50000400

080009b8 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <HAL_WWDG_MspInit+0x38>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d10d      	bne.n	80009e6 <HAL_WWDG_MspInit+0x2e>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 80009ca:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <HAL_WWDG_MspInit+0x3c>)
 80009cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009ce:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <HAL_WWDG_MspInit+0x3c>)
 80009d0:	2180      	movs	r1, #128	@ 0x80
 80009d2:	0109      	lsls	r1, r1, #4
 80009d4:	430a      	orrs	r2, r1
 80009d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009d8:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_WWDG_MspInit+0x3c>)
 80009da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009dc:	2380      	movs	r3, #128	@ 0x80
 80009de:	011b      	lsls	r3, r3, #4
 80009e0:	4013      	ands	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END WWDG_MspInit 1 */

  }

}
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b004      	add	sp, #16
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	40002c00 	.word	0x40002c00
 80009f4:	40021000 	.word	0x40021000

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009fc:	46c0      	nop			@ (mov r8, r8)
 80009fe:	e7fd      	b.n	80009fc <NMI_Handler+0x4>

08000a00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a04:	46c0      	nop			@ (mov r8, r8)
 8000a06:	e7fd      	b.n	8000a04 <HardFault_Handler+0x4>

08000a08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a0c:	46c0      	nop			@ (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a16:	46c0      	nop			@ (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a20:	f000 f89a 	bl	8000b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a24:	46c0      	nop			@ (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a30:	4b03      	ldr	r3, [pc, #12]	@ (8000a40 <SystemInit+0x14>)
 8000a32:	2280      	movs	r2, #128	@ 0x80
 8000a34:	0512      	lsls	r2, r2, #20
 8000a36:	609a      	str	r2, [r3, #8]
#endif
}
 8000a38:	46c0      	nop			@ (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			@ (mov r8, r8)
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a44:	480d      	ldr	r0, [pc, #52]	@ (8000a7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a46:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a48:	f7ff fff0 	bl	8000a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a4c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a4e:	e003      	b.n	8000a58 <LoopCopyDataInit>

08000a50 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a50:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000a52:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a54:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a56:	3104      	adds	r1, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a58:	480a      	ldr	r0, [pc, #40]	@ (8000a84 <LoopForever+0xa>)
  ldr r3, =_edata
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <LoopForever+0xe>)
  adds r2, r0, r1
 8000a5c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a5e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a60:	d3f6      	bcc.n	8000a50 <CopyDataInit>
  ldr r2, =_sbss
 8000a62:	4a0a      	ldr	r2, [pc, #40]	@ (8000a8c <LoopForever+0x12>)
  b LoopFillZerobss
 8000a64:	e002      	b.n	8000a6c <LoopFillZerobss>

08000a66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  str  r3, [r2]
 8000a68:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a6a:	3204      	adds	r2, #4

08000a6c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000a6c:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <LoopForever+0x16>)
  cmp r2, r3
 8000a6e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a70:	d3f9      	bcc.n	8000a66 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000a72:	f002 f90f 	bl	8002c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a76:	f7ff fcbd 	bl	80003f4 <main>

08000a7a <LoopForever>:

LoopForever:
    b LoopForever
 8000a7a:	e7fe      	b.n	8000a7a <LoopForever>
  ldr   r0, =_estack
 8000a7c:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000a80:	08002d84 	.word	0x08002d84
  ldr r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a88:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000a8c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000a90:	20000138 	.word	0x20000138

08000a94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC1_IRQHandler>

08000a96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a9c:	1dfb      	adds	r3, r7, #7
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aa2:	2003      	movs	r0, #3
 8000aa4:	f000 f80e 	bl	8000ac4 <HAL_InitTick>
 8000aa8:	1e03      	subs	r3, r0, #0
 8000aaa:	d003      	beq.n	8000ab4 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	e001      	b.n	8000ab8 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ab4:	f7ff fe7c 	bl	80007b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab8:	1dfb      	adds	r3, r7, #7
 8000aba:	781b      	ldrb	r3, [r3, #0]
}
 8000abc:	0018      	movs	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b002      	add	sp, #8
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000acc:	230f      	movs	r3, #15
 8000ace:	18fb      	adds	r3, r7, r3
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b4c <HAL_InitTick+0x88>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d02b      	beq.n	8000b34 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000adc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b50 <HAL_InitTick+0x8c>)
 8000ade:	681c      	ldr	r4, [r3, #0]
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <HAL_InitTick+0x88>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	0019      	movs	r1, r3
 8000ae6:	23fa      	movs	r3, #250	@ 0xfa
 8000ae8:	0098      	lsls	r0, r3, #2
 8000aea:	f7ff fb0d 	bl	8000108 <__udivsi3>
 8000aee:	0003      	movs	r3, r0
 8000af0:	0019      	movs	r1, r3
 8000af2:	0020      	movs	r0, r4
 8000af4:	f7ff fb08 	bl	8000108 <__udivsi3>
 8000af8:	0003      	movs	r3, r0
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 fd69 	bl	80015d2 <HAL_SYSTICK_Config>
 8000b00:	1e03      	subs	r3, r0, #0
 8000b02:	d112      	bne.n	8000b2a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b03      	cmp	r3, #3
 8000b08:	d80a      	bhi.n	8000b20 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	425b      	negs	r3, r3
 8000b10:	2200      	movs	r2, #0
 8000b12:	0018      	movs	r0, r3
 8000b14:	f000 fd48 	bl	80015a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b18:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <HAL_InitTick+0x90>)
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	e00d      	b.n	8000b3c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b20:	230f      	movs	r3, #15
 8000b22:	18fb      	adds	r3, r7, r3
 8000b24:	2201      	movs	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
 8000b28:	e008      	b.n	8000b3c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	18fb      	adds	r3, r7, r3
 8000b2e:	2201      	movs	r2, #1
 8000b30:	701a      	strb	r2, [r3, #0]
 8000b32:	e003      	b.n	8000b3c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b34:	230f      	movs	r3, #15
 8000b36:	18fb      	adds	r3, r7, r3
 8000b38:	2201      	movs	r2, #1
 8000b3a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	781b      	ldrb	r3, [r3, #0]
}
 8000b42:	0018      	movs	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b005      	add	sp, #20
 8000b48:	bd90      	pop	{r4, r7, pc}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000004 	.word	0x20000004

08000b58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b5c:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <HAL_IncTick+0x1c>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	001a      	movs	r2, r3
 8000b62:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <HAL_IncTick+0x20>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	18d2      	adds	r2, r2, r3
 8000b68:	4b03      	ldr	r3, [pc, #12]	@ (8000b78 <HAL_IncTick+0x20>)
 8000b6a:	601a      	str	r2, [r3, #0]
}
 8000b6c:	46c0      	nop			@ (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000134 	.word	0x20000134

08000b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b02      	ldr	r3, [pc, #8]	@ (8000b8c <HAL_GetTick+0x10>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	0018      	movs	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	20000134 	.word	0x20000134

08000b90 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a05      	ldr	r2, [pc, #20]	@ (8000bb4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	601a      	str	r2, [r3, #0]
}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b002      	add	sp, #8
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			@ (mov r8, r8)
 8000bb4:	ff3fffff 	.word	0xff3fffff

08000bb8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	23c0      	movs	r3, #192	@ 0xc0
 8000bc6:	041b      	lsls	r3, r3, #16
 8000bc8:	4013      	ands	r3, r2
}
 8000bca:	0018      	movs	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b002      	add	sp, #8
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b084      	sub	sp, #16
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	60f8      	str	r0, [r7, #12]
 8000bda:	60b9      	str	r1, [r7, #8]
 8000bdc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	2104      	movs	r1, #4
 8000be6:	400a      	ands	r2, r1
 8000be8:	2107      	movs	r1, #7
 8000bea:	4091      	lsls	r1, r2
 8000bec:	000a      	movs	r2, r1
 8000bee:	43d2      	mvns	r2, r2
 8000bf0:	401a      	ands	r2, r3
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	2104      	movs	r1, #4
 8000bf6:	400b      	ands	r3, r1
 8000bf8:	6879      	ldr	r1, [r7, #4]
 8000bfa:	4099      	lsls	r1, r3
 8000bfc:	000b      	movs	r3, r1
 8000bfe:	431a      	orrs	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000c04:	46c0      	nop			@ (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b004      	add	sp, #16
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	400a      	ands	r2, r1
 8000c20:	2107      	movs	r1, #7
 8000c22:	4091      	lsls	r1, r2
 8000c24:	000a      	movs	r2, r1
 8000c26:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	2104      	movs	r1, #4
 8000c2c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000c2e:	40da      	lsrs	r2, r3
 8000c30:	0013      	movs	r3, r2
}
 8000c32:	0018      	movs	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b002      	add	sp, #8
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b084      	sub	sp, #16
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	60f8      	str	r0, [r7, #12]
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	211f      	movs	r1, #31
 8000c4e:	400a      	ands	r2, r1
 8000c50:	210f      	movs	r1, #15
 8000c52:	4091      	lsls	r1, r2
 8000c54:	000a      	movs	r2, r1
 8000c56:	43d2      	mvns	r2, r2
 8000c58:	401a      	ands	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	0e9b      	lsrs	r3, r3, #26
 8000c5e:	210f      	movs	r1, #15
 8000c60:	4019      	ands	r1, r3
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	201f      	movs	r0, #31
 8000c66:	4003      	ands	r3, r0
 8000c68:	4099      	lsls	r1, r3
 8000c6a:	000b      	movs	r3, r1
 8000c6c:	431a      	orrs	r2, r3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b004      	add	sp, #16
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	025b      	lsls	r3, r3, #9
 8000c8c:	0a5b      	lsrs	r3, r3, #9
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c94:	46c0      	nop			@ (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b002      	add	sp, #8
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	0252      	lsls	r2, r2, #9
 8000cae:	0a52      	lsrs	r2, r2, #9
 8000cb0:	43d2      	mvns	r2, r2
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000cb8:	46c0      	nop			@ (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b002      	add	sp, #8
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	68ba      	ldr	r2, [r7, #8]
 8000cd2:	0212      	lsls	r2, r2, #8
 8000cd4:	43d2      	mvns	r2, r2
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	021b      	lsls	r3, r3, #8
 8000cdc:	6879      	ldr	r1, [r7, #4]
 8000cde:	400b      	ands	r3, r1
 8000ce0:	4904      	ldr	r1, [pc, #16]	@ (8000cf4 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000ce2:	400b      	ands	r3, r1
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b004      	add	sp, #16
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	7fffff00 	.word	0x7fffff00

08000cf8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	4a05      	ldr	r2, [pc, #20]	@ (8000d1c <LL_ADC_EnableInternalRegulator+0x24>)
 8000d06:	4013      	ands	r3, r2
 8000d08:	2280      	movs	r2, #128	@ 0x80
 8000d0a:	0552      	lsls	r2, r2, #21
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000d12:	46c0      	nop			@ (mov r8, r8)
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b002      	add	sp, #8
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	6fffffe8 	.word	0x6fffffe8

08000d20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	2380      	movs	r3, #128	@ 0x80
 8000d2e:	055b      	lsls	r3, r3, #21
 8000d30:	401a      	ands	r2, r3
 8000d32:	2380      	movs	r3, #128	@ 0x80
 8000d34:	055b      	lsls	r3, r3, #21
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d101      	bne.n	8000d3e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e000      	b.n	8000d40 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	0018      	movs	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b002      	add	sp, #8
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	2201      	movs	r2, #1
 8000d56:	4013      	ands	r3, r2
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d101      	bne.n	8000d60 <LL_ADC_IsEnabled+0x18>
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e000      	b.n	8000d62 <LL_ADC_IsEnabled+0x1a>
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	0018      	movs	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b002      	add	sp, #8
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	2204      	movs	r2, #4
 8000d78:	4013      	ands	r3, r2
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	d101      	bne.n	8000d82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e000      	b.n	8000d84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d82:	2300      	movs	r3, #0
}
 8000d84:	0018      	movs	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b002      	add	sp, #8
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d94:	231f      	movs	r3, #31
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e17e      	b.n	80010b0 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d10a      	bne.n	8000dd0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f7ff fd1b 	bl	80007f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2254      	movs	r2, #84	@ 0x54
 8000dcc:	2100      	movs	r1, #0
 8000dce:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f7ff ffa3 	bl	8000d20 <LL_ADC_IsInternalRegulatorEnabled>
 8000dda:	1e03      	subs	r3, r0, #0
 8000ddc:	d114      	bne.n	8000e08 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	0018      	movs	r0, r3
 8000de4:	f7ff ff88 	bl	8000cf8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000de8:	4bb3      	ldr	r3, [pc, #716]	@ (80010b8 <HAL_ADC_Init+0x32c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	49b3      	ldr	r1, [pc, #716]	@ (80010bc <HAL_ADC_Init+0x330>)
 8000dee:	0018      	movs	r0, r3
 8000df0:	f7ff f98a 	bl	8000108 <__udivsi3>
 8000df4:	0003      	movs	r3, r0
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000dfa:	e002      	b.n	8000e02 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1f9      	bne.n	8000dfc <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff ff87 	bl	8000d20 <LL_ADC_IsInternalRegulatorEnabled>
 8000e12:	1e03      	subs	r3, r0, #0
 8000e14:	d10f      	bne.n	8000e36 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e1a:	2210      	movs	r2, #16
 8000e1c:	431a      	orrs	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e26:	2201      	movs	r2, #1
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000e2e:	231f      	movs	r3, #31
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	2201      	movs	r2, #1
 8000e34:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f7ff ff95 	bl	8000d6a <LL_ADC_REG_IsConversionOngoing>
 8000e40:	0003      	movs	r3, r0
 8000e42:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e48:	2210      	movs	r2, #16
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d000      	beq.n	8000e50 <HAL_ADC_Init+0xc4>
 8000e4e:	e122      	b.n	8001096 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d000      	beq.n	8000e58 <HAL_ADC_Init+0xcc>
 8000e56:	e11e      	b.n	8001096 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e5c:	4a98      	ldr	r2, [pc, #608]	@ (80010c0 <HAL_ADC_Init+0x334>)
 8000e5e:	4013      	ands	r3, r2
 8000e60:	2202      	movs	r2, #2
 8000e62:	431a      	orrs	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f7ff ff6b 	bl	8000d48 <LL_ADC_IsEnabled>
 8000e72:	1e03      	subs	r3, r0, #0
 8000e74:	d000      	beq.n	8000e78 <HAL_ADC_Init+0xec>
 8000e76:	e0ad      	b.n	8000fd4 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	7e1b      	ldrb	r3, [r3, #24]
 8000e80:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000e82:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	7e5b      	ldrb	r3, [r3, #25]
 8000e88:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000e8a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	7e9b      	ldrb	r3, [r3, #26]
 8000e90:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000e92:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d002      	beq.n	8000ea2 <HAL_ADC_Init+0x116>
 8000e9c:	2380      	movs	r3, #128	@ 0x80
 8000e9e:	015b      	lsls	r3, r3, #5
 8000ea0:	e000      	b.n	8000ea4 <HAL_ADC_Init+0x118>
 8000ea2:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000ea4:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000eaa:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	691b      	ldr	r3, [r3, #16]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	da04      	bge.n	8000ebe <HAL_ADC_Init+0x132>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	085b      	lsrs	r3, r3, #1
 8000ebc:	e001      	b.n	8000ec2 <HAL_ADC_Init+0x136>
 8000ebe:	2380      	movs	r3, #128	@ 0x80
 8000ec0:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000ec2:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	212c      	movs	r1, #44	@ 0x2c
 8000ec8:	5c5b      	ldrb	r3, [r3, r1]
 8000eca:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000ecc:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2220      	movs	r2, #32
 8000ed8:	5c9b      	ldrb	r3, [r3, r2]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d115      	bne.n	8000f0a <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	7e9b      	ldrb	r3, [r3, #26]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d105      	bne.n	8000ef2 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	2280      	movs	r2, #128	@ 0x80
 8000eea:	0252      	lsls	r2, r2, #9
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
 8000ef0:	e00b      	b.n	8000f0a <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef6:	2220      	movs	r2, #32
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f02:	2201      	movs	r2, #1
 8000f04:	431a      	orrs	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d00a      	beq.n	8000f28 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f16:	23e0      	movs	r3, #224	@ 0xe0
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000f20:	4313      	orrs	r3, r2
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	4a65      	ldr	r2, [pc, #404]	@ (80010c4 <HAL_ADC_Init+0x338>)
 8000f30:	4013      	ands	r3, r2
 8000f32:	0019      	movs	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	0f9b      	lsrs	r3, r3, #30
 8000f44:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	223c      	movs	r2, #60	@ 0x3c
 8000f56:	5c9b      	ldrb	r3, [r3, r2]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d111      	bne.n	8000f80 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	0f9b      	lsrs	r3, r3, #30
 8000f62:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f68:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000f6e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000f74:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	4a50      	ldr	r2, [pc, #320]	@ (80010c8 <HAL_ADC_Init+0x33c>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	0019      	movs	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685a      	ldr	r2, [r3, #4]
 8000f9a:	23c0      	movs	r3, #192	@ 0xc0
 8000f9c:	061b      	lsls	r3, r3, #24
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d018      	beq.n	8000fd4 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000fa6:	2380      	movs	r3, #128	@ 0x80
 8000fa8:	05db      	lsls	r3, r3, #23
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d012      	beq.n	8000fd4 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000fb2:	2380      	movs	r3, #128	@ 0x80
 8000fb4:	061b      	lsls	r3, r3, #24
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d00c      	beq.n	8000fd4 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000fba:	4b44      	ldr	r3, [pc, #272]	@ (80010cc <HAL_ADC_Init+0x340>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a44      	ldr	r2, [pc, #272]	@ (80010d0 <HAL_ADC_Init+0x344>)
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	0019      	movs	r1, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	23f0      	movs	r3, #240	@ 0xf0
 8000fca:	039b      	lsls	r3, r3, #14
 8000fcc:	401a      	ands	r2, r3
 8000fce:	4b3f      	ldr	r3, [pc, #252]	@ (80010cc <HAL_ADC_Init+0x340>)
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6818      	ldr	r0, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fdc:	001a      	movs	r2, r3
 8000fde:	2100      	movs	r1, #0
 8000fe0:	f7ff fdf7 	bl	8000bd2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fec:	4939      	ldr	r1, [pc, #228]	@ (80010d4 <HAL_ADC_Init+0x348>)
 8000fee:	001a      	movs	r2, r3
 8000ff0:	f7ff fdef 	bl	8000bd2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d109      	bne.n	8001010 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2110      	movs	r1, #16
 8001008:	4249      	negs	r1, r1
 800100a:	430a      	orrs	r2, r1
 800100c:	629a      	str	r2, [r3, #40]	@ 0x28
 800100e:	e018      	b.n	8001042 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	691a      	ldr	r2, [r3, #16]
 8001014:	2380      	movs	r3, #128	@ 0x80
 8001016:	039b      	lsls	r3, r3, #14
 8001018:	429a      	cmp	r2, r3
 800101a:	d112      	bne.n	8001042 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	3b01      	subs	r3, #1
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	221c      	movs	r2, #28
 800102c:	4013      	ands	r3, r2
 800102e:	2210      	movs	r2, #16
 8001030:	4252      	negs	r2, r2
 8001032:	409a      	lsls	r2, r3
 8001034:	0011      	movs	r1, r2
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	430a      	orrs	r2, r1
 8001040:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2100      	movs	r1, #0
 8001048:	0018      	movs	r0, r3
 800104a:	f7ff fddf 	bl	8000c0c <LL_ADC_GetSamplingTimeCommonChannels>
 800104e:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001054:	429a      	cmp	r2, r3
 8001056:	d10b      	bne.n	8001070 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001062:	2203      	movs	r2, #3
 8001064:	4393      	bics	r3, r2
 8001066:	2201      	movs	r2, #1
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800106e:	e01c      	b.n	80010aa <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001074:	2212      	movs	r2, #18
 8001076:	4393      	bics	r3, r2
 8001078:	2210      	movs	r2, #16
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001084:	2201      	movs	r2, #1
 8001086:	431a      	orrs	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800108c:	231f      	movs	r3, #31
 800108e:	18fb      	adds	r3, r7, r3
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001094:	e009      	b.n	80010aa <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109a:	2210      	movs	r2, #16
 800109c:	431a      	orrs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80010a2:	231f      	movs	r3, #31
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	2201      	movs	r2, #1
 80010a8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80010aa:	231f      	movs	r3, #31
 80010ac:	18fb      	adds	r3, r7, r3
 80010ae:	781b      	ldrb	r3, [r3, #0]
}
 80010b0:	0018      	movs	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b008      	add	sp, #32
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000000 	.word	0x20000000
 80010bc:	00030d40 	.word	0x00030d40
 80010c0:	fffffefd 	.word	0xfffffefd
 80010c4:	ffde0201 	.word	0xffde0201
 80010c8:	1ffffc02 	.word	0x1ffffc02
 80010cc:	40012708 	.word	0x40012708
 80010d0:	ffc3ffff 	.word	0xffc3ffff
 80010d4:	7fffff04 	.word	0x7fffff04

080010d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010e2:	2317      	movs	r3, #23
 80010e4:	18fb      	adds	r3, r7, r3
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2254      	movs	r2, #84	@ 0x54
 80010f2:	5c9b      	ldrb	r3, [r3, r2]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d101      	bne.n	80010fc <HAL_ADC_ConfigChannel+0x24>
 80010f8:	2302      	movs	r3, #2
 80010fa:	e1be      	b.n	800147a <HAL_ADC_ConfigChannel+0x3a2>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2254      	movs	r2, #84	@ 0x54
 8001100:	2101      	movs	r1, #1
 8001102:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	0018      	movs	r0, r3
 800110a:	f7ff fe2e 	bl	8000d6a <LL_ADC_REG_IsConversionOngoing>
 800110e:	1e03      	subs	r3, r0, #0
 8001110:	d000      	beq.n	8001114 <HAL_ADC_ConfigChannel+0x3c>
 8001112:	e1a1      	b.n	8001458 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d100      	bne.n	800111e <HAL_ADC_ConfigChannel+0x46>
 800111c:	e152      	b.n	80013c4 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	691a      	ldr	r2, [r3, #16]
 8001122:	2380      	movs	r3, #128	@ 0x80
 8001124:	061b      	lsls	r3, r3, #24
 8001126:	429a      	cmp	r2, r3
 8001128:	d004      	beq.n	8001134 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800112e:	4ac2      	ldr	r2, [pc, #776]	@ (8001438 <HAL_ADC_ConfigChannel+0x360>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d108      	bne.n	8001146 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	0019      	movs	r1, r3
 800113e:	0010      	movs	r0, r2
 8001140:	f7ff fd9b 	bl	8000c7a <LL_ADC_REG_SetSequencerChAdd>
 8001144:	e0ed      	b.n	8001322 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	211f      	movs	r1, #31
 8001150:	400b      	ands	r3, r1
 8001152:	210f      	movs	r1, #15
 8001154:	4099      	lsls	r1, r3
 8001156:	000b      	movs	r3, r1
 8001158:	43db      	mvns	r3, r3
 800115a:	4013      	ands	r3, r2
 800115c:	0019      	movs	r1, r3
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	025b      	lsls	r3, r3, #9
 8001164:	0a5b      	lsrs	r3, r3, #9
 8001166:	d105      	bne.n	8001174 <HAL_ADC_ConfigChannel+0x9c>
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	0e9b      	lsrs	r3, r3, #26
 800116e:	221f      	movs	r2, #31
 8001170:	4013      	ands	r3, r2
 8001172:	e0bc      	b.n	80012ee <HAL_ADC_ConfigChannel+0x216>
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2201      	movs	r2, #1
 800117a:	4013      	ands	r3, r2
 800117c:	d000      	beq.n	8001180 <HAL_ADC_ConfigChannel+0xa8>
 800117e:	e0b5      	b.n	80012ec <HAL_ADC_ConfigChannel+0x214>
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2202      	movs	r2, #2
 8001186:	4013      	ands	r3, r2
 8001188:	d000      	beq.n	800118c <HAL_ADC_ConfigChannel+0xb4>
 800118a:	e0ad      	b.n	80012e8 <HAL_ADC_ConfigChannel+0x210>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2204      	movs	r2, #4
 8001192:	4013      	ands	r3, r2
 8001194:	d000      	beq.n	8001198 <HAL_ADC_ConfigChannel+0xc0>
 8001196:	e0a5      	b.n	80012e4 <HAL_ADC_ConfigChannel+0x20c>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2208      	movs	r2, #8
 800119e:	4013      	ands	r3, r2
 80011a0:	d000      	beq.n	80011a4 <HAL_ADC_ConfigChannel+0xcc>
 80011a2:	e09d      	b.n	80012e0 <HAL_ADC_ConfigChannel+0x208>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2210      	movs	r2, #16
 80011aa:	4013      	ands	r3, r2
 80011ac:	d000      	beq.n	80011b0 <HAL_ADC_ConfigChannel+0xd8>
 80011ae:	e095      	b.n	80012dc <HAL_ADC_ConfigChannel+0x204>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2220      	movs	r2, #32
 80011b6:	4013      	ands	r3, r2
 80011b8:	d000      	beq.n	80011bc <HAL_ADC_ConfigChannel+0xe4>
 80011ba:	e08d      	b.n	80012d8 <HAL_ADC_ConfigChannel+0x200>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2240      	movs	r2, #64	@ 0x40
 80011c2:	4013      	ands	r3, r2
 80011c4:	d000      	beq.n	80011c8 <HAL_ADC_ConfigChannel+0xf0>
 80011c6:	e085      	b.n	80012d4 <HAL_ADC_ConfigChannel+0x1fc>
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2280      	movs	r2, #128	@ 0x80
 80011ce:	4013      	ands	r3, r2
 80011d0:	d000      	beq.n	80011d4 <HAL_ADC_ConfigChannel+0xfc>
 80011d2:	e07d      	b.n	80012d0 <HAL_ADC_ConfigChannel+0x1f8>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	2380      	movs	r3, #128	@ 0x80
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4013      	ands	r3, r2
 80011de:	d000      	beq.n	80011e2 <HAL_ADC_ConfigChannel+0x10a>
 80011e0:	e074      	b.n	80012cc <HAL_ADC_ConfigChannel+0x1f4>
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	2380      	movs	r3, #128	@ 0x80
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4013      	ands	r3, r2
 80011ec:	d000      	beq.n	80011f0 <HAL_ADC_ConfigChannel+0x118>
 80011ee:	e06b      	b.n	80012c8 <HAL_ADC_ConfigChannel+0x1f0>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	2380      	movs	r3, #128	@ 0x80
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	4013      	ands	r3, r2
 80011fa:	d000      	beq.n	80011fe <HAL_ADC_ConfigChannel+0x126>
 80011fc:	e062      	b.n	80012c4 <HAL_ADC_ConfigChannel+0x1ec>
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	2380      	movs	r3, #128	@ 0x80
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	4013      	ands	r3, r2
 8001208:	d000      	beq.n	800120c <HAL_ADC_ConfigChannel+0x134>
 800120a:	e059      	b.n	80012c0 <HAL_ADC_ConfigChannel+0x1e8>
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	2380      	movs	r3, #128	@ 0x80
 8001212:	015b      	lsls	r3, r3, #5
 8001214:	4013      	ands	r3, r2
 8001216:	d151      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x1e4>
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	2380      	movs	r3, #128	@ 0x80
 800121e:	019b      	lsls	r3, r3, #6
 8001220:	4013      	ands	r3, r2
 8001222:	d149      	bne.n	80012b8 <HAL_ADC_ConfigChannel+0x1e0>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	2380      	movs	r3, #128	@ 0x80
 800122a:	01db      	lsls	r3, r3, #7
 800122c:	4013      	ands	r3, r2
 800122e:	d141      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x1dc>
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	2380      	movs	r3, #128	@ 0x80
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	4013      	ands	r3, r2
 800123a:	d139      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x1d8>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	2380      	movs	r3, #128	@ 0x80
 8001242:	025b      	lsls	r3, r3, #9
 8001244:	4013      	ands	r3, r2
 8001246:	d131      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x1d4>
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	2380      	movs	r3, #128	@ 0x80
 800124e:	029b      	lsls	r3, r3, #10
 8001250:	4013      	ands	r3, r2
 8001252:	d129      	bne.n	80012a8 <HAL_ADC_ConfigChannel+0x1d0>
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	2380      	movs	r3, #128	@ 0x80
 800125a:	02db      	lsls	r3, r3, #11
 800125c:	4013      	ands	r3, r2
 800125e:	d121      	bne.n	80012a4 <HAL_ADC_ConfigChannel+0x1cc>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	2380      	movs	r3, #128	@ 0x80
 8001266:	031b      	lsls	r3, r3, #12
 8001268:	4013      	ands	r3, r2
 800126a:	d119      	bne.n	80012a0 <HAL_ADC_ConfigChannel+0x1c8>
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	2380      	movs	r3, #128	@ 0x80
 8001272:	035b      	lsls	r3, r3, #13
 8001274:	4013      	ands	r3, r2
 8001276:	d111      	bne.n	800129c <HAL_ADC_ConfigChannel+0x1c4>
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	2380      	movs	r3, #128	@ 0x80
 800127e:	039b      	lsls	r3, r3, #14
 8001280:	4013      	ands	r3, r2
 8001282:	d109      	bne.n	8001298 <HAL_ADC_ConfigChannel+0x1c0>
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	2380      	movs	r3, #128	@ 0x80
 800128a:	03db      	lsls	r3, r3, #15
 800128c:	4013      	ands	r3, r2
 800128e:	d001      	beq.n	8001294 <HAL_ADC_ConfigChannel+0x1bc>
 8001290:	2316      	movs	r3, #22
 8001292:	e02c      	b.n	80012ee <HAL_ADC_ConfigChannel+0x216>
 8001294:	2300      	movs	r3, #0
 8001296:	e02a      	b.n	80012ee <HAL_ADC_ConfigChannel+0x216>
 8001298:	2315      	movs	r3, #21
 800129a:	e028      	b.n	80012ee <HAL_ADC_ConfigChannel+0x216>
 800129c:	2314      	movs	r3, #20
 800129e:	e026      	b.n	80012ee <HAL_ADC_ConfigChannel+0x216>
 80012a0:	2313      	movs	r3, #19
 80012a2:	e024      	b.n	80012ee <HAL_ADC_ConfigChannel+0x216>
 80012a4:	2312      	movs	r3, #18
 80012a6:	e022      	b.n	80012ee <HAL_ADC_ConfigChannel+0x216>
 80012a8:	2311      	movs	r3, #17
 80012aa:	e020      	b.n	80012ee <HAL_ADC_ConfigChannel+0x216>
 80012ac:	2310      	movs	r3, #16
 80012ae:	e01e      	b.n	80012ee <HAL_ADC_ConfigChannel+0x216>
 80012b0:	230f      	movs	r3, #15
 80012b2:	e01c      	b.n	80012ee <HAL_ADC_ConfigChannel+0x216>
 80012b4:	230e      	movs	r3, #14
 80012b6:	e01a      	b.n	80012ee <HAL_ADC_ConfigChannel+0x216>
 80012b8:	230d      	movs	r3, #13
 80012ba:	e018      	b.n	80012ee <HAL_ADC_ConfigChannel+0x216>
 80012bc:	230c      	movs	r3, #12
 80012be:	e016      	b.n	80012ee <HAL_ADC_ConfigChannel+0x216>
 80012c0:	230b      	movs	r3, #11
 80012c2:	e014      	b.n	80012ee <HAL_ADC_ConfigChannel+0x216>
 80012c4:	230a      	movs	r3, #10
 80012c6:	e012      	b.n	80012ee <HAL_ADC_ConfigChannel+0x216>
 80012c8:	2309      	movs	r3, #9
 80012ca:	e010      	b.n	80012ee <HAL_ADC_ConfigChannel+0x216>
 80012cc:	2308      	movs	r3, #8
 80012ce:	e00e      	b.n	80012ee <HAL_ADC_ConfigChannel+0x216>
 80012d0:	2307      	movs	r3, #7
 80012d2:	e00c      	b.n	80012ee <HAL_ADC_ConfigChannel+0x216>
 80012d4:	2306      	movs	r3, #6
 80012d6:	e00a      	b.n	80012ee <HAL_ADC_ConfigChannel+0x216>
 80012d8:	2305      	movs	r3, #5
 80012da:	e008      	b.n	80012ee <HAL_ADC_ConfigChannel+0x216>
 80012dc:	2304      	movs	r3, #4
 80012de:	e006      	b.n	80012ee <HAL_ADC_ConfigChannel+0x216>
 80012e0:	2303      	movs	r3, #3
 80012e2:	e004      	b.n	80012ee <HAL_ADC_ConfigChannel+0x216>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e002      	b.n	80012ee <HAL_ADC_ConfigChannel+0x216>
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <HAL_ADC_ConfigChannel+0x216>
 80012ec:	2300      	movs	r3, #0
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	6852      	ldr	r2, [r2, #4]
 80012f2:	201f      	movs	r0, #31
 80012f4:	4002      	ands	r2, r0
 80012f6:	4093      	lsls	r3, r2
 80012f8:	000a      	movs	r2, r1
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	1c5a      	adds	r2, r3, #1
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	429a      	cmp	r2, r3
 800130e:	d808      	bhi.n	8001322 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6818      	ldr	r0, [r3, #0]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	6859      	ldr	r1, [r3, #4]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	001a      	movs	r2, r3
 800131e:	f7ff fc8c 	bl	8000c3a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6818      	ldr	r0, [r3, #0]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	6819      	ldr	r1, [r3, #0]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	001a      	movs	r2, r3
 8001330:	f7ff fcc6 	bl	8000cc0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db00      	blt.n	800133e <HAL_ADC_ConfigChannel+0x266>
 800133c:	e096      	b.n	800146c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800133e:	4b3f      	ldr	r3, [pc, #252]	@ (800143c <HAL_ADC_ConfigChannel+0x364>)
 8001340:	0018      	movs	r0, r3
 8001342:	f7ff fc39 	bl	8000bb8 <LL_ADC_GetCommonPathInternalCh>
 8001346:	0003      	movs	r3, r0
 8001348:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a3c      	ldr	r2, [pc, #240]	@ (8001440 <HAL_ADC_ConfigChannel+0x368>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d123      	bne.n	800139c <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	2380      	movs	r3, #128	@ 0x80
 8001358:	041b      	lsls	r3, r3, #16
 800135a:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800135c:	d11e      	bne.n	800139c <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	2280      	movs	r2, #128	@ 0x80
 8001362:	0412      	lsls	r2, r2, #16
 8001364:	4313      	orrs	r3, r2
 8001366:	4a35      	ldr	r2, [pc, #212]	@ (800143c <HAL_ADC_ConfigChannel+0x364>)
 8001368:	0019      	movs	r1, r3
 800136a:	0010      	movs	r0, r2
 800136c:	f7ff fc10 	bl	8000b90 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001370:	4b34      	ldr	r3, [pc, #208]	@ (8001444 <HAL_ADC_ConfigChannel+0x36c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4934      	ldr	r1, [pc, #208]	@ (8001448 <HAL_ADC_ConfigChannel+0x370>)
 8001376:	0018      	movs	r0, r3
 8001378:	f7fe fec6 	bl	8000108 <__udivsi3>
 800137c:	0003      	movs	r3, r0
 800137e:	001a      	movs	r2, r3
 8001380:	0013      	movs	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	189b      	adds	r3, r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	3301      	adds	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800138c:	e002      	b.n	8001394 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	3b01      	subs	r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f9      	bne.n	800138e <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800139a:	e067      	b.n	800146c <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a2a      	ldr	r2, [pc, #168]	@ (800144c <HAL_ADC_ConfigChannel+0x374>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d162      	bne.n	800146c <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	2380      	movs	r3, #128	@ 0x80
 80013aa:	03db      	lsls	r3, r3, #15
 80013ac:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80013ae:	d15d      	bne.n	800146c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	2280      	movs	r2, #128	@ 0x80
 80013b4:	03d2      	lsls	r2, r2, #15
 80013b6:	4313      	orrs	r3, r2
 80013b8:	4a20      	ldr	r2, [pc, #128]	@ (800143c <HAL_ADC_ConfigChannel+0x364>)
 80013ba:	0019      	movs	r1, r3
 80013bc:	0010      	movs	r0, r2
 80013be:	f7ff fbe7 	bl	8000b90 <LL_ADC_SetCommonPathInternalCh>
 80013c2:	e053      	b.n	800146c <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691a      	ldr	r2, [r3, #16]
 80013c8:	2380      	movs	r3, #128	@ 0x80
 80013ca:	061b      	lsls	r3, r3, #24
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d004      	beq.n	80013da <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80013d4:	4a18      	ldr	r2, [pc, #96]	@ (8001438 <HAL_ADC_ConfigChannel+0x360>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d107      	bne.n	80013ea <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	0019      	movs	r1, r3
 80013e4:	0010      	movs	r0, r2
 80013e6:	f7ff fc59 	bl	8000c9c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	da3c      	bge.n	800146c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013f2:	4b12      	ldr	r3, [pc, #72]	@ (800143c <HAL_ADC_ConfigChannel+0x364>)
 80013f4:	0018      	movs	r0, r3
 80013f6:	f7ff fbdf 	bl	8000bb8 <LL_ADC_GetCommonPathInternalCh>
 80013fa:	0003      	movs	r3, r0
 80013fc:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a0f      	ldr	r2, [pc, #60]	@ (8001440 <HAL_ADC_ConfigChannel+0x368>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d108      	bne.n	800141a <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4a11      	ldr	r2, [pc, #68]	@ (8001450 <HAL_ADC_ConfigChannel+0x378>)
 800140c:	4013      	ands	r3, r2
 800140e:	4a0b      	ldr	r2, [pc, #44]	@ (800143c <HAL_ADC_ConfigChannel+0x364>)
 8001410:	0019      	movs	r1, r3
 8001412:	0010      	movs	r0, r2
 8001414:	f7ff fbbc 	bl	8000b90 <LL_ADC_SetCommonPathInternalCh>
 8001418:	e028      	b.n	800146c <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a0b      	ldr	r2, [pc, #44]	@ (800144c <HAL_ADC_ConfigChannel+0x374>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d123      	bne.n	800146c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4a0b      	ldr	r2, [pc, #44]	@ (8001454 <HAL_ADC_ConfigChannel+0x37c>)
 8001428:	4013      	ands	r3, r2
 800142a:	4a04      	ldr	r2, [pc, #16]	@ (800143c <HAL_ADC_ConfigChannel+0x364>)
 800142c:	0019      	movs	r1, r3
 800142e:	0010      	movs	r0, r2
 8001430:	f7ff fbae 	bl	8000b90 <LL_ADC_SetCommonPathInternalCh>
 8001434:	e01a      	b.n	800146c <HAL_ADC_ConfigChannel+0x394>
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	80000004 	.word	0x80000004
 800143c:	40012708 	.word	0x40012708
 8001440:	a4000200 	.word	0xa4000200
 8001444:	20000000 	.word	0x20000000
 8001448:	00030d40 	.word	0x00030d40
 800144c:	a8000400 	.word	0xa8000400
 8001450:	ff7fffff 	.word	0xff7fffff
 8001454:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145c:	2220      	movs	r2, #32
 800145e:	431a      	orrs	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001464:	2317      	movs	r3, #23
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2254      	movs	r2, #84	@ 0x54
 8001470:	2100      	movs	r1, #0
 8001472:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001474:	2317      	movs	r3, #23
 8001476:	18fb      	adds	r3, r7, r3
 8001478:	781b      	ldrb	r3, [r3, #0]
}
 800147a:	0018      	movs	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	b006      	add	sp, #24
 8001480:	bd80      	pop	{r7, pc}
 8001482:	46c0      	nop			@ (mov r8, r8)

08001484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	0002      	movs	r2, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	1dfb      	adds	r3, r7, #7
 8001490:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001492:	1dfb      	adds	r3, r7, #7
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b7f      	cmp	r3, #127	@ 0x7f
 8001498:	d828      	bhi.n	80014ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800149a:	4a2f      	ldr	r2, [pc, #188]	@ (8001558 <__NVIC_SetPriority+0xd4>)
 800149c:	1dfb      	adds	r3, r7, #7
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	089b      	lsrs	r3, r3, #2
 80014a4:	33c0      	adds	r3, #192	@ 0xc0
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	589b      	ldr	r3, [r3, r2]
 80014aa:	1dfa      	adds	r2, r7, #7
 80014ac:	7812      	ldrb	r2, [r2, #0]
 80014ae:	0011      	movs	r1, r2
 80014b0:	2203      	movs	r2, #3
 80014b2:	400a      	ands	r2, r1
 80014b4:	00d2      	lsls	r2, r2, #3
 80014b6:	21ff      	movs	r1, #255	@ 0xff
 80014b8:	4091      	lsls	r1, r2
 80014ba:	000a      	movs	r2, r1
 80014bc:	43d2      	mvns	r2, r2
 80014be:	401a      	ands	r2, r3
 80014c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	019b      	lsls	r3, r3, #6
 80014c6:	22ff      	movs	r2, #255	@ 0xff
 80014c8:	401a      	ands	r2, r3
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	0018      	movs	r0, r3
 80014d0:	2303      	movs	r3, #3
 80014d2:	4003      	ands	r3, r0
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014d8:	481f      	ldr	r0, [pc, #124]	@ (8001558 <__NVIC_SetPriority+0xd4>)
 80014da:	1dfb      	adds	r3, r7, #7
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	b25b      	sxtb	r3, r3
 80014e0:	089b      	lsrs	r3, r3, #2
 80014e2:	430a      	orrs	r2, r1
 80014e4:	33c0      	adds	r3, #192	@ 0xc0
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014ea:	e031      	b.n	8001550 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014ec:	4a1b      	ldr	r2, [pc, #108]	@ (800155c <__NVIC_SetPriority+0xd8>)
 80014ee:	1dfb      	adds	r3, r7, #7
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	0019      	movs	r1, r3
 80014f4:	230f      	movs	r3, #15
 80014f6:	400b      	ands	r3, r1
 80014f8:	3b08      	subs	r3, #8
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	3306      	adds	r3, #6
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	18d3      	adds	r3, r2, r3
 8001502:	3304      	adds	r3, #4
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	1dfa      	adds	r2, r7, #7
 8001508:	7812      	ldrb	r2, [r2, #0]
 800150a:	0011      	movs	r1, r2
 800150c:	2203      	movs	r2, #3
 800150e:	400a      	ands	r2, r1
 8001510:	00d2      	lsls	r2, r2, #3
 8001512:	21ff      	movs	r1, #255	@ 0xff
 8001514:	4091      	lsls	r1, r2
 8001516:	000a      	movs	r2, r1
 8001518:	43d2      	mvns	r2, r2
 800151a:	401a      	ands	r2, r3
 800151c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	019b      	lsls	r3, r3, #6
 8001522:	22ff      	movs	r2, #255	@ 0xff
 8001524:	401a      	ands	r2, r3
 8001526:	1dfb      	adds	r3, r7, #7
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	0018      	movs	r0, r3
 800152c:	2303      	movs	r3, #3
 800152e:	4003      	ands	r3, r0
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001534:	4809      	ldr	r0, [pc, #36]	@ (800155c <__NVIC_SetPriority+0xd8>)
 8001536:	1dfb      	adds	r3, r7, #7
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	001c      	movs	r4, r3
 800153c:	230f      	movs	r3, #15
 800153e:	4023      	ands	r3, r4
 8001540:	3b08      	subs	r3, #8
 8001542:	089b      	lsrs	r3, r3, #2
 8001544:	430a      	orrs	r2, r1
 8001546:	3306      	adds	r3, #6
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	18c3      	adds	r3, r0, r3
 800154c:	3304      	adds	r3, #4
 800154e:	601a      	str	r2, [r3, #0]
}
 8001550:	46c0      	nop			@ (mov r8, r8)
 8001552:	46bd      	mov	sp, r7
 8001554:	b003      	add	sp, #12
 8001556:	bd90      	pop	{r4, r7, pc}
 8001558:	e000e100 	.word	0xe000e100
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	1e5a      	subs	r2, r3, #1
 800156c:	2380      	movs	r3, #128	@ 0x80
 800156e:	045b      	lsls	r3, r3, #17
 8001570:	429a      	cmp	r2, r3
 8001572:	d301      	bcc.n	8001578 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001574:	2301      	movs	r3, #1
 8001576:	e010      	b.n	800159a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001578:	4b0a      	ldr	r3, [pc, #40]	@ (80015a4 <SysTick_Config+0x44>)
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	3a01      	subs	r2, #1
 800157e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001580:	2301      	movs	r3, #1
 8001582:	425b      	negs	r3, r3
 8001584:	2103      	movs	r1, #3
 8001586:	0018      	movs	r0, r3
 8001588:	f7ff ff7c 	bl	8001484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <SysTick_Config+0x44>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	@ (80015a4 <SysTick_Config+0x44>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	0018      	movs	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	b002      	add	sp, #8
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			@ (mov r8, r8)
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
 80015b2:	210f      	movs	r1, #15
 80015b4:	187b      	adds	r3, r7, r1
 80015b6:	1c02      	adds	r2, r0, #0
 80015b8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	187b      	adds	r3, r7, r1
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	0011      	movs	r1, r2
 80015c4:	0018      	movs	r0, r3
 80015c6:	f7ff ff5d 	bl	8001484 <__NVIC_SetPriority>
}
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b004      	add	sp, #16
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	0018      	movs	r0, r3
 80015de:	f7ff ffbf 	bl	8001560 <SysTick_Config>
 80015e2:	0003      	movs	r3, r0
}
 80015e4:	0018      	movs	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b002      	add	sp, #8
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80015fa:	e14d      	b.n	8001898 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2101      	movs	r1, #1
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4091      	lsls	r1, r2
 8001606:	000a      	movs	r2, r1
 8001608:	4013      	ands	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d100      	bne.n	8001614 <HAL_GPIO_Init+0x28>
 8001612:	e13e      	b.n	8001892 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b02      	cmp	r3, #2
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x38>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b12      	cmp	r3, #18
 8001622:	d125      	bne.n	8001670 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	08da      	lsrs	r2, r3, #3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3208      	adds	r2, #8
 800162c:	0092      	lsls	r2, r2, #2
 800162e:	58d3      	ldr	r3, [r2, r3]
 8001630:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	2207      	movs	r2, #7
 8001636:	4013      	ands	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	220f      	movs	r2, #15
 800163c:	409a      	lsls	r2, r3
 800163e:	0013      	movs	r3, r2
 8001640:	43da      	mvns	r2, r3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	4013      	ands	r3, r2
 8001646:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	220f      	movs	r2, #15
 800164e:	401a      	ands	r2, r3
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	2107      	movs	r1, #7
 8001654:	400b      	ands	r3, r1
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	409a      	lsls	r2, r3
 800165a:	0013      	movs	r3, r2
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	4313      	orrs	r3, r2
 8001660:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	08da      	lsrs	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3208      	adds	r2, #8
 800166a:	0092      	lsls	r2, r2, #2
 800166c:	6979      	ldr	r1, [r7, #20]
 800166e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2203      	movs	r2, #3
 800167c:	409a      	lsls	r2, r3
 800167e:	0013      	movs	r3, r2
 8001680:	43da      	mvns	r2, r3
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	4013      	ands	r3, r2
 8001686:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2203      	movs	r2, #3
 800168e:	401a      	ands	r2, r3
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	409a      	lsls	r2, r3
 8001696:	0013      	movs	r3, r2
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	4313      	orrs	r3, r2
 800169c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d00b      	beq.n	80016c4 <HAL_GPIO_Init+0xd8>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d007      	beq.n	80016c4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016b8:	2b11      	cmp	r3, #17
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b12      	cmp	r3, #18
 80016c2:	d130      	bne.n	8001726 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	2203      	movs	r2, #3
 80016d0:	409a      	lsls	r2, r3
 80016d2:	0013      	movs	r3, r2
 80016d4:	43da      	mvns	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	4013      	ands	r3, r2
 80016da:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	68da      	ldr	r2, [r3, #12]
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	409a      	lsls	r2, r3
 80016e6:	0013      	movs	r3, r2
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016fa:	2201      	movs	r2, #1
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	409a      	lsls	r2, r3
 8001700:	0013      	movs	r3, r2
 8001702:	43da      	mvns	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	4013      	ands	r3, r2
 8001708:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	091b      	lsrs	r3, r3, #4
 8001710:	2201      	movs	r2, #1
 8001712:	401a      	ands	r2, r3
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	409a      	lsls	r2, r3
 8001718:	0013      	movs	r3, r2
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	4313      	orrs	r3, r2
 800171e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b03      	cmp	r3, #3
 800172c:	d017      	beq.n	800175e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	2203      	movs	r2, #3
 800173a:	409a      	lsls	r2, r3
 800173c:	0013      	movs	r3, r2
 800173e:	43da      	mvns	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	4013      	ands	r3, r2
 8001744:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	409a      	lsls	r2, r3
 8001750:	0013      	movs	r3, r2
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	4313      	orrs	r3, r2
 8001756:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	2380      	movs	r3, #128	@ 0x80
 8001764:	055b      	lsls	r3, r3, #21
 8001766:	4013      	ands	r3, r2
 8001768:	d100      	bne.n	800176c <HAL_GPIO_Init+0x180>
 800176a:	e092      	b.n	8001892 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800176c:	4a50      	ldr	r2, [pc, #320]	@ (80018b0 <HAL_GPIO_Init+0x2c4>)
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	089b      	lsrs	r3, r3, #2
 8001772:	3318      	adds	r3, #24
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	589b      	ldr	r3, [r3, r2]
 8001778:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	2203      	movs	r2, #3
 800177e:	4013      	ands	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	220f      	movs	r2, #15
 8001784:	409a      	lsls	r2, r3
 8001786:	0013      	movs	r3, r2
 8001788:	43da      	mvns	r2, r3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	4013      	ands	r3, r2
 800178e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	23a0      	movs	r3, #160	@ 0xa0
 8001794:	05db      	lsls	r3, r3, #23
 8001796:	429a      	cmp	r2, r3
 8001798:	d013      	beq.n	80017c2 <HAL_GPIO_Init+0x1d6>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a45      	ldr	r2, [pc, #276]	@ (80018b4 <HAL_GPIO_Init+0x2c8>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d00d      	beq.n	80017be <HAL_GPIO_Init+0x1d2>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a44      	ldr	r2, [pc, #272]	@ (80018b8 <HAL_GPIO_Init+0x2cc>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d007      	beq.n	80017ba <HAL_GPIO_Init+0x1ce>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a43      	ldr	r2, [pc, #268]	@ (80018bc <HAL_GPIO_Init+0x2d0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d101      	bne.n	80017b6 <HAL_GPIO_Init+0x1ca>
 80017b2:	2305      	movs	r3, #5
 80017b4:	e006      	b.n	80017c4 <HAL_GPIO_Init+0x1d8>
 80017b6:	2306      	movs	r3, #6
 80017b8:	e004      	b.n	80017c4 <HAL_GPIO_Init+0x1d8>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e002      	b.n	80017c4 <HAL_GPIO_Init+0x1d8>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <HAL_GPIO_Init+0x1d8>
 80017c2:	2300      	movs	r3, #0
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	2103      	movs	r1, #3
 80017c8:	400a      	ands	r2, r1
 80017ca:	00d2      	lsls	r2, r2, #3
 80017cc:	4093      	lsls	r3, r2
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80017d4:	4936      	ldr	r1, [pc, #216]	@ (80018b0 <HAL_GPIO_Init+0x2c4>)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	3318      	adds	r3, #24
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80017e2:	4a33      	ldr	r2, [pc, #204]	@ (80018b0 <HAL_GPIO_Init+0x2c4>)
 80017e4:	2380      	movs	r3, #128	@ 0x80
 80017e6:	58d3      	ldr	r3, [r2, r3]
 80017e8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	43da      	mvns	r2, r3
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	4013      	ands	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	2380      	movs	r3, #128	@ 0x80
 80017fa:	025b      	lsls	r3, r3, #9
 80017fc:	4013      	ands	r3, r2
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4313      	orrs	r3, r2
 8001806:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001808:	4929      	ldr	r1, [pc, #164]	@ (80018b0 <HAL_GPIO_Init+0x2c4>)
 800180a:	2280      	movs	r2, #128	@ 0x80
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001810:	4a27      	ldr	r2, [pc, #156]	@ (80018b0 <HAL_GPIO_Init+0x2c4>)
 8001812:	2384      	movs	r3, #132	@ 0x84
 8001814:	58d3      	ldr	r3, [r2, r3]
 8001816:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	43da      	mvns	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	4013      	ands	r3, r2
 8001820:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	2380      	movs	r3, #128	@ 0x80
 8001828:	029b      	lsls	r3, r3, #10
 800182a:	4013      	ands	r3, r2
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4313      	orrs	r3, r2
 8001834:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001836:	491e      	ldr	r1, [pc, #120]	@ (80018b0 <HAL_GPIO_Init+0x2c4>)
 8001838:	2284      	movs	r2, #132	@ 0x84
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800183e:	4b1c      	ldr	r3, [pc, #112]	@ (80018b0 <HAL_GPIO_Init+0x2c4>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	43da      	mvns	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	4013      	ands	r3, r2
 800184c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	2380      	movs	r3, #128	@ 0x80
 8001854:	035b      	lsls	r3, r3, #13
 8001856:	4013      	ands	r3, r2
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4313      	orrs	r3, r2
 8001860:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001862:	4b13      	ldr	r3, [pc, #76]	@ (80018b0 <HAL_GPIO_Init+0x2c4>)
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001868:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <HAL_GPIO_Init+0x2c4>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	43da      	mvns	r2, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	4013      	ands	r3, r2
 8001876:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	2380      	movs	r3, #128	@ 0x80
 800187e:	039b      	lsls	r3, r3, #14
 8001880:	4013      	ands	r3, r2
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4313      	orrs	r3, r2
 800188a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800188c:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <HAL_GPIO_Init+0x2c4>)
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	3301      	adds	r3, #1
 8001896:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	40da      	lsrs	r2, r3
 80018a0:	1e13      	subs	r3, r2, #0
 80018a2:	d000      	beq.n	80018a6 <HAL_GPIO_Init+0x2ba>
 80018a4:	e6aa      	b.n	80015fc <HAL_GPIO_Init+0x10>
  }
}
 80018a6:	46c0      	nop			@ (mov r8, r8)
 80018a8:	46c0      	nop			@ (mov r8, r8)
 80018aa:	46bd      	mov	sp, r7
 80018ac:	b006      	add	sp, #24
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40021800 	.word	0x40021800
 80018b4:	50000400 	.word	0x50000400
 80018b8:	50000800 	.word	0x50000800
 80018bc:	50001400 	.word	0x50001400

080018c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	0008      	movs	r0, r1
 80018ca:	0011      	movs	r1, r2
 80018cc:	1cbb      	adds	r3, r7, #2
 80018ce:	1c02      	adds	r2, r0, #0
 80018d0:	801a      	strh	r2, [r3, #0]
 80018d2:	1c7b      	adds	r3, r7, #1
 80018d4:	1c0a      	adds	r2, r1, #0
 80018d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018d8:	1c7b      	adds	r3, r7, #1
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d004      	beq.n	80018ea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018e0:	1cbb      	adds	r3, r7, #2
 80018e2:	881a      	ldrh	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018e8:	e003      	b.n	80018f2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ea:	1cbb      	adds	r3, r7, #2
 80018ec:	881a      	ldrh	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018f2:	46c0      	nop			@ (mov r8, r8)
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b002      	add	sp, #8
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e1d0      	b.n	8001cb0 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2201      	movs	r2, #1
 8001914:	4013      	ands	r3, r2
 8001916:	d100      	bne.n	800191a <HAL_RCC_OscConfig+0x1e>
 8001918:	e069      	b.n	80019ee <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800191a:	4bc8      	ldr	r3, [pc, #800]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2238      	movs	r2, #56	@ 0x38
 8001920:	4013      	ands	r3, r2
 8001922:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	2b08      	cmp	r3, #8
 8001928:	d105      	bne.n	8001936 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d15d      	bne.n	80019ee <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e1bc      	b.n	8001cb0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	2380      	movs	r3, #128	@ 0x80
 800193c:	025b      	lsls	r3, r3, #9
 800193e:	429a      	cmp	r2, r3
 8001940:	d107      	bne.n	8001952 <HAL_RCC_OscConfig+0x56>
 8001942:	4bbe      	ldr	r3, [pc, #760]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	4bbd      	ldr	r3, [pc, #756]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001948:	2180      	movs	r1, #128	@ 0x80
 800194a:	0249      	lsls	r1, r1, #9
 800194c:	430a      	orrs	r2, r1
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	e020      	b.n	8001994 <HAL_RCC_OscConfig+0x98>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	23a0      	movs	r3, #160	@ 0xa0
 8001958:	02db      	lsls	r3, r3, #11
 800195a:	429a      	cmp	r2, r3
 800195c:	d10e      	bne.n	800197c <HAL_RCC_OscConfig+0x80>
 800195e:	4bb7      	ldr	r3, [pc, #732]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4bb6      	ldr	r3, [pc, #728]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001964:	2180      	movs	r1, #128	@ 0x80
 8001966:	02c9      	lsls	r1, r1, #11
 8001968:	430a      	orrs	r2, r1
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	4bb3      	ldr	r3, [pc, #716]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4bb2      	ldr	r3, [pc, #712]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001972:	2180      	movs	r1, #128	@ 0x80
 8001974:	0249      	lsls	r1, r1, #9
 8001976:	430a      	orrs	r2, r1
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	e00b      	b.n	8001994 <HAL_RCC_OscConfig+0x98>
 800197c:	4baf      	ldr	r3, [pc, #700]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4bae      	ldr	r3, [pc, #696]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001982:	49af      	ldr	r1, [pc, #700]	@ (8001c40 <HAL_RCC_OscConfig+0x344>)
 8001984:	400a      	ands	r2, r1
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	4bac      	ldr	r3, [pc, #688]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4bab      	ldr	r3, [pc, #684]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 800198e:	49ad      	ldr	r1, [pc, #692]	@ (8001c44 <HAL_RCC_OscConfig+0x348>)
 8001990:	400a      	ands	r2, r1
 8001992:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d014      	beq.n	80019c6 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff f8ee 	bl	8000b7c <HAL_GetTick>
 80019a0:	0003      	movs	r3, r0
 80019a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80019a6:	f7ff f8e9 	bl	8000b7c <HAL_GetTick>
 80019aa:	0002      	movs	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b64      	cmp	r3, #100	@ 0x64
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e17b      	b.n	8001cb0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019b8:	4ba0      	ldr	r3, [pc, #640]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	2380      	movs	r3, #128	@ 0x80
 80019be:	029b      	lsls	r3, r3, #10
 80019c0:	4013      	ands	r3, r2
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0xaa>
 80019c4:	e013      	b.n	80019ee <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c6:	f7ff f8d9 	bl	8000b7c <HAL_GetTick>
 80019ca:	0003      	movs	r3, r0
 80019cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80019d0:	f7ff f8d4 	bl	8000b7c <HAL_GetTick>
 80019d4:	0002      	movs	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	@ 0x64
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e166      	b.n	8001cb0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019e2:	4b96      	ldr	r3, [pc, #600]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	2380      	movs	r3, #128	@ 0x80
 80019e8:	029b      	lsls	r3, r3, #10
 80019ea:	4013      	ands	r3, r2
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2202      	movs	r2, #2
 80019f4:	4013      	ands	r3, r2
 80019f6:	d100      	bne.n	80019fa <HAL_RCC_OscConfig+0xfe>
 80019f8:	e086      	b.n	8001b08 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019fa:	4b90      	ldr	r3, [pc, #576]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2238      	movs	r2, #56	@ 0x38
 8001a00:	4013      	ands	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d12f      	bne.n	8001a6a <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e14c      	b.n	8001cb0 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a16:	4b89      	ldr	r3, [pc, #548]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4a8b      	ldr	r2, [pc, #556]	@ (8001c48 <HAL_RCC_OscConfig+0x34c>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	0019      	movs	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	021a      	lsls	r2, r3, #8
 8001a26:	4b85      	ldr	r3, [pc, #532]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d112      	bne.n	8001a58 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a32:	4b82      	ldr	r3, [pc, #520]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a85      	ldr	r2, [pc, #532]	@ (8001c4c <HAL_RCC_OscConfig+0x350>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	0019      	movs	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691a      	ldr	r2, [r3, #16]
 8001a40:	4b7e      	ldr	r3, [pc, #504]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001a42:	430a      	orrs	r2, r1
 8001a44:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001a46:	4b7d      	ldr	r3, [pc, #500]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	0adb      	lsrs	r3, r3, #11
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	4013      	ands	r3, r2
 8001a50:	4a7f      	ldr	r2, [pc, #508]	@ (8001c50 <HAL_RCC_OscConfig+0x354>)
 8001a52:	40da      	lsrs	r2, r3
 8001a54:	4b7f      	ldr	r3, [pc, #508]	@ (8001c54 <HAL_RCC_OscConfig+0x358>)
 8001a56:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a58:	4b7f      	ldr	r3, [pc, #508]	@ (8001c58 <HAL_RCC_OscConfig+0x35c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7ff f831 	bl	8000ac4 <HAL_InitTick>
 8001a62:	1e03      	subs	r3, r0, #0
 8001a64:	d050      	beq.n	8001b08 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e122      	b.n	8001cb0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d030      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a72:	4b72      	ldr	r3, [pc, #456]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a75      	ldr	r2, [pc, #468]	@ (8001c4c <HAL_RCC_OscConfig+0x350>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	0019      	movs	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691a      	ldr	r2, [r3, #16]
 8001a80:	4b6e      	ldr	r3, [pc, #440]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001a82:	430a      	orrs	r2, r1
 8001a84:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001a86:	4b6d      	ldr	r3, [pc, #436]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4b6c      	ldr	r3, [pc, #432]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001a8c:	2180      	movs	r1, #128	@ 0x80
 8001a8e:	0049      	lsls	r1, r1, #1
 8001a90:	430a      	orrs	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff f872 	bl	8000b7c <HAL_GetTick>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001a9e:	f7ff f86d 	bl	8000b7c <HAL_GetTick>
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e0ff      	b.n	8001cb0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab0:	4b62      	ldr	r3, [pc, #392]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	2380      	movs	r3, #128	@ 0x80
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abc:	4b5f      	ldr	r3, [pc, #380]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4a61      	ldr	r2, [pc, #388]	@ (8001c48 <HAL_RCC_OscConfig+0x34c>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	021a      	lsls	r2, r3, #8
 8001acc:	4b5b      	ldr	r3, [pc, #364]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	e019      	b.n	8001b08 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001ad4:	4b59      	ldr	r3, [pc, #356]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b58      	ldr	r3, [pc, #352]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001ada:	4960      	ldr	r1, [pc, #384]	@ (8001c5c <HAL_RCC_OscConfig+0x360>)
 8001adc:	400a      	ands	r2, r1
 8001ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff f84c 	bl	8000b7c <HAL_GetTick>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001aea:	f7ff f847 	bl	8000b7c <HAL_GetTick>
 8001aee:	0002      	movs	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e0d9      	b.n	8001cb0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001afc:	4b4f      	ldr	r3, [pc, #316]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	2380      	movs	r3, #128	@ 0x80
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4013      	ands	r3, r2
 8001b06:	d1f0      	bne.n	8001aea <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2208      	movs	r2, #8
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d042      	beq.n	8001b98 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001b12:	4b4a      	ldr	r3, [pc, #296]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2238      	movs	r2, #56	@ 0x38
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b18      	cmp	r3, #24
 8001b1c:	d105      	bne.n	8001b2a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d138      	bne.n	8001b98 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e0c2      	b.n	8001cb0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d019      	beq.n	8001b66 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b32:	4b42      	ldr	r3, [pc, #264]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001b34:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b36:	4b41      	ldr	r3, [pc, #260]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001b38:	2101      	movs	r1, #1
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3e:	f7ff f81d 	bl	8000b7c <HAL_GetTick>
 8001b42:	0003      	movs	r3, r0
 8001b44:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001b48:	f7ff f818 	bl	8000b7c <HAL_GetTick>
 8001b4c:	0002      	movs	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e0aa      	b.n	8001cb0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001b5a:	4b38      	ldr	r3, [pc, #224]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b5e:	2202      	movs	r2, #2
 8001b60:	4013      	ands	r3, r2
 8001b62:	d0f1      	beq.n	8001b48 <HAL_RCC_OscConfig+0x24c>
 8001b64:	e018      	b.n	8001b98 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001b66:	4b35      	ldr	r3, [pc, #212]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001b68:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b6a:	4b34      	ldr	r3, [pc, #208]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	438a      	bics	r2, r1
 8001b70:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b72:	f7ff f803 	bl	8000b7c <HAL_GetTick>
 8001b76:	0003      	movs	r3, r0
 8001b78:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001b7c:	f7fe fffe 	bl	8000b7c <HAL_GetTick>
 8001b80:	0002      	movs	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e090      	b.n	8001cb0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001b8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b92:	2202      	movs	r2, #2
 8001b94:	4013      	ands	r3, r2
 8001b96:	d1f1      	bne.n	8001b7c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d100      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x2a8>
 8001ba2:	e084      	b.n	8001cae <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001bac:	4b23      	ldr	r3, [pc, #140]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2238      	movs	r2, #56	@ 0x38
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d106      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d000      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x2c6>
 8001bc0:	e075      	b.n	8001cae <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e074      	b.n	8001cb0 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d106      	bne.n	8001bdc <HAL_RCC_OscConfig+0x2e0>
 8001bce:	4b1b      	ldr	r3, [pc, #108]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001bd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bda:	e01c      	b.n	8001c16 <HAL_RCC_OscConfig+0x31a>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b05      	cmp	r3, #5
 8001be2:	d10c      	bne.n	8001bfe <HAL_RCC_OscConfig+0x302>
 8001be4:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001be6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001be8:	4b14      	ldr	r3, [pc, #80]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001bea:	2104      	movs	r1, #4
 8001bec:	430a      	orrs	r2, r1
 8001bee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bf0:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001bf2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bf4:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bfc:	e00b      	b.n	8001c16 <HAL_RCC_OscConfig+0x31a>
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001c00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c02:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001c04:	2101      	movs	r1, #1
 8001c06:	438a      	bics	r2, r1
 8001c08:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001c0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <HAL_RCC_OscConfig+0x340>)
 8001c10:	2104      	movs	r1, #4
 8001c12:	438a      	bics	r2, r1
 8001c14:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d028      	beq.n	8001c70 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1e:	f7fe ffad 	bl	8000b7c <HAL_GetTick>
 8001c22:	0003      	movs	r3, r0
 8001c24:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001c26:	e01d      	b.n	8001c64 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c28:	f7fe ffa8 	bl	8000b7c <HAL_GetTick>
 8001c2c:	0002      	movs	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	4a0b      	ldr	r2, [pc, #44]	@ (8001c60 <HAL_RCC_OscConfig+0x364>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d915      	bls.n	8001c64 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e039      	b.n	8001cb0 <HAL_RCC_OscConfig+0x3b4>
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	fffeffff 	.word	0xfffeffff
 8001c44:	fffbffff 	.word	0xfffbffff
 8001c48:	ffff80ff 	.word	0xffff80ff
 8001c4c:	ffffc7ff 	.word	0xffffc7ff
 8001c50:	02dc6c00 	.word	0x02dc6c00
 8001c54:	20000000 	.word	0x20000000
 8001c58:	20000004 	.word	0x20000004
 8001c5c:	fffffeff 	.word	0xfffffeff
 8001c60:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001c64:	4b14      	ldr	r3, [pc, #80]	@ (8001cb8 <HAL_RCC_OscConfig+0x3bc>)
 8001c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c68:	2202      	movs	r2, #2
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d0dc      	beq.n	8001c28 <HAL_RCC_OscConfig+0x32c>
 8001c6e:	e013      	b.n	8001c98 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7fe ff84 	bl	8000b7c <HAL_GetTick>
 8001c74:	0003      	movs	r3, r0
 8001c76:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001c78:	e009      	b.n	8001c8e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7a:	f7fe ff7f 	bl	8000b7c <HAL_GetTick>
 8001c7e:	0002      	movs	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	4a0d      	ldr	r2, [pc, #52]	@ (8001cbc <HAL_RCC_OscConfig+0x3c0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e010      	b.n	8001cb0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <HAL_RCC_OscConfig+0x3bc>)
 8001c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c92:	2202      	movs	r2, #2
 8001c94:	4013      	ands	r3, r2
 8001c96:	d1f0      	bne.n	8001c7a <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001c98:	230f      	movs	r3, #15
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d105      	bne.n	8001cae <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001ca2:	4b05      	ldr	r3, [pc, #20]	@ (8001cb8 <HAL_RCC_OscConfig+0x3bc>)
 8001ca4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ca6:	4b04      	ldr	r3, [pc, #16]	@ (8001cb8 <HAL_RCC_OscConfig+0x3bc>)
 8001ca8:	4905      	ldr	r1, [pc, #20]	@ (8001cc0 <HAL_RCC_OscConfig+0x3c4>)
 8001caa:	400a      	ands	r2, r1
 8001cac:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b006      	add	sp, #24
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	00001388 	.word	0x00001388
 8001cc0:	efffffff 	.word	0xefffffff

08001cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0e9      	b.n	8001eac <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd8:	4b76      	ldr	r3, [pc, #472]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2207      	movs	r2, #7
 8001cde:	4013      	ands	r3, r2
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d91e      	bls.n	8001d24 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce6:	4b73      	ldr	r3, [pc, #460]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2207      	movs	r2, #7
 8001cec:	4393      	bics	r3, r2
 8001cee:	0019      	movs	r1, r3
 8001cf0:	4b70      	ldr	r3, [pc, #448]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cf8:	f7fe ff40 	bl	8000b7c <HAL_GetTick>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d00:	e009      	b.n	8001d16 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d02:	f7fe ff3b 	bl	8000b7c <HAL_GetTick>
 8001d06:	0002      	movs	r2, r0
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	4a6a      	ldr	r2, [pc, #424]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1f4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e0ca      	b.n	8001eac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d16:	4b67      	ldr	r3, [pc, #412]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2207      	movs	r2, #7
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d1ee      	bne.n	8001d02 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2202      	movs	r2, #2
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d017      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2204      	movs	r2, #4
 8001d34:	4013      	ands	r3, r2
 8001d36:	d008      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d38:	4b60      	ldr	r3, [pc, #384]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f8>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	4a60      	ldr	r2, [pc, #384]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1fc>)
 8001d3e:	401a      	ands	r2, r3
 8001d40:	4b5e      	ldr	r3, [pc, #376]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f8>)
 8001d42:	21b0      	movs	r1, #176	@ 0xb0
 8001d44:	0109      	lsls	r1, r1, #4
 8001d46:	430a      	orrs	r2, r1
 8001d48:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d4a:	4b5c      	ldr	r3, [pc, #368]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f8>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	4a5d      	ldr	r2, [pc, #372]	@ (8001ec4 <HAL_RCC_ClockConfig+0x200>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	0019      	movs	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	4b58      	ldr	r3, [pc, #352]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f8>)
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2201      	movs	r2, #1
 8001d64:	4013      	ands	r3, r2
 8001d66:	d055      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001d68:	4b54      	ldr	r3, [pc, #336]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	221c      	movs	r2, #28
 8001d6e:	4393      	bics	r3, r2
 8001d70:	0019      	movs	r1, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	4b51      	ldr	r3, [pc, #324]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f8>)
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d107      	bne.n	8001d94 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d84:	4b4d      	ldr	r3, [pc, #308]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f8>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	2380      	movs	r3, #128	@ 0x80
 8001d8a:	029b      	lsls	r3, r3, #10
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d11f      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e08b      	b.n	8001eac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d107      	bne.n	8001dac <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d9c:	4b47      	ldr	r3, [pc, #284]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f8>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	2380      	movs	r3, #128	@ 0x80
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4013      	ands	r3, r2
 8001da6:	d113      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e07f      	b.n	8001eac <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d106      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001db4:	4b41      	ldr	r3, [pc, #260]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f8>)
 8001db6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db8:	2202      	movs	r2, #2
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d108      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e074      	b.n	8001eac <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001dc2:	4b3e      	ldr	r3, [pc, #248]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f8>)
 8001dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d101      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e06d      	b.n	8001eac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dd0:	4b3a      	ldr	r3, [pc, #232]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f8>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	4393      	bics	r3, r2
 8001dd8:	0019      	movs	r1, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	4b37      	ldr	r3, [pc, #220]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f8>)
 8001de0:	430a      	orrs	r2, r1
 8001de2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001de4:	f7fe feca 	bl	8000b7c <HAL_GetTick>
 8001de8:	0003      	movs	r3, r0
 8001dea:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dec:	e009      	b.n	8001e02 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001dee:	f7fe fec5 	bl	8000b7c <HAL_GetTick>
 8001df2:	0002      	movs	r2, r0
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	4a2f      	ldr	r2, [pc, #188]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1f4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e054      	b.n	8001eac <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e02:	4b2e      	ldr	r3, [pc, #184]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f8>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2238      	movs	r2, #56	@ 0x38
 8001e08:	401a      	ands	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d1ec      	bne.n	8001dee <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e14:	4b27      	ldr	r3, [pc, #156]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2207      	movs	r2, #7
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d21e      	bcs.n	8001e60 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e22:	4b24      	ldr	r3, [pc, #144]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2207      	movs	r2, #7
 8001e28:	4393      	bics	r3, r2
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	4b21      	ldr	r3, [pc, #132]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e34:	f7fe fea2 	bl	8000b7c <HAL_GetTick>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e3c:	e009      	b.n	8001e52 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3e:	f7fe fe9d 	bl	8000b7c <HAL_GetTick>
 8001e42:	0002      	movs	r2, r0
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	4a1b      	ldr	r2, [pc, #108]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1f4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e02c      	b.n	8001eac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e52:	4b18      	ldr	r3, [pc, #96]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2207      	movs	r2, #7
 8001e58:	4013      	ands	r3, r2
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d1ee      	bne.n	8001e3e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2204      	movs	r2, #4
 8001e66:	4013      	ands	r3, r2
 8001e68:	d009      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e6a:	4b14      	ldr	r3, [pc, #80]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f8>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	4a16      	ldr	r2, [pc, #88]	@ (8001ec8 <HAL_RCC_ClockConfig+0x204>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	0019      	movs	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	4b10      	ldr	r3, [pc, #64]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f8>)
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001e7e:	f000 f82b 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8001e82:	0001      	movs	r1, r0
 8001e84:	4b0d      	ldr	r3, [pc, #52]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f8>)
 8001e86:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	220f      	movs	r2, #15
 8001e8c:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ecc <HAL_RCC_ClockConfig+0x208>)
 8001e90:	0092      	lsls	r2, r2, #2
 8001e92:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e94:	221f      	movs	r2, #31
 8001e96:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001e98:	000a      	movs	r2, r1
 8001e9a:	40da      	lsrs	r2, r3
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed0 <HAL_RCC_ClockConfig+0x20c>)
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <HAL_RCC_ClockConfig+0x210>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f7fe fe0d 	bl	8000ac4 <HAL_InitTick>
 8001eaa:	0003      	movs	r3, r0
}
 8001eac:	0018      	movs	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b004      	add	sp, #16
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40022000 	.word	0x40022000
 8001eb8:	00001388 	.word	0x00001388
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	ffff84ff 	.word	0xffff84ff
 8001ec4:	fffff0ff 	.word	0xfffff0ff
 8001ec8:	ffff8fff 	.word	0xffff8fff
 8001ecc:	08002cf4 	.word	0x08002cf4
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000004 	.word	0x20000004

08001ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8001ede:	4b23      	ldr	r3, [pc, #140]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	2207      	movs	r2, #7
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	3301      	adds	r3, #1
 8001eea:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001eec:	4b1f      	ldr	r3, [pc, #124]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2238      	movs	r2, #56	@ 0x38
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d10f      	bne.n	8001f16 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	0adb      	lsrs	r3, r3, #11
 8001efc:	2207      	movs	r2, #7
 8001efe:	4013      	ands	r3, r2
 8001f00:	2201      	movs	r2, #1
 8001f02:	409a      	lsls	r2, r3
 8001f04:	0013      	movs	r3, r2
 8001f06:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4819      	ldr	r0, [pc, #100]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f0c:	f7fe f8fc 	bl	8000108 <__udivsi3>
 8001f10:	0003      	movs	r3, r0
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	e01e      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f16:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2238      	movs	r2, #56	@ 0x38
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d102      	bne.n	8001f28 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f22:	4b14      	ldr	r3, [pc, #80]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	e015      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001f28:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2238      	movs	r2, #56	@ 0x38
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b20      	cmp	r3, #32
 8001f32:	d103      	bne.n	8001f3c <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f34:	2380      	movs	r3, #128	@ 0x80
 8001f36:	021b      	lsls	r3, r3, #8
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	e00b      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2238      	movs	r2, #56	@ 0x38
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b18      	cmp	r3, #24
 8001f46:	d103      	bne.n	8001f50 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f48:	23fa      	movs	r3, #250	@ 0xfa
 8001f4a:	01db      	lsls	r3, r3, #7
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	e001      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f7fe f8d6 	bl	8000108 <__udivsi3>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8001f60:	68fb      	ldr	r3, [r7, #12]
}
 8001f62:	0018      	movs	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b004      	add	sp, #16
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	46c0      	nop			@ (mov r8, r8)
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	02dc6c00 	.word	0x02dc6c00
 8001f74:	007a1200 	.word	0x007a1200

08001f78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001f7c:	f7ff ffac 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8001f80:	0001      	movs	r1, r0
 8001f82:	4b09      	ldr	r3, [pc, #36]	@ (8001fa8 <HAL_RCC_GetHCLKFreq+0x30>)
 8001f84:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f86:	0a1b      	lsrs	r3, r3, #8
 8001f88:	220f      	movs	r2, #15
 8001f8a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001f8c:	4b07      	ldr	r3, [pc, #28]	@ (8001fac <HAL_RCC_GetHCLKFreq+0x34>)
 8001f8e:	0092      	lsls	r2, r2, #2
 8001f90:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f92:	221f      	movs	r2, #31
 8001f94:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001f96:	000a      	movs	r2, r1
 8001f98:	40da      	lsrs	r2, r3
 8001f9a:	4b05      	ldr	r3, [pc, #20]	@ (8001fb0 <HAL_RCC_GetHCLKFreq+0x38>)
 8001f9c:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8001f9e:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <HAL_RCC_GetHCLKFreq+0x38>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
}
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	08002cf4 	.word	0x08002cf4
 8001fb0:	20000000 	.word	0x20000000

08001fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001fb8:	f7ff ffde 	bl	8001f78 <HAL_RCC_GetHCLKFreq>
 8001fbc:	0001      	movs	r1, r0
 8001fbe:	4b07      	ldr	r3, [pc, #28]	@ (8001fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	0b1b      	lsrs	r3, r3, #12
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	4b05      	ldr	r3, [pc, #20]	@ (8001fe0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001fca:	0092      	lsls	r2, r2, #2
 8001fcc:	58d3      	ldr	r3, [r2, r3]
 8001fce:	221f      	movs	r2, #31
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	40d9      	lsrs	r1, r3
 8001fd4:	000b      	movs	r3, r1
}
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	08002d34 	.word	0x08002d34

08001fe4 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001fec:	2313      	movs	r3, #19
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ff4:	2312      	movs	r3, #18
 8001ff6:	18fb      	adds	r3, r7, r3
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2240      	movs	r2, #64	@ 0x40
 8002002:	4013      	ands	r3, r2
 8002004:	d100      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8002006:	e079      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002008:	2011      	movs	r0, #17
 800200a:	183b      	adds	r3, r7, r0
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002010:	4b63      	ldr	r3, [pc, #396]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002012:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002014:	2380      	movs	r3, #128	@ 0x80
 8002016:	055b      	lsls	r3, r3, #21
 8002018:	4013      	ands	r3, r2
 800201a:	d110      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800201c:	4b60      	ldr	r3, [pc, #384]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800201e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002020:	4b5f      	ldr	r3, [pc, #380]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002022:	2180      	movs	r1, #128	@ 0x80
 8002024:	0549      	lsls	r1, r1, #21
 8002026:	430a      	orrs	r2, r1
 8002028:	63da      	str	r2, [r3, #60]	@ 0x3c
 800202a:	4b5d      	ldr	r3, [pc, #372]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800202c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800202e:	2380      	movs	r3, #128	@ 0x80
 8002030:	055b      	lsls	r3, r3, #21
 8002032:	4013      	ands	r3, r2
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002038:	183b      	adds	r3, r7, r0
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800203e:	4b58      	ldr	r3, [pc, #352]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002040:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002042:	23c0      	movs	r3, #192	@ 0xc0
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4013      	ands	r3, r2
 8002048:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d019      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	429a      	cmp	r2, r3
 8002058:	d014      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800205a:	4b51      	ldr	r3, [pc, #324]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800205c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205e:	4a51      	ldr	r2, [pc, #324]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002060:	4013      	ands	r3, r2
 8002062:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002064:	4b4e      	ldr	r3, [pc, #312]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002066:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002068:	4b4d      	ldr	r3, [pc, #308]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800206a:	2180      	movs	r1, #128	@ 0x80
 800206c:	0249      	lsls	r1, r1, #9
 800206e:	430a      	orrs	r2, r1
 8002070:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002072:	4b4b      	ldr	r3, [pc, #300]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002074:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002076:	4b4a      	ldr	r3, [pc, #296]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002078:	494b      	ldr	r1, [pc, #300]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800207a:	400a      	ands	r2, r1
 800207c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800207e:	4b48      	ldr	r3, [pc, #288]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	2201      	movs	r2, #1
 8002088:	4013      	ands	r3, r2
 800208a:	d016      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208c:	f7fe fd76 	bl	8000b7c <HAL_GetTick>
 8002090:	0003      	movs	r3, r0
 8002092:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002094:	e00c      	b.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7fe fd71 	bl	8000b7c <HAL_GetTick>
 800209a:	0002      	movs	r2, r0
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	4a42      	ldr	r2, [pc, #264]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d904      	bls.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 80020a6:	2313      	movs	r3, #19
 80020a8:	18fb      	adds	r3, r7, r3
 80020aa:	2203      	movs	r2, #3
 80020ac:	701a      	strb	r2, [r3, #0]
          break;
 80020ae:	e004      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80020b0:	4b3b      	ldr	r3, [pc, #236]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b4:	2202      	movs	r2, #2
 80020b6:	4013      	ands	r3, r2
 80020b8:	d0ed      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 80020ba:	2313      	movs	r3, #19
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10a      	bne.n	80020da <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020c4:	4b36      	ldr	r3, [pc, #216]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c8:	4a36      	ldr	r2, [pc, #216]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	0019      	movs	r1, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699a      	ldr	r2, [r3, #24]
 80020d2:	4b33      	ldr	r3, [pc, #204]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020d4:	430a      	orrs	r2, r1
 80020d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020d8:	e005      	b.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020da:	2312      	movs	r3, #18
 80020dc:	18fb      	adds	r3, r7, r3
 80020de:	2213      	movs	r2, #19
 80020e0:	18ba      	adds	r2, r7, r2
 80020e2:	7812      	ldrb	r2, [r2, #0]
 80020e4:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020e6:	2311      	movs	r3, #17
 80020e8:	18fb      	adds	r3, r7, r3
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d105      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f0:	4b2b      	ldr	r3, [pc, #172]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020f4:	4b2a      	ldr	r3, [pc, #168]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020f6:	492e      	ldr	r1, [pc, #184]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80020f8:	400a      	ands	r2, r1
 80020fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2201      	movs	r2, #1
 8002102:	4013      	ands	r3, r2
 8002104:	d009      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002106:	4b26      	ldr	r3, [pc, #152]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800210a:	2203      	movs	r2, #3
 800210c:	4393      	bics	r3, r2
 800210e:	0019      	movs	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	4b22      	ldr	r3, [pc, #136]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002116:	430a      	orrs	r2, r1
 8002118:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2202      	movs	r2, #2
 8002120:	4013      	ands	r3, r2
 8002122:	d009      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002124:	4b1e      	ldr	r3, [pc, #120]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002128:	4a22      	ldr	r2, [pc, #136]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800212a:	4013      	ands	r3, r2
 800212c:	0019      	movs	r1, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	4b1b      	ldr	r3, [pc, #108]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002134:	430a      	orrs	r2, r1
 8002136:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2220      	movs	r2, #32
 800213e:	4013      	ands	r3, r2
 8002140:	d008      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002142:	4b17      	ldr	r3, [pc, #92]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	0899      	lsrs	r1, r3, #2
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	4b14      	ldr	r3, [pc, #80]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002150:	430a      	orrs	r2, r1
 8002152:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2204      	movs	r2, #4
 800215a:	4013      	ands	r3, r2
 800215c:	d009      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800215e:	4b10      	ldr	r3, [pc, #64]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002162:	4a15      	ldr	r2, [pc, #84]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002164:	4013      	ands	r3, r2
 8002166:	0019      	movs	r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691a      	ldr	r2, [r3, #16]
 800216c:	4b0c      	ldr	r3, [pc, #48]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800216e:	430a      	orrs	r2, r1
 8002170:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2280      	movs	r2, #128	@ 0x80
 8002178:	4013      	ands	r3, r2
 800217a:	d009      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800217c:	4b08      	ldr	r3, [pc, #32]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	22e0      	movs	r2, #224	@ 0xe0
 8002182:	4393      	bics	r3, r2
 8002184:	0019      	movs	r1, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	4b05      	ldr	r3, [pc, #20]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800218c:	430a      	orrs	r2, r1
 800218e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002190:	2312      	movs	r3, #18
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	781b      	ldrb	r3, [r3, #0]
}
 8002196:	0018      	movs	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	b006      	add	sp, #24
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			@ (mov r8, r8)
 80021a0:	40021000 	.word	0x40021000
 80021a4:	fffffcff 	.word	0xfffffcff
 80021a8:	fffeffff 	.word	0xfffeffff
 80021ac:	00001388 	.word	0x00001388
 80021b0:	efffffff 	.word	0xefffffff
 80021b4:	ffffcfff 	.word	0xffffcfff
 80021b8:	ffff3fff 	.word	0xffff3fff

080021bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80021c4:	231e      	movs	r3, #30
 80021c6:	18fb      	adds	r3, r7, r3
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	431a      	orrs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4aab      	ldr	r2, [pc, #684]	@ (8002498 <UART_SetConfig+0x2dc>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	0019      	movs	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4aa6      	ldr	r2, [pc, #664]	@ (800249c <UART_SetConfig+0x2e0>)
 8002202:	4013      	ands	r3, r2
 8002204:	0019      	movs	r1, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	4313      	orrs	r3, r2
 8002220:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	4a9d      	ldr	r2, [pc, #628]	@ (80024a0 <UART_SetConfig+0x2e4>)
 800222a:	4013      	ands	r3, r2
 800222c:	0019      	movs	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	430a      	orrs	r2, r1
 8002236:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223e:	220f      	movs	r2, #15
 8002240:	4393      	bics	r3, r2
 8002242:	0019      	movs	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a93      	ldr	r2, [pc, #588]	@ (80024a4 <UART_SetConfig+0x2e8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d127      	bne.n	80022aa <UART_SetConfig+0xee>
 800225a:	4b93      	ldr	r3, [pc, #588]	@ (80024a8 <UART_SetConfig+0x2ec>)
 800225c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225e:	2203      	movs	r2, #3
 8002260:	4013      	ands	r3, r2
 8002262:	2b03      	cmp	r3, #3
 8002264:	d017      	beq.n	8002296 <UART_SetConfig+0xda>
 8002266:	d81b      	bhi.n	80022a0 <UART_SetConfig+0xe4>
 8002268:	2b02      	cmp	r3, #2
 800226a:	d00a      	beq.n	8002282 <UART_SetConfig+0xc6>
 800226c:	d818      	bhi.n	80022a0 <UART_SetConfig+0xe4>
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <UART_SetConfig+0xbc>
 8002272:	2b01      	cmp	r3, #1
 8002274:	d00a      	beq.n	800228c <UART_SetConfig+0xd0>
 8002276:	e013      	b.n	80022a0 <UART_SetConfig+0xe4>
 8002278:	231f      	movs	r3, #31
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	e021      	b.n	80022c6 <UART_SetConfig+0x10a>
 8002282:	231f      	movs	r3, #31
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	2202      	movs	r2, #2
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	e01c      	b.n	80022c6 <UART_SetConfig+0x10a>
 800228c:	231f      	movs	r3, #31
 800228e:	18fb      	adds	r3, r7, r3
 8002290:	2204      	movs	r2, #4
 8002292:	701a      	strb	r2, [r3, #0]
 8002294:	e017      	b.n	80022c6 <UART_SetConfig+0x10a>
 8002296:	231f      	movs	r3, #31
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	2208      	movs	r2, #8
 800229c:	701a      	strb	r2, [r3, #0]
 800229e:	e012      	b.n	80022c6 <UART_SetConfig+0x10a>
 80022a0:	231f      	movs	r3, #31
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	2210      	movs	r2, #16
 80022a6:	701a      	strb	r2, [r3, #0]
 80022a8:	e00d      	b.n	80022c6 <UART_SetConfig+0x10a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a7f      	ldr	r2, [pc, #508]	@ (80024ac <UART_SetConfig+0x2f0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d104      	bne.n	80022be <UART_SetConfig+0x102>
 80022b4:	231f      	movs	r3, #31
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
 80022bc:	e003      	b.n	80022c6 <UART_SetConfig+0x10a>
 80022be:	231f      	movs	r3, #31
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	2210      	movs	r2, #16
 80022c4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69da      	ldr	r2, [r3, #28]
 80022ca:	2380      	movs	r3, #128	@ 0x80
 80022cc:	021b      	lsls	r3, r3, #8
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d000      	beq.n	80022d4 <UART_SetConfig+0x118>
 80022d2:	e06f      	b.n	80023b4 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80022d4:	231f      	movs	r3, #31
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d01f      	beq.n	800231e <UART_SetConfig+0x162>
 80022de:	dc22      	bgt.n	8002326 <UART_SetConfig+0x16a>
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d017      	beq.n	8002314 <UART_SetConfig+0x158>
 80022e4:	dc1f      	bgt.n	8002326 <UART_SetConfig+0x16a>
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <UART_SetConfig+0x134>
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d005      	beq.n	80022fa <UART_SetConfig+0x13e>
 80022ee:	e01a      	b.n	8002326 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022f0:	f7ff fe60 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 80022f4:	0003      	movs	r3, r0
 80022f6:	61bb      	str	r3, [r7, #24]
        break;
 80022f8:	e01c      	b.n	8002334 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80022fa:	4b6b      	ldr	r3, [pc, #428]	@ (80024a8 <UART_SetConfig+0x2ec>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	2207      	movs	r2, #7
 8002302:	4013      	ands	r3, r2
 8002304:	3301      	adds	r3, #1
 8002306:	0019      	movs	r1, r3
 8002308:	4869      	ldr	r0, [pc, #420]	@ (80024b0 <UART_SetConfig+0x2f4>)
 800230a:	f7fd fefd 	bl	8000108 <__udivsi3>
 800230e:	0003      	movs	r3, r0
 8002310:	61bb      	str	r3, [r7, #24]
        break;
 8002312:	e00f      	b.n	8002334 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002314:	f7ff fde0 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8002318:	0003      	movs	r3, r0
 800231a:	61bb      	str	r3, [r7, #24]
        break;
 800231c:	e00a      	b.n	8002334 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800231e:	2380      	movs	r3, #128	@ 0x80
 8002320:	021b      	lsls	r3, r3, #8
 8002322:	61bb      	str	r3, [r7, #24]
        break;
 8002324:	e006      	b.n	8002334 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800232a:	231e      	movs	r3, #30
 800232c:	18fb      	adds	r3, r7, r3
 800232e:	2201      	movs	r2, #1
 8002330:	701a      	strb	r2, [r3, #0]
        break;
 8002332:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d100      	bne.n	800233c <UART_SetConfig+0x180>
 800233a:	e097      	b.n	800246c <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002340:	4b5c      	ldr	r3, [pc, #368]	@ (80024b4 <UART_SetConfig+0x2f8>)
 8002342:	0052      	lsls	r2, r2, #1
 8002344:	5ad3      	ldrh	r3, [r2, r3]
 8002346:	0019      	movs	r1, r3
 8002348:	69b8      	ldr	r0, [r7, #24]
 800234a:	f7fd fedd 	bl	8000108 <__udivsi3>
 800234e:	0003      	movs	r3, r0
 8002350:	005a      	lsls	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	085b      	lsrs	r3, r3, #1
 8002358:	18d2      	adds	r2, r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	0019      	movs	r1, r3
 8002360:	0010      	movs	r0, r2
 8002362:	f7fd fed1 	bl	8000108 <__udivsi3>
 8002366:	0003      	movs	r3, r0
 8002368:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	2b0f      	cmp	r3, #15
 800236e:	d91c      	bls.n	80023aa <UART_SetConfig+0x1ee>
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	2380      	movs	r3, #128	@ 0x80
 8002374:	025b      	lsls	r3, r3, #9
 8002376:	429a      	cmp	r2, r3
 8002378:	d217      	bcs.n	80023aa <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	b29a      	uxth	r2, r3
 800237e:	200e      	movs	r0, #14
 8002380:	183b      	adds	r3, r7, r0
 8002382:	210f      	movs	r1, #15
 8002384:	438a      	bics	r2, r1
 8002386:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	085b      	lsrs	r3, r3, #1
 800238c:	b29b      	uxth	r3, r3
 800238e:	2207      	movs	r2, #7
 8002390:	4013      	ands	r3, r2
 8002392:	b299      	uxth	r1, r3
 8002394:	183b      	adds	r3, r7, r0
 8002396:	183a      	adds	r2, r7, r0
 8002398:	8812      	ldrh	r2, [r2, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	183a      	adds	r2, r7, r0
 80023a4:	8812      	ldrh	r2, [r2, #0]
 80023a6:	60da      	str	r2, [r3, #12]
 80023a8:	e060      	b.n	800246c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80023aa:	231e      	movs	r3, #30
 80023ac:	18fb      	adds	r3, r7, r3
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	e05b      	b.n	800246c <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80023b4:	231f      	movs	r3, #31
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d01f      	beq.n	80023fe <UART_SetConfig+0x242>
 80023be:	dc22      	bgt.n	8002406 <UART_SetConfig+0x24a>
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d017      	beq.n	80023f4 <UART_SetConfig+0x238>
 80023c4:	dc1f      	bgt.n	8002406 <UART_SetConfig+0x24a>
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <UART_SetConfig+0x214>
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d005      	beq.n	80023da <UART_SetConfig+0x21e>
 80023ce:	e01a      	b.n	8002406 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023d0:	f7ff fdf0 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 80023d4:	0003      	movs	r3, r0
 80023d6:	61bb      	str	r3, [r7, #24]
        break;
 80023d8:	e01c      	b.n	8002414 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80023da:	4b33      	ldr	r3, [pc, #204]	@ (80024a8 <UART_SetConfig+0x2ec>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	2207      	movs	r2, #7
 80023e2:	4013      	ands	r3, r2
 80023e4:	3301      	adds	r3, #1
 80023e6:	0019      	movs	r1, r3
 80023e8:	4831      	ldr	r0, [pc, #196]	@ (80024b0 <UART_SetConfig+0x2f4>)
 80023ea:	f7fd fe8d 	bl	8000108 <__udivsi3>
 80023ee:	0003      	movs	r3, r0
 80023f0:	61bb      	str	r3, [r7, #24]
        break;
 80023f2:	e00f      	b.n	8002414 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023f4:	f7ff fd70 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 80023f8:	0003      	movs	r3, r0
 80023fa:	61bb      	str	r3, [r7, #24]
        break;
 80023fc:	e00a      	b.n	8002414 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023fe:	2380      	movs	r3, #128	@ 0x80
 8002400:	021b      	lsls	r3, r3, #8
 8002402:	61bb      	str	r3, [r7, #24]
        break;
 8002404:	e006      	b.n	8002414 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800240a:	231e      	movs	r3, #30
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	2201      	movs	r2, #1
 8002410:	701a      	strb	r2, [r3, #0]
        break;
 8002412:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d028      	beq.n	800246c <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800241e:	4b25      	ldr	r3, [pc, #148]	@ (80024b4 <UART_SetConfig+0x2f8>)
 8002420:	0052      	lsls	r2, r2, #1
 8002422:	5ad3      	ldrh	r3, [r2, r3]
 8002424:	0019      	movs	r1, r3
 8002426:	69b8      	ldr	r0, [r7, #24]
 8002428:	f7fd fe6e 	bl	8000108 <__udivsi3>
 800242c:	0003      	movs	r3, r0
 800242e:	001a      	movs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	085b      	lsrs	r3, r3, #1
 8002436:	18d2      	adds	r2, r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	0019      	movs	r1, r3
 800243e:	0010      	movs	r0, r2
 8002440:	f7fd fe62 	bl	8000108 <__udivsi3>
 8002444:	0003      	movs	r3, r0
 8002446:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	2b0f      	cmp	r3, #15
 800244c:	d90a      	bls.n	8002464 <UART_SetConfig+0x2a8>
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	2380      	movs	r3, #128	@ 0x80
 8002452:	025b      	lsls	r3, r3, #9
 8002454:	429a      	cmp	r2, r3
 8002456:	d205      	bcs.n	8002464 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	b29a      	uxth	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	e003      	b.n	800246c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002464:	231e      	movs	r3, #30
 8002466:	18fb      	adds	r3, r7, r3
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	226a      	movs	r2, #106	@ 0x6a
 8002470:	2101      	movs	r1, #1
 8002472:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2268      	movs	r2, #104	@ 0x68
 8002478:	2101      	movs	r1, #1
 800247a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002488:	231e      	movs	r3, #30
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	781b      	ldrb	r3, [r3, #0]
}
 800248e:	0018      	movs	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	b008      	add	sp, #32
 8002494:	bd80      	pop	{r7, pc}
 8002496:	46c0      	nop			@ (mov r8, r8)
 8002498:	cfff69f3 	.word	0xcfff69f3
 800249c:	ffffcfff 	.word	0xffffcfff
 80024a0:	11fff4ff 	.word	0x11fff4ff
 80024a4:	40013800 	.word	0x40013800
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40004400 	.word	0x40004400
 80024b0:	02dc6c00 	.word	0x02dc6c00
 80024b4:	08002d54 	.word	0x08002d54

080024b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c4:	2208      	movs	r2, #8
 80024c6:	4013      	ands	r3, r2
 80024c8:	d00b      	beq.n	80024e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4a4a      	ldr	r2, [pc, #296]	@ (80025fc <UART_AdvFeatureConfig+0x144>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	0019      	movs	r1, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e6:	2201      	movs	r2, #1
 80024e8:	4013      	ands	r3, r2
 80024ea:	d00b      	beq.n	8002504 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4a43      	ldr	r2, [pc, #268]	@ (8002600 <UART_AdvFeatureConfig+0x148>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	0019      	movs	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002508:	2202      	movs	r2, #2
 800250a:	4013      	ands	r3, r2
 800250c:	d00b      	beq.n	8002526 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4a3b      	ldr	r2, [pc, #236]	@ (8002604 <UART_AdvFeatureConfig+0x14c>)
 8002516:	4013      	ands	r3, r2
 8002518:	0019      	movs	r1, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252a:	2204      	movs	r2, #4
 800252c:	4013      	ands	r3, r2
 800252e:	d00b      	beq.n	8002548 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4a34      	ldr	r2, [pc, #208]	@ (8002608 <UART_AdvFeatureConfig+0x150>)
 8002538:	4013      	ands	r3, r2
 800253a:	0019      	movs	r1, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254c:	2210      	movs	r2, #16
 800254e:	4013      	ands	r3, r2
 8002550:	d00b      	beq.n	800256a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	4a2c      	ldr	r2, [pc, #176]	@ (800260c <UART_AdvFeatureConfig+0x154>)
 800255a:	4013      	ands	r3, r2
 800255c:	0019      	movs	r1, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256e:	2220      	movs	r2, #32
 8002570:	4013      	ands	r3, r2
 8002572:	d00b      	beq.n	800258c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	4a25      	ldr	r2, [pc, #148]	@ (8002610 <UART_AdvFeatureConfig+0x158>)
 800257c:	4013      	ands	r3, r2
 800257e:	0019      	movs	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002590:	2240      	movs	r2, #64	@ 0x40
 8002592:	4013      	ands	r3, r2
 8002594:	d01d      	beq.n	80025d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	4a1d      	ldr	r2, [pc, #116]	@ (8002614 <UART_AdvFeatureConfig+0x15c>)
 800259e:	4013      	ands	r3, r2
 80025a0:	0019      	movs	r1, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025b2:	2380      	movs	r3, #128	@ 0x80
 80025b4:	035b      	lsls	r3, r3, #13
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d10b      	bne.n	80025d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4a15      	ldr	r2, [pc, #84]	@ (8002618 <UART_AdvFeatureConfig+0x160>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	0019      	movs	r1, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d6:	2280      	movs	r2, #128	@ 0x80
 80025d8:	4013      	ands	r3, r2
 80025da:	d00b      	beq.n	80025f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4a0e      	ldr	r2, [pc, #56]	@ (800261c <UART_AdvFeatureConfig+0x164>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	0019      	movs	r1, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	605a      	str	r2, [r3, #4]
  }
}
 80025f4:	46c0      	nop			@ (mov r8, r8)
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b002      	add	sp, #8
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	ffff7fff 	.word	0xffff7fff
 8002600:	fffdffff 	.word	0xfffdffff
 8002604:	fffeffff 	.word	0xfffeffff
 8002608:	fffbffff 	.word	0xfffbffff
 800260c:	ffffefff 	.word	0xffffefff
 8002610:	ffffdfff 	.word	0xffffdfff
 8002614:	ffefffff 	.word	0xffefffff
 8002618:	ff9fffff 	.word	0xff9fffff
 800261c:	fff7ffff 	.word	0xfff7ffff

08002620 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b092      	sub	sp, #72	@ 0x48
 8002624:	af02      	add	r7, sp, #8
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2290      	movs	r2, #144	@ 0x90
 800262c:	2100      	movs	r1, #0
 800262e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002630:	f7fe faa4 	bl	8000b7c <HAL_GetTick>
 8002634:	0003      	movs	r3, r0
 8002636:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2208      	movs	r2, #8
 8002640:	4013      	ands	r3, r2
 8002642:	2b08      	cmp	r3, #8
 8002644:	d12d      	bne.n	80026a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002648:	2280      	movs	r2, #128	@ 0x80
 800264a:	0391      	lsls	r1, r2, #14
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	4a47      	ldr	r2, [pc, #284]	@ (800276c <UART_CheckIdleState+0x14c>)
 8002650:	9200      	str	r2, [sp, #0]
 8002652:	2200      	movs	r2, #0
 8002654:	f000 f88e 	bl	8002774 <UART_WaitOnFlagUntilTimeout>
 8002658:	1e03      	subs	r3, r0, #0
 800265a:	d022      	beq.n	80026a2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800265c:	f3ef 8310 	mrs	r3, PRIMASK
 8002660:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002664:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002666:	2301      	movs	r3, #1
 8002668:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800266a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800266c:	f383 8810 	msr	PRIMASK, r3
}
 8002670:	46c0      	nop			@ (mov r8, r8)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2180      	movs	r1, #128	@ 0x80
 800267e:	438a      	bics	r2, r1
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002684:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002688:	f383 8810 	msr	PRIMASK, r3
}
 800268c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2288      	movs	r2, #136	@ 0x88
 8002692:	2120      	movs	r1, #32
 8002694:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2284      	movs	r2, #132	@ 0x84
 800269a:	2100      	movs	r1, #0
 800269c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e060      	b.n	8002764 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2204      	movs	r2, #4
 80026aa:	4013      	ands	r3, r2
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d146      	bne.n	800273e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026b2:	2280      	movs	r2, #128	@ 0x80
 80026b4:	03d1      	lsls	r1, r2, #15
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	4a2c      	ldr	r2, [pc, #176]	@ (800276c <UART_CheckIdleState+0x14c>)
 80026ba:	9200      	str	r2, [sp, #0]
 80026bc:	2200      	movs	r2, #0
 80026be:	f000 f859 	bl	8002774 <UART_WaitOnFlagUntilTimeout>
 80026c2:	1e03      	subs	r3, r0, #0
 80026c4:	d03b      	beq.n	800273e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80026c6:	f3ef 8310 	mrs	r3, PRIMASK
 80026ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80026cc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80026ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80026d0:	2301      	movs	r3, #1
 80026d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f383 8810 	msr	PRIMASK, r3
}
 80026da:	46c0      	nop			@ (mov r8, r8)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4922      	ldr	r1, [pc, #136]	@ (8002770 <UART_CheckIdleState+0x150>)
 80026e8:	400a      	ands	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f383 8810 	msr	PRIMASK, r3
}
 80026f6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80026f8:	f3ef 8310 	mrs	r3, PRIMASK
 80026fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80026fe:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002700:	633b      	str	r3, [r7, #48]	@ 0x30
 8002702:	2301      	movs	r3, #1
 8002704:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	f383 8810 	msr	PRIMASK, r3
}
 800270c:	46c0      	nop			@ (mov r8, r8)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2101      	movs	r1, #1
 800271a:	438a      	bics	r2, r1
 800271c:	609a      	str	r2, [r3, #8]
 800271e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002720:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	f383 8810 	msr	PRIMASK, r3
}
 8002728:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	228c      	movs	r2, #140	@ 0x8c
 800272e:	2120      	movs	r1, #32
 8002730:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2284      	movs	r2, #132	@ 0x84
 8002736:	2100      	movs	r1, #0
 8002738:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e012      	b.n	8002764 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2288      	movs	r2, #136	@ 0x88
 8002742:	2120      	movs	r1, #32
 8002744:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	228c      	movs	r2, #140	@ 0x8c
 800274a:	2120      	movs	r1, #32
 800274c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2284      	movs	r2, #132	@ 0x84
 800275e:	2100      	movs	r1, #0
 8002760:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	0018      	movs	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	b010      	add	sp, #64	@ 0x40
 800276a:	bd80      	pop	{r7, pc}
 800276c:	01ffffff 	.word	0x01ffffff
 8002770:	fffffedf 	.word	0xfffffedf

08002774 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	1dfb      	adds	r3, r7, #7
 8002782:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002784:	e051      	b.n	800282a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	3301      	adds	r3, #1
 800278a:	d04e      	beq.n	800282a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800278c:	f7fe f9f6 	bl	8000b7c <HAL_GetTick>
 8002790:	0002      	movs	r2, r0
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	429a      	cmp	r2, r3
 800279a:	d302      	bcc.n	80027a2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e051      	b.n	800284a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2204      	movs	r2, #4
 80027ae:	4013      	ands	r3, r2
 80027b0:	d03b      	beq.n	800282a <UART_WaitOnFlagUntilTimeout+0xb6>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b80      	cmp	r3, #128	@ 0x80
 80027b6:	d038      	beq.n	800282a <UART_WaitOnFlagUntilTimeout+0xb6>
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b40      	cmp	r3, #64	@ 0x40
 80027bc:	d035      	beq.n	800282a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	2208      	movs	r2, #8
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d111      	bne.n	80027f0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2208      	movs	r2, #8
 80027d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	0018      	movs	r0, r3
 80027d8:	f000 f83c 	bl	8002854 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2290      	movs	r2, #144	@ 0x90
 80027e0:	2108      	movs	r1, #8
 80027e2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2284      	movs	r2, #132	@ 0x84
 80027e8:	2100      	movs	r1, #0
 80027ea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e02c      	b.n	800284a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	69da      	ldr	r2, [r3, #28]
 80027f6:	2380      	movs	r3, #128	@ 0x80
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	401a      	ands	r2, r3
 80027fc:	2380      	movs	r3, #128	@ 0x80
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	429a      	cmp	r2, r3
 8002802:	d112      	bne.n	800282a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2280      	movs	r2, #128	@ 0x80
 800280a:	0112      	lsls	r2, r2, #4
 800280c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	0018      	movs	r0, r3
 8002812:	f000 f81f 	bl	8002854 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2290      	movs	r2, #144	@ 0x90
 800281a:	2120      	movs	r1, #32
 800281c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2284      	movs	r2, #132	@ 0x84
 8002822:	2100      	movs	r1, #0
 8002824:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e00f      	b.n	800284a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	4013      	ands	r3, r2
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	425a      	negs	r2, r3
 800283a:	4153      	adcs	r3, r2
 800283c:	b2db      	uxtb	r3, r3
 800283e:	001a      	movs	r2, r3
 8002840:	1dfb      	adds	r3, r7, #7
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d09e      	beq.n	8002786 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	0018      	movs	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	b004      	add	sp, #16
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08e      	sub	sp, #56	@ 0x38
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800285c:	f3ef 8310 	mrs	r3, PRIMASK
 8002860:	617b      	str	r3, [r7, #20]
  return(result);
 8002862:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002864:	637b      	str	r3, [r7, #52]	@ 0x34
 8002866:	2301      	movs	r3, #1
 8002868:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	f383 8810 	msr	PRIMASK, r3
}
 8002870:	46c0      	nop			@ (mov r8, r8)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4926      	ldr	r1, [pc, #152]	@ (8002918 <UART_EndRxTransfer+0xc4>)
 800287e:	400a      	ands	r2, r1
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002884:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f383 8810 	msr	PRIMASK, r3
}
 800288c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800288e:	f3ef 8310 	mrs	r3, PRIMASK
 8002892:	623b      	str	r3, [r7, #32]
  return(result);
 8002894:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002896:	633b      	str	r3, [r7, #48]	@ 0x30
 8002898:	2301      	movs	r3, #1
 800289a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	f383 8810 	msr	PRIMASK, r3
}
 80028a2:	46c0      	nop			@ (mov r8, r8)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	491b      	ldr	r1, [pc, #108]	@ (800291c <UART_EndRxTransfer+0xc8>)
 80028b0:	400a      	ands	r2, r1
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ba:	f383 8810 	msr	PRIMASK, r3
}
 80028be:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d118      	bne.n	80028fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80028c8:	f3ef 8310 	mrs	r3, PRIMASK
 80028cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80028ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028d2:	2301      	movs	r3, #1
 80028d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f383 8810 	msr	PRIMASK, r3
}
 80028dc:	46c0      	nop			@ (mov r8, r8)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2110      	movs	r1, #16
 80028ea:	438a      	bics	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f383 8810 	msr	PRIMASK, r3
}
 80028f8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	228c      	movs	r2, #140	@ 0x8c
 80028fe:	2120      	movs	r1, #32
 8002900:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800290e:	46c0      	nop			@ (mov r8, r8)
 8002910:	46bd      	mov	sp, r7
 8002912:	b00e      	add	sp, #56	@ 0x38
 8002914:	bd80      	pop	{r7, pc}
 8002916:	46c0      	nop			@ (mov r8, r8)
 8002918:	fffffedf 	.word	0xfffffedf
 800291c:	effffffe 	.word	0xeffffffe

08002920 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e05d      	b.n	80029f4 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2288      	movs	r2, #136	@ 0x88
 800293c:	589b      	ldr	r3, [r3, r2]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d107      	bne.n	8002952 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2284      	movs	r2, #132	@ 0x84
 8002946:	2100      	movs	r1, #0
 8002948:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	0018      	movs	r0, r3
 800294e:	f7fd ffad 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2288      	movs	r2, #136	@ 0x88
 8002956:	2124      	movs	r1, #36	@ 0x24
 8002958:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2101      	movs	r1, #1
 8002966:	438a      	bics	r2, r1
 8002968:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	0018      	movs	r0, r3
 8002976:	f7ff fd9f 	bl	80024b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	0018      	movs	r0, r3
 800297e:	f7ff fc1d 	bl	80021bc <UART_SetConfig>
 8002982:	0003      	movs	r3, r0
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e033      	b.n	80029f4 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2180      	movs	r1, #128	@ 0x80
 8002998:	01c9      	lsls	r1, r1, #7
 800299a:	430a      	orrs	r2, r1
 800299c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	4a15      	ldr	r2, [pc, #84]	@ (80029fc <HAL_RS485Ex_Init+0xdc>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	0019      	movs	r1, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	055b      	lsls	r3, r3, #21
 80029b8:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	041b      	lsls	r3, r3, #16
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a0d      	ldr	r2, [pc, #52]	@ (8002a00 <HAL_RS485Ex_Init+0xe0>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	0019      	movs	r1, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2101      	movs	r1, #1
 80029e6:	430a      	orrs	r2, r1
 80029e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	0018      	movs	r0, r3
 80029ee:	f7ff fe17 	bl	8002620 <UART_CheckIdleState>
 80029f2:	0003      	movs	r3, r0
}
 80029f4:	0018      	movs	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b006      	add	sp, #24
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	ffff7fff 	.word	0xffff7fff
 8002a00:	fc00ffff 	.word	0xfc00ffff

08002a04 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2284      	movs	r2, #132	@ 0x84
 8002a10:	5c9b      	ldrb	r3, [r3, r2]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_UARTEx_DisableFifoMode+0x16>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e027      	b.n	8002a6a <HAL_UARTEx_DisableFifoMode+0x66>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2284      	movs	r2, #132	@ 0x84
 8002a1e:	2101      	movs	r1, #1
 8002a20:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2288      	movs	r2, #136	@ 0x88
 8002a26:	2124      	movs	r1, #36	@ 0x24
 8002a28:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	438a      	bics	r2, r1
 8002a40:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4a0b      	ldr	r2, [pc, #44]	@ (8002a74 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2288      	movs	r2, #136	@ 0x88
 8002a5c:	2120      	movs	r1, #32
 8002a5e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2284      	movs	r2, #132	@ 0x84
 8002a64:	2100      	movs	r1, #0
 8002a66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b004      	add	sp, #16
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	46c0      	nop			@ (mov r8, r8)
 8002a74:	dfffffff 	.word	0xdfffffff

08002a78 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2284      	movs	r2, #132	@ 0x84
 8002a86:	5c9b      	ldrb	r3, [r3, r2]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e02e      	b.n	8002aee <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2284      	movs	r2, #132	@ 0x84
 8002a94:	2101      	movs	r1, #1
 8002a96:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2288      	movs	r2, #136	@ 0x88
 8002a9c:	2124      	movs	r1, #36	@ 0x24
 8002a9e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	438a      	bics	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	08d9      	lsrs	r1, r3, #3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f000 f854 	bl	8002b7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2288      	movs	r2, #136	@ 0x88
 8002ae0:	2120      	movs	r1, #32
 8002ae2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2284      	movs	r2, #132	@ 0x84
 8002ae8:	2100      	movs	r1, #0
 8002aea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	0018      	movs	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b004      	add	sp, #16
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2284      	movs	r2, #132	@ 0x84
 8002b06:	5c9b      	ldrb	r3, [r3, r2]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e02f      	b.n	8002b70 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2284      	movs	r2, #132	@ 0x84
 8002b14:	2101      	movs	r1, #1
 8002b16:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2288      	movs	r2, #136	@ 0x88
 8002b1c:	2124      	movs	r1, #36	@ 0x24
 8002b1e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2101      	movs	r1, #1
 8002b34:	438a      	bics	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8002b78 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	0019      	movs	r1, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	0018      	movs	r0, r3
 8002b52:	f000 f813 	bl	8002b7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2288      	movs	r2, #136	@ 0x88
 8002b62:	2120      	movs	r1, #32
 8002b64:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2284      	movs	r2, #132	@ 0x84
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	0018      	movs	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b004      	add	sp, #16
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	f1ffffff 	.word	0xf1ffffff

08002b7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d108      	bne.n	8002b9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	226a      	movs	r2, #106	@ 0x6a
 8002b90:	2101      	movs	r1, #1
 8002b92:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2268      	movs	r2, #104	@ 0x68
 8002b98:	2101      	movs	r1, #1
 8002b9a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002b9c:	e043      	b.n	8002c26 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002b9e:	260f      	movs	r6, #15
 8002ba0:	19bb      	adds	r3, r7, r6
 8002ba2:	2208      	movs	r2, #8
 8002ba4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002ba6:	200e      	movs	r0, #14
 8002ba8:	183b      	adds	r3, r7, r0
 8002baa:	2208      	movs	r2, #8
 8002bac:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	0e5b      	lsrs	r3, r3, #25
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	240d      	movs	r4, #13
 8002bba:	193b      	adds	r3, r7, r4
 8002bbc:	2107      	movs	r1, #7
 8002bbe:	400a      	ands	r2, r1
 8002bc0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	0f5b      	lsrs	r3, r3, #29
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	250c      	movs	r5, #12
 8002bce:	197b      	adds	r3, r7, r5
 8002bd0:	2107      	movs	r1, #7
 8002bd2:	400a      	ands	r2, r1
 8002bd4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002bd6:	183b      	adds	r3, r7, r0
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	197a      	adds	r2, r7, r5
 8002bdc:	7812      	ldrb	r2, [r2, #0]
 8002bde:	4914      	ldr	r1, [pc, #80]	@ (8002c30 <UARTEx_SetNbDataToProcess+0xb4>)
 8002be0:	5c8a      	ldrb	r2, [r1, r2]
 8002be2:	435a      	muls	r2, r3
 8002be4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002be6:	197b      	adds	r3, r7, r5
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	4a12      	ldr	r2, [pc, #72]	@ (8002c34 <UARTEx_SetNbDataToProcess+0xb8>)
 8002bec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002bee:	0019      	movs	r1, r3
 8002bf0:	f7fd fb14 	bl	800021c <__divsi3>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	b299      	uxth	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	226a      	movs	r2, #106	@ 0x6a
 8002bfc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002bfe:	19bb      	adds	r3, r7, r6
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	193a      	adds	r2, r7, r4
 8002c04:	7812      	ldrb	r2, [r2, #0]
 8002c06:	490a      	ldr	r1, [pc, #40]	@ (8002c30 <UARTEx_SetNbDataToProcess+0xb4>)
 8002c08:	5c8a      	ldrb	r2, [r1, r2]
 8002c0a:	435a      	muls	r2, r3
 8002c0c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002c0e:	193b      	adds	r3, r7, r4
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	4a08      	ldr	r2, [pc, #32]	@ (8002c34 <UARTEx_SetNbDataToProcess+0xb8>)
 8002c14:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002c16:	0019      	movs	r1, r3
 8002c18:	f7fd fb00 	bl	800021c <__divsi3>
 8002c1c:	0003      	movs	r3, r0
 8002c1e:	b299      	uxth	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2268      	movs	r2, #104	@ 0x68
 8002c24:	5299      	strh	r1, [r3, r2]
}
 8002c26:	46c0      	nop			@ (mov r8, r8)
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	b005      	add	sp, #20
 8002c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c2e:	46c0      	nop			@ (mov r8, r8)
 8002c30:	08002d6c 	.word	0x08002d6c
 8002c34:	08002d74 	.word	0x08002d74

08002c38 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e017      	b.n	8002c7a <HAL_WWDG_Init+0x42>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f7fd feb3 	bl	80009b8 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2180      	movs	r1, #128	@ 0x80
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	0011      	movs	r1, r2
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b002      	add	sp, #8
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <memset>:
 8002c82:	0003      	movs	r3, r0
 8002c84:	1882      	adds	r2, r0, r2
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d100      	bne.n	8002c8c <memset+0xa>
 8002c8a:	4770      	bx	lr
 8002c8c:	7019      	strb	r1, [r3, #0]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	e7f9      	b.n	8002c86 <memset+0x4>
	...

08002c94 <__libc_init_array>:
 8002c94:	b570      	push	{r4, r5, r6, lr}
 8002c96:	2600      	movs	r6, #0
 8002c98:	4c0c      	ldr	r4, [pc, #48]	@ (8002ccc <__libc_init_array+0x38>)
 8002c9a:	4d0d      	ldr	r5, [pc, #52]	@ (8002cd0 <__libc_init_array+0x3c>)
 8002c9c:	1b64      	subs	r4, r4, r5
 8002c9e:	10a4      	asrs	r4, r4, #2
 8002ca0:	42a6      	cmp	r6, r4
 8002ca2:	d109      	bne.n	8002cb8 <__libc_init_array+0x24>
 8002ca4:	2600      	movs	r6, #0
 8002ca6:	f000 f819 	bl	8002cdc <_init>
 8002caa:	4c0a      	ldr	r4, [pc, #40]	@ (8002cd4 <__libc_init_array+0x40>)
 8002cac:	4d0a      	ldr	r5, [pc, #40]	@ (8002cd8 <__libc_init_array+0x44>)
 8002cae:	1b64      	subs	r4, r4, r5
 8002cb0:	10a4      	asrs	r4, r4, #2
 8002cb2:	42a6      	cmp	r6, r4
 8002cb4:	d105      	bne.n	8002cc2 <__libc_init_array+0x2e>
 8002cb6:	bd70      	pop	{r4, r5, r6, pc}
 8002cb8:	00b3      	lsls	r3, r6, #2
 8002cba:	58eb      	ldr	r3, [r5, r3]
 8002cbc:	4798      	blx	r3
 8002cbe:	3601      	adds	r6, #1
 8002cc0:	e7ee      	b.n	8002ca0 <__libc_init_array+0xc>
 8002cc2:	00b3      	lsls	r3, r6, #2
 8002cc4:	58eb      	ldr	r3, [r5, r3]
 8002cc6:	4798      	blx	r3
 8002cc8:	3601      	adds	r6, #1
 8002cca:	e7f2      	b.n	8002cb2 <__libc_init_array+0x1e>
 8002ccc:	08002d7c 	.word	0x08002d7c
 8002cd0:	08002d7c 	.word	0x08002d7c
 8002cd4:	08002d80 	.word	0x08002d80
 8002cd8:	08002d7c 	.word	0x08002d7c

08002cdc <_init>:
 8002cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cde:	46c0      	nop			@ (mov r8, r8)
 8002ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ce2:	bc08      	pop	{r3}
 8002ce4:	469e      	mov	lr, r3
 8002ce6:	4770      	bx	lr

08002ce8 <_fini>:
 8002ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cea:	46c0      	nop			@ (mov r8, r8)
 8002cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cee:	bc08      	pop	{r3}
 8002cf0:	469e      	mov	lr, r3
 8002cf2:	4770      	bx	lr
